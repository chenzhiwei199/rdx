(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{104:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return RdxContext}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),shareContext=__webpack_require__(86),core=__webpack_require__(148),global=__webpack_require__(33);var UiBatcher=props=>{const[state,dispatch]=react_default.a.useReducer(s=>({}),{}),storeRef=Object(react.useContext)(shareContext.c);return props.setNotifyBatcherOfChange(()=>dispatch()),Object(react.useEffect)(()=>{storeRef.uiQueue.size>0&&(Array.from(storeRef.uiQueue).forEach(id=>{storeRef.eventEmitter.emit(id+"----"+global.b.State)}),storeRef.uiQueue.clear())}),null};var RdxContext_ScheduleBatcher=props=>{const storeRef=Object(react.useContext)(shareContext.c),[_,setState]=Object(react.useState)([]);return props.setNotifyBatcherOfChange(()=>setState({})),Object(react.useEffect)(()=>{storeRef.triggerQueue.size>0&&storeRef.batchTriggerSchedule(Array.from(storeRef.triggerQueue)),storeRef.triggerQueue.clear()}),null},react_dom=__webpack_require__(12),react_dom_default=__webpack_require__.n(react_dom),typings_global=__webpack_require__(226);const RdxContext=props=>{const{initializeState:initializeState,onChange:onChange=(()=>{}),onStateChange:onStateChange=(()=>{}),shouldUpdate:shouldUpdate,state:state,name:name,withRef:withRef,createStore:createStore}=props,isUnderControl=void 0!==state,currentState=state||initializeState||{};function createTaskState(value){return createStore?createStore(currentState):new core.c(currentState)}const store=react.useRef(new shareContext.a(Object.assign(Object.assign({},Object(shareContext.e)()),{name:name,taskState:createTaskState()})));store.current.onPropsChange=onChange,store.current.onPropsStateChange=onStateChange;const uiNotifyBatcherOfChange=react.useRef(null),scheduleNotifyBatcherOfChange=react.useRef(null);return store.current.batchUiChange=()=>{uiNotifyBatcherOfChange.current()},store.current.batchTriggerChange=()=>{scheduleNotifyBatcherOfChange.current()},withRef&&(withRef.current=store.current),store.current.subject.emit(typings_global.b.RdxContextInit),react.useEffect(()=>{if(isUnderControl){const diffObjectKeys=Array.from(store.current.tasksMap.getAll().keys()).filter(key=>shouldUpdate?shouldUpdate(store.current.taskState.get(key),state[key]):state[key]!==store.current.taskState.get(key));store.current.taskState=createTaskState(),react_dom_default.a.unstable_batchedUpdates(()=>{diffObjectKeys.forEach(key=>{store.current.notifyModule(key)})})}},[state]),react.useEffect(()=>{const queue=store.current.queue;store.current.parentMounted=!0,queue.size>0&&store.current.batchTriggerSchedule(Array.from(queue).reverse().map(item=>({key:item,downStreamOnly:!1})))},[]),react.createElement(shareContext.d,{value:store.current},react.createElement(UiBatcher,{setNotifyBatcherOfChange:x=>{uiNotifyBatcherOfChange.current=x}}),react.createElement(RdxContext_ScheduleBatcher,{setNotifyBatcherOfChange:x=>{scheduleNotifyBatcherOfChange.current=x}}),props.children)}},115:function(module,__webpack_exports__,__webpack_require__){"use strict";function createDeliversMap(config){const deliversMap=new Map;for(const item of config)for(const dep of item.deps||[]){const currentRelations=deliversMap.get(dep.id);currentRelations?currentRelations.push(item.key):deliversMap.set(dep.id,[item.key])}return deliversMap}function createConfigMap(config){return config.reduce((currentMap,item)=>(currentMap.set(item.key,item),currentMap),new Map)}function normalizeSingle2Arr(point){return Array.isArray(point)?point:[point]}function arr2Map(source,getKey){const m=new Map;return source.forEach(item=>{const key=getKey(item);m.set(key,item)}),m}function union(source,byKey=(t=>t)){const arr=[],m=new Map;return source.forEach(item=>{const key=byKey(item);m.has(key)||(arr.push(item),m.set(key,item))}),arr}__webpack_require__.d(__webpack_exports__,"c",(function(){return createDeliversMap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return createConfigMap})),__webpack_require__.d(__webpack_exports__,"d",(function(){return normalizeSingle2Arr})),__webpack_require__.d(__webpack_exports__,"a",(function(){return arr2Map})),__webpack_require__.d(__webpack_exports__,"e",(function(){return union}))},116:function(module,__webpack_exports__,__webpack_require__){"use strict";var POINT_RELEVANT_STATUS,NodeStatus;__webpack_require__.d(__webpack_exports__,"a",(function(){return NodeStatus})),function(POINT_RELEVANT_STATUS){POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.SAME_POINT=1]="SAME_POINT",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.UP_STREAM=2]="UP_STREAM",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.DOWN_STREAM=2]="DOWN_STREAM",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.IRRELEVANT=4]="IRRELEVANT"}(POINT_RELEVANT_STATUS||(POINT_RELEVANT_STATUS={})),function(NodeStatus){NodeStatus.Running="RUNNING",NodeStatus.Finish="FINISH",NodeStatus.Waiting="WATTING",NodeStatus.IDeal="NONE",NodeStatus.Error="ERROR"}(NodeStatus||(NodeStatus={}))},117:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return END})),__webpack_require__.d(__webpack_exports__,"b",(function(){return cleanConfig})),__webpack_require__.d(__webpack_exports__,"c",(function(){return graphAdapter})),__webpack_require__.d(__webpack_exports__,"e",(function(){return point2WithWeightAdapter})),__webpack_require__.d(__webpack_exports__,"d",(function(){return graphLibAdapter}));var _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(926),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const END="i am i end subscribe, hahaha";var ReasonType;function cleanConfig(p,triggerKey,donwStream){const edgeCuts=[],graph=new _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a(graphAdapter(p));try{!function removeCircleEdges(rootGraph,currentGraph,triggerKey,edgeCuts){const circles=rootGraph.findCycles();if(0===circles.length)return;const path=currentGraph.getAllPointsByPoints({key:triggerKey,downStreamOnly:!1});circles.forEach(circle=>{let circleTriggerKey=(sourceArr=circle,path.find(item=>sourceArr.includes(item)));var sourceArr;circleTriggerKey||(circleTriggerKey=circle[0]);const circleGraph=((graph,circle)=>{const config=graph.getRelationConfig(circle);return new _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a(config)})(currentGraph,circle),edgeCut={circle:circle,edges:[]};function removeEdge({v:v,w:w}){circleGraph.removeEdge(v,w),rootGraph.removeEdge(v,w)}function appendEdgeCuts(edges){edgeCut.edges=[...edgeCut.edges,...edges]}const inEdges=circleGraph.inEdges(circleTriggerKey);if(inEdges){const inEdgesInCircle=inEdges;inEdgesInCircle.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(inEdgesInCircle.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.TriggerInnEdge})))}const outEdges=rootGraph.outEdges(circleTriggerKey);if(outEdges){const willCutEdges=(edges=>{let max=-1,maxIndex=-1;return edges.forEach((item,index)=>{const{value:value}=item;value.weight>max&&(max=value.weight,maxIndex=index)}),-1===maxIndex?null:[...edges.slice(0,maxIndex),...edges.slice(maxIndex+1)]})(outEdges.map(item=>Object.assign(Object.assign({},item),{value:rootGraph.edge(item.v,item.w)})));if(willCutEdges)willCutEdges.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(willCutEdges.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.SmallWeight})));else{const others=outEdges.slice(1);others.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(others.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.WeightEqualAndNotFirst})))}}edgeCuts.push(edgeCut),removeCircleEdges(rootGraph,circleGraph,circleTriggerKey,edgeCuts)})}(graph,graph,triggerKey,edgeCuts),!0===donwStream&&graph.removeNode(triggerKey)}catch(error){console.error(error)}return{points:graph.config,edgeCuts:edgeCuts}}function graphAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{deps:(p.deps||[]).map(dep=>{if("string"==typeof dep)return{id:dep};{const{id:id}=dep,others=__rest(dep,["id"]);return{id:dep.id,value:others}}})}))}function point2WithWeightAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{id:p.key,deps:(p.deps||[]).map(dep=>({id:dep.id}))}))}function graphLibAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{id:p.key,deps:(p.deps||[]).map(dep=>"string"==typeof dep?{id:dep}:dep)}))}!function(ReasonType){ReasonType.TriggerInnEdge="TriggerInnEdge",ReasonType.SmallWeight="SmallWeight",ReasonType.WeightEqualAndNotFirst="WeightEqualAndNotFirst"}(ReasonType||(ReasonType={}))},133:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"c",(function(){return useTaskInit})),__webpack_require__.d(__webpack_exports__,"a",(function(){return useMount})),__webpack_require__.d(__webpack_exports__,"d",(function(){return useTaskUpdate})),__webpack_require__.d(__webpack_exports__,"b",(function(){return useStateUpdate}));var _utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(149),_RdxContext_interface__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(28),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1),_RdxView_View__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(38),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function getTaskInfo(props){const{context:context}=props;return __rest(props,["context"])}function useTaskInit(props){const{context:context,id:id}=props,taskInfo=getTaskInfo(props);Object(react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>(context.parentMounted?context.addOrUpdateTask(id,taskInfo,{notifyTask:!0,notifyView:!0}):(context.udpateState(id,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_1__.a.Update,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_1__.b.TasksMap,taskInfo),context.queue.add(id)),()=>{context.udpateState(id,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_1__.a.Remove,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_1__.b.TasksMap)}),[])}function useMount(){const mount=Object(react__WEBPACK_IMPORTED_MODULE_2__.useRef)(!1);return Object(react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{mount.current=!0},[]),mount}function useTaskUpdate(nextProps){const{context:context,reaction:model,moduleConfig:modelConfig,scope:scope,deps:depsIds,id:id}=nextProps,mount=useMount();Object(react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{if(mount.current){const taskInfo=getTaskInfo(nextProps);if(context.tasksMap.get(id)){const preTaskInfo=context.tasksMap.get(id),isTaskChange=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(preTaskInfo,taskInfo,_utils__WEBPACK_IMPORTED_MODULE_0__.a.ExecuteTask),isViewChange=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(preTaskInfo,taskInfo,_utils__WEBPACK_IMPORTED_MODULE_0__.a.ViewShouldUpdate);context.addOrUpdateTask(id,taskInfo,{notifyTask:isTaskChange,notifyView:isViewChange})}else context.removeTask(id),context.addOrUpdateTask(id,taskInfo,{notifyTask:!0,notifyView:!1})}},[mount.current,id,depsIds,model,scope,modelConfig])}function useStateUpdate(id,context,type){const forceUpdate=Object(_RdxView_View__WEBPACK_IMPORTED_MODULE_3__.b)();Object(react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{const eventKey=id+"----"+type;return context.eventEmitter.on(eventKey,()=>{forceUpdate()}),()=>{context.eventEmitter.off(eventKey)}},[])}},148:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return BaseMap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return BaseObject})),__webpack_require__.d(__webpack_exports__,"c",(function(){return ScopeObject}));class BaseMap{constructor(v){this.v=v}clone(){return new BaseMap(this.v)}merge(scope){throw new Error("Method not implemented.")}get(key,scope){return this.v.get(key)||null}removeAll(){this.v.clear()}remove(rkey,scope){const newMap=new Map;Array.from(this.v.keys()).forEach(key=>{key!==rkey&&newMap.set(key,this.v.get(key))}),this.v=newMap}update(key,value,scope){const newV=new Map(this.v);return newV.set(key,value),this.v=newV,this}getAll(){return this.v}}class BaseObject{constructor(v){this.v=v}remove(key,scope){this.v=Object.assign(Object.assign({},this.v),{[key]:null})}merge(scope){throw new Error("Method not implemented.")}clone(){return new BaseObject(this.v)}getAll(){return this.v}get(key,scope){return this.v[key]}update(key,value,scope){return this.v=Object.assign(Object.assign({},this.v),{[key]:value}),this}}class ScopeObject extends BaseObject{constructor(v,scopeState){super(v),this.scopeEditState=new Map,scopeState&&Array.from(scopeState.keys()).forEach(scope=>{this.scopeEditState.set(scope,scopeState.get(scope))})}getCurrentScopeState(scope){return this.scopeEditState.get(scope)}hasScopeState(scope){return Boolean(this.scopeEditState.get(scope))}get(key,scope){if(!scope)return super.get(key);const scopeState=this.getCurrentScopeState(scope),vInScope=scopeState&&scopeState.get(key);return scopeState&&void 0!==vInScope?vInScope:super.get(key)}remove(key,scope){super.remove(key,scope),this.hasScopeState(scope)&&this.scopeEditState.set(scope,null)}merge(scope){if(this.hasScopeState(scope)){const currentScopeState=this.getCurrentScopeState(scope);this.scopeEditState.set(scope,null),this.v=Object.assign({},super.getAll(),currentScopeState.getAll())}}clone(){return new ScopeObject(super.getAll(),this.scopeEditState)}update(key,value,scope){let state=super.getAll();if(scope){if(this.hasScopeState(scope)){const currentScopeState=this.getCurrentScopeState(scope);this.scopeEditState.set(scope,currentScopeState.update(key,value))}else this.scopeEditState.set(scope,new BaseObject({[key]:value}))}else state=super.update(key,value,scope).getAll();this.v=state}}},149:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return CompareType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return checkTaskChange})),__webpack_require__.d(__webpack_exports__,"c",(function(){return createBaseContext}));var CompareType,shallowequal__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(269),shallowequal__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_0__);function checkTaskChange(preProps,nextProps,type){if(!nextProps||!preProps)return!0;let change=!1;const notCareKeys=["defaultValue","moduleConfig","areEqualForTask"];return Object.keys(preProps).forEach(key=>{"deps"===key?change=nextProps[key].some((item,index)=>!shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(item,preProps[key][index])):notCareKeys.includes(key)?function checkIsModuleChange(preProps,nextProps,type){const{areEqualForTask:areEqualForTask,moduleConfig:moduleConfig}=nextProps,preModuleConfig=preProps&&preProps.moduleConfig;return areEqualForTask?!areEqualForTask(type,moduleConfig,preModuleConfig):!shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(moduleConfig,preModuleConfig)}(preProps,nextProps,type)&&(change=!0):shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(preProps[key],nextProps[key])||(change=!0)}),change}function createBaseContext(id,context,defaultTaskMap){let taskInfo=context.tasksMap.get(id);taskInfo=taskInfo||defaultTaskMap;const{moduleConfig:moduleConfig,deps:deps=[],scope:scope}=taskInfo;return{id:id,deps:deps,moduleConfig:moduleConfig,depsModuleConfig:deps.map(dep=>{const taskMap=context.tasksMap;return taskMap.get(dep.id)&&taskMap.get(dep.id).moduleConfig}),depsValues:(deps||taskInfo&&taskInfo.deps||[]).map(key=>{const currentDeptId=key.id,scope=context.tasksMap.get(currentDeptId)&&context.tasksMap.get(currentDeptId).scope;return context.taskState.get(currentDeptId,scope)}),state:context.taskState.getAll(),value:context.taskState.get(id,scope),lastDepsValue:deps.map(dep=>{const tasksMap=context.tasksMap;if(tasksMap.get(dep.id)){const scope=tasksMap.get(dep.id).scope;return context.preTaskState&&context.preTaskState.get(dep.id,scope)}return null})}}!function(CompareType){CompareType.ExecuteTask="ExecuteTask",CompareType.ViewShouldUpdate="ViewShouldUpdate"}(CompareType||(CompareType={}))},1727:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(1728),__webpack_require__(68),__webpack_require__(34),__webpack_require__(57),__webpack_require__(161);var _storybook_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(349);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_5__.addParameters)({options:{storySort:function storySort(a,b){var config=[{category:"介绍",order:["基本信息","动机","核心概念"]},{category:"基本示例",order:["Introduction"]},{category:"场景示例",order:["组件的状态"]},{category:"ReactJS",order:["Introduction","Quickstart","Examples"]},{category:"Components"}],story1=a[1].kind.split("|"),story2=b[1].kind.split("|");function getOrderNumber(needle,haystack){var order=9999;return Array.isArray(haystack)&&-1===(order=haystack.findIndex((function(h){return h.toLowerCase()===needle.toLowerCase()})))&&(order=9999),order}var topLevelOrderArray=config.map((function(h){return h.category})),topLevelOrder1=getOrderNumber(story1[0],topLevelOrderArray),topLevelOrder2=getOrderNumber(story2[0],topLevelOrderArray);return story1[0]!==story2[0]?topLevelOrder1-topLevelOrder2:story1[1]!==story2[1]?getOrderNumber(story1[1],config[topLevelOrder1]&&config[topLevelOrder1].order)-getOrderNumber(story2[1],config[topLevelOrder2]&&config[topLevelOrder2].order):0}}})},1751:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(349);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(1753),__webpack_require__(2181)],module)}.call(this,__webpack_require__(1752)(module))},1753:function(module,exports,__webpack_require__){var map={"./advancedDemos/TicTacToe.stories.tsx":1754,"./advancedDemos/Todo.stories.tsx":1757,"./advancedDemos/cascader.stories.tsx":1762,"./advancedDemos/cascaderBase.stories.tsx":2174,"./advancedDemos/circleDeps.stories.tsx":2175,"./advancedDemos/editTable.stories.tsx":2176,"./advancedDemos/status.stories.tsx":2178,"./basicDemos/simple.stories.tsx":2179,"./basicDemos/simple2.stories.tsx":2191,"./hooks/basicDemos/simple.stories.tsx":2193,"./others/test2.stories.tsx":2180};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1753},1754:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"井字游戏",(function(){return 井字游戏}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(104),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(38),addSourceDecorator=(__webpack_require__(199),__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React, { useCallback } from 'react';\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\nimport { useState } from 'react';\nimport ReactJson from 'react-json-view';\nexport default {\n  title: '场景示例|点对点更新|棋盘',\n  parameters: {\n    info: { inline: true },\n  },\n};\nconst size = 20;\nconst cellStyle = {\n  textAlign: 'center',\n  width: '20px',\n  height: '20px',\n  minWidth: '20px',\n  minHeight: '20px',\n  lineHeight: '20px',\n  border: '1px solid black',\n};\nconst rowStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nconst Cell = (context: DataContext<any, any[], any>) => {\n  const { value, next } = context;\n  console.log('Cell render');\n  return (\n    <div\n      style={cellStyle as any}\n      onClick={() => {\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n        next(randomContent());\n      }}\n    >\n      {value}\n    </div>\n  );\n};\n\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\nconst ShowDataView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  const depsIds = getDepsIds();\n  let data = [];\n  depsIds.forEach((item, index) => {\n    const [rowIndex, cellIndex] = item.id.split('-');\n    if (data[rowIndex]) {\n      data[rowIndex][cellIndex] = depsValues[index];\n    } else {\n      data[rowIndex] = [depsValues[index]];\n    }\n  });\n  return <ReactJson src={data} />;\n};\nconst getDepsIds = () => {\n  const datas = [];\n  storeModel.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\n    });\n  });\n  return datas;\n};\nexport const 井字游戏 = () => {\n  return (\n    <div className='todoapp'>\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\n      <div>\n        <strong>对比效果图</strong>\n        <br />\n        <img\n          width={'600px'}\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RdxContext>\n            <h2>1.Rdx实现的棋盘</h2>\n            {storeModel.map((row, rowI) => {\n              return (\n                <div key={rowI} style={rowStyle as any}>\n                  {row.map((cell, cellI) => {\n                    return (\n                      <RdxView\n                        recordStatus={false}\n                        id={`${rowI}-${cellI}`}\n                        render={Cell}\n                      ></RdxView>\n                    );\n                  })}\n                </div>\n              );\n            })}\n            {/* <RdxView\n          id={'show data'}\n          recordStatus={false}\n          deps={getDepsIds()}\n          render={ShowDataView}\n        /> */}\n            {/* <DevVisualGraphTool />\n        <DevVisualGraphTool /> */}\n          </RdxContext>\n        </div>\n        <div style={{ marginLeft: 20 }}>\n          <h2>2.普通的棋盘</h2>\n          <Ordinary />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CellForCommon = ({ content, onClick }) => {\n  return (\n    <div style={cellStyle as any} onClick={onClick}>\n      {content}\n    </div>\n  );\n};\nconst Ordinary = () => {\n  const [state, setState] = useState(storeModel);\n  const click = useCallback((rowIndex, colIndex) => {\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n    setState((state) => [\n      ...state.slice(0, rowIndex),\n      [\n        ...state[rowIndex].slice(0, colIndex),\n        randomContent(),\n        ...state[rowIndex].slice(colIndex + 1),\n      ],\n      ...state.slice(rowIndex + 1),\n    ]);\n  }, []);\n  return (\n    <div>\n      {state.map((row, rowIndex) => {\n        return (\n          <div style={rowStyle as any}>\n            {row.map((col, colIndex) => {\n              return (\n                <CellForCommon\n                  content={state[rowIndex][colIndex]}\n                  onClick={() => {\n                    click(rowIndex, colIndex);\n                  }}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n      {/* <ReactJson src={state} /> */}\n    </div>\n  );\n};\n",__ADDS_MAP__={"场景示例-点对点更新-棋盘--井字游戏":{startLoc:{col:20,line:66},endLoc:{col:1,line:114},startBody:{col:20,line:66},endBody:{col:1,line:114}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|点对点更新|棋盘",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useCallback } from 'react';\\\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { useState } from 'react';\\\\nimport ReactJson from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|棋盘',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nconst size = 20;\\\\nconst cellStyle = {\\\\n  textAlign: 'center',\\\\n  width: '20px',\\\\n  height: '20px',\\\\n  minWidth: '20px',\\\\n  minHeight: '20px',\\\\n  lineHeight: '20px',\\\\n  border: '1px solid black',\\\\n};\\\\nconst rowStyle = {\\\\n  display: 'flex',\\\\n  flexDirection: 'row',\\\\n};\\\\n\\\\nconst Cell = (context: DataContext<any, any[], any>) => {\\\\n  const { value, next } = context;\\\\n  console.log('Cell render');\\\\n  return (\\\\n    <div\\\\n      style={cellStyle as any}\\\\n      onClick={() => {\\\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n        next(randomContent());\\\\n      }}\\\\n    >\\\\n      {value}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const depsIds = getDepsIds();\\\\n  let data = [];\\\\n  depsIds.forEach((item, index) => {\\\\n    const [rowIndex, cellIndex] = item.id.split('-');\\\\n    if (data[rowIndex]) {\\\\n      data[rowIndex][cellIndex] = depsValues[index];\\\\n    } else {\\\\n      data[rowIndex] = [depsValues[index]];\\\\n    }\\\\n  });\\\\n  return <ReactJson src={data} />;\\\\n};\\\\nconst getDepsIds = () => {\\\\n  const datas = [];\\\\n  storeModel.forEach((row, rowIndex) => {\\\\n    row.forEach((cell, cellIndex) => {\\\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nexport const 井字游戏 = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\\\n      <div>\\\\n        <strong>对比效果图</strong>\\\\n        <br />\\\\n        <img\\\\n          width={'600px'}\\\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <div>\\\\n          <RdxContext>\\\\n            <h2>1.Rdx实现的棋盘</h2>\\\\n            {storeModel.map((row, rowI) => {\\\\n              return (\\\\n                <div key={rowI} style={rowStyle as any}>\\\\n                  {row.map((cell, cellI) => {\\\\n                    return (\\\\n                      <RdxView\\\\n                        recordStatus={false}\\\\n                        id={`${rowI}-${cellI}`}\\\\n                        render={Cell}\\\\n                      ></RdxView>\\\\n                    );\\\\n                  })}\\\\n                </div>\\\\n              );\\\\n            })}\\\\n            {/* <RdxView\\\\n          id={'show data'}\\\\n          recordStatus={false}\\\\n          deps={getDepsIds()}\\\\n          render={ShowDataView}\\\\n        /> */}\\\\n            {/* <DevVisualGraphTool />\\\\n        <DevVisualGraphTool /> */}\\\\n          </RdxContext>\\\\n        </div>\\\\n        <div style={{ marginLeft: 20 }}>\\\\n          <h2>2.普通的棋盘</h2>\\\\n          <Ordinary />\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst CellForCommon = ({ content, onClick }) => {\\\\n  return (\\\\n    <div style={cellStyle as any} onClick={onClick}>\\\\n      {content}\\\\n    </div>\\\\n  );\\\\n};\\\\nconst Ordinary = () => {\\\\n  const [state, setState] = useState(storeModel);\\\\n  const click = useCallback((rowIndex, colIndex) => {\\\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n    setState((state) => [\\\\n      ...state.slice(0, rowIndex),\\\\n      [\\\\n        ...state[rowIndex].slice(0, colIndex),\\\\n        randomContent(),\\\\n        ...state[rowIndex].slice(colIndex + 1),\\\\n      ],\\\\n      ...state.slice(rowIndex + 1),\\\\n    ]);\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      {state.map((row, rowIndex) => {\\\\n        return (\\\\n          <div style={rowStyle as any}>\\\\n            {row.map((col, colIndex) => {\\\\n              return (\\\\n                <CellForCommon\\\\n                  content={state[rowIndex][colIndex]}\\\\n                  onClick={() => {\\\\n                    click(rowIndex, colIndex);\\\\n                  }}\\\\n                />\\\\n              );\\\\n            })}\\\\n          </div>\\\\n        );\\\\n      })}\\\\n      {/* <ReactJson src={state} /> */}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-点对点更新-棋盘--井字游戏\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":114},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":114}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/TicTacToe.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useCallback } from 'react';\\\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { useState } from 'react';\\\\nimport ReactJson from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|棋盘',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nconst size = 20;\\\\nconst cellStyle = {\\\\n  textAlign: 'center',\\\\n  width: '20px',\\\\n  height: '20px',\\\\n  minWidth: '20px',\\\\n  minHeight: '20px',\\\\n  lineHeight: '20px',\\\\n  border: '1px solid black',\\\\n};\\\\nconst rowStyle = {\\\\n  display: 'flex',\\\\n  flexDirection: 'row',\\\\n};\\\\n\\\\nconst Cell = (context: DataContext<any, any[], any>) => {\\\\n  const { value, next } = context;\\\\n  console.log('Cell render');\\\\n  return (\\\\n    <div\\\\n      style={cellStyle as any}\\\\n      onClick={() => {\\\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n        next(randomContent());\\\\n      }}\\\\n    >\\\\n      {value}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const depsIds = getDepsIds();\\\\n  let data = [];\\\\n  depsIds.forEach((item, index) => {\\\\n    const [rowIndex, cellIndex] = item.id.split('-');\\\\n    if (data[rowIndex]) {\\\\n      data[rowIndex][cellIndex] = depsValues[index];\\\\n    } else {\\\\n      data[rowIndex] = [depsValues[index]];\\\\n    }\\\\n  });\\\\n  return <ReactJson src={data} />;\\\\n};\\\\nconst getDepsIds = () => {\\\\n  const datas = [];\\\\n  storeModel.forEach((row, rowIndex) => {\\\\n    row.forEach((cell, cellIndex) => {\\\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nexport const 井字游戏 = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\\\n      <div>\\\\n        <strong>对比效果图</strong>\\\\n        <br />\\\\n        <img\\\\n          width={'600px'}\\\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <div>\\\\n          <RdxContext>\\\\n            <h2>1.Rdx实现的棋盘</h2>\\\\n            {storeModel.map((row, rowI) => {\\\\n              return (\\\\n                <div key={rowI} style={rowStyle as any}>\\\\n                  {row.map((cell, cellI) => {\\\\n                    return (\\\\n                      <RdxView\\\\n                        recordStatus={false}\\\\n                        id={`${rowI}-${cellI}`}\\\\n                        render={Cell}\\\\n                      ></RdxView>\\\\n                    );\\\\n                  })}\\\\n                </div>\\\\n              );\\\\n            })}\\\\n            {/* <RdxView\\\\n          id={'show data'}\\\\n          recordStatus={false}\\\\n          deps={getDepsIds()}\\\\n          render={ShowDataView}\\\\n        /> */}\\\\n            {/* <DevVisualGraphTool />\\\\n        <DevVisualGraphTool /> */}\\\\n          </RdxContext>\\\\n        </div>\\\\n        <div style={{ marginLeft: 20 }}>\\\\n          <h2>2.普通的棋盘</h2>\\\\n          <Ordinary />\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst CellForCommon = ({ content, onClick }) => {\\\\n  return (\\\\n    <div style={cellStyle as any} onClick={onClick}>\\\\n      {content}\\\\n    </div>\\\\n  );\\\\n};\\\\nconst Ordinary = () => {\\\\n  const [state, setState] = useState(storeModel);\\\\n  const click = useCallback((rowIndex, colIndex) => {\\\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n    setState((state) => [\\\\n      ...state.slice(0, rowIndex),\\\\n      [\\\\n        ...state[rowIndex].slice(0, colIndex),\\\\n        randomContent(),\\\\n        ...state[rowIndex].slice(colIndex + 1),\\\\n      ],\\\\n      ...state.slice(rowIndex + 1),\\\\n    ]);\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      {state.map((row, rowIndex) => {\\\\n        return (\\\\n          <div style={rowStyle as any}>\\\\n            {row.map((col, colIndex) => {\\\\n              return (\\\\n                <CellForCommon\\\\n                  content={state[rowIndex][colIndex]}\\\\n                  onClick={() => {\\\\n                    click(rowIndex, colIndex);\\\\n                  }}\\\\n                />\\\\n              );\\\\n            })}\\\\n          </div>\\\\n        );\\\\n      })}\\\\n      {/* <ReactJson src={state} /> */}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-点对点更新-棋盘--井字游戏\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":114},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":114}}}},\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = addSourceDecorator(() => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":88},\"endLoc\":{\"col\":139,\"line\":136},\"startBody\":{\"col\":20,\"line\":88},\"endBody\":{\"col\":139,\"line\":136}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/TicTacToe.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = () => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":66},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":20,\"line\":66},\"endBody\":{\"col\":1,\"line\":114}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/TicTacToe.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from 'react';\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\nimport { useState } from 'react';\nimport ReactJson from 'react-json-view';\nexport default {\n  title: '场景示例|点对点更新|棋盘',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useCallback } from 'react';\\\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { useState } from 'react';\\\\nimport ReactJson from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|棋盘',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nconst size = 20;\\\\nconst cellStyle = {\\\\n  textAlign: 'center',\\\\n  width: '20px',\\\\n  height: '20px',\\\\n  minWidth: '20px',\\\\n  minHeight: '20px',\\\\n  lineHeight: '20px',\\\\n  border: '1px solid black',\\\\n};\\\\nconst rowStyle = {\\\\n  display: 'flex',\\\\n  flexDirection: 'row',\\\\n};\\\\n\\\\nconst Cell = (context: DataContext<any, any[], any>) => {\\\\n  const { value, next } = context;\\\\n  console.log('Cell render');\\\\n  return (\\\\n    <div\\\\n      style={cellStyle as any}\\\\n      onClick={() => {\\\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n        next(randomContent());\\\\n      }}\\\\n    >\\\\n      {value}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const depsIds = getDepsIds();\\\\n  let data = [];\\\\n  depsIds.forEach((item, index) => {\\\\n    const [rowIndex, cellIndex] = item.id.split('-');\\\\n    if (data[rowIndex]) {\\\\n      data[rowIndex][cellIndex] = depsValues[index];\\\\n    } else {\\\\n      data[rowIndex] = [depsValues[index]];\\\\n    }\\\\n  });\\\\n  return <ReactJson src={data} />;\\\\n};\\\\nconst getDepsIds = () => {\\\\n  const datas = [];\\\\n  storeModel.forEach((row, rowIndex) => {\\\\n    row.forEach((cell, cellIndex) => {\\\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nexport const 井字游戏 = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\\\n      <div>\\\\n        <strong>对比效果图</strong>\\\\n        <br />\\\\n        <img\\\\n          width={'600px'}\\\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <div>\\\\n          <RdxContext>\\\\n            <h2>1.Rdx实现的棋盘</h2>\\\\n            {storeModel.map((row, rowI) => {\\\\n              return (\\\\n                <div key={rowI} style={rowStyle as any}>\\\\n                  {row.map((cell, cellI) => {\\\\n                    return (\\\\n                      <RdxView\\\\n                        recordStatus={false}\\\\n                        id={`${rowI}-${cellI}`}\\\\n                        render={Cell}\\\\n                      ></RdxView>\\\\n                    );\\\\n                  })}\\\\n                </div>\\\\n              );\\\\n            })}\\\\n            {/* <RdxView\\\\n          id={'show data'}\\\\n          recordStatus={false}\\\\n          deps={getDepsIds()}\\\\n          render={ShowDataView}\\\\n        /> */}\\\\n            {/* <DevVisualGraphTool />\\\\n        <DevVisualGraphTool /> */}\\\\n          </RdxContext>\\\\n        </div>\\\\n        <div style={{ marginLeft: 20 }}>\\\\n          <h2>2.普通的棋盘</h2>\\\\n          <Ordinary />\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst CellForCommon = ({ content, onClick }) => {\\\\n  return (\\\\n    <div style={cellStyle as any} onClick={onClick}>\\\\n      {content}\\\\n    </div>\\\\n  );\\\\n};\\\\nconst Ordinary = () => {\\\\n  const [state, setState] = useState(storeModel);\\\\n  const click = useCallback((rowIndex, colIndex) => {\\\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n    setState((state) => [\\\\n      ...state.slice(0, rowIndex),\\\\n      [\\\\n        ...state[rowIndex].slice(0, colIndex),\\\\n        randomContent(),\\\\n        ...state[rowIndex].slice(colIndex + 1),\\\\n      ],\\\\n      ...state.slice(rowIndex + 1),\\\\n    ]);\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      {state.map((row, rowIndex) => {\\\\n        return (\\\\n          <div style={rowStyle as any}>\\\\n            {row.map((col, colIndex) => {\\\\n              return (\\\\n                <CellForCommon\\\\n                  content={state[rowIndex][colIndex]}\\\\n                  onClick={() => {\\\\n                    click(rowIndex, colIndex);\\\\n                  }}\\\\n                />\\\\n              );\\\\n            })}\\\\n          </div>\\\\n        );\\\\n      })}\\\\n      {/* <ReactJson src={state} /> */}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-点对点更新-棋盘--井字游戏\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":114},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":114}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/TicTacToe.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useCallback } from 'react';\\\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { useState } from 'react';\\\\nimport ReactJson from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|棋盘',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nconst size = 20;\\\\nconst cellStyle = {\\\\n  textAlign: 'center',\\\\n  width: '20px',\\\\n  height: '20px',\\\\n  minWidth: '20px',\\\\n  minHeight: '20px',\\\\n  lineHeight: '20px',\\\\n  border: '1px solid black',\\\\n};\\\\nconst rowStyle = {\\\\n  display: 'flex',\\\\n  flexDirection: 'row',\\\\n};\\\\n\\\\nconst Cell = (context: DataContext<any, any[], any>) => {\\\\n  const { value, next } = context;\\\\n  console.log('Cell render');\\\\n  return (\\\\n    <div\\\\n      style={cellStyle as any}\\\\n      onClick={() => {\\\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n        next(randomContent());\\\\n      }}\\\\n    >\\\\n      {value}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const depsIds = getDepsIds();\\\\n  let data = [];\\\\n  depsIds.forEach((item, index) => {\\\\n    const [rowIndex, cellIndex] = item.id.split('-');\\\\n    if (data[rowIndex]) {\\\\n      data[rowIndex][cellIndex] = depsValues[index];\\\\n    } else {\\\\n      data[rowIndex] = [depsValues[index]];\\\\n    }\\\\n  });\\\\n  return <ReactJson src={data} />;\\\\n};\\\\nconst getDepsIds = () => {\\\\n  const datas = [];\\\\n  storeModel.forEach((row, rowIndex) => {\\\\n    row.forEach((cell, cellIndex) => {\\\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nexport const 井字游戏 = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\\\n      <div>\\\\n        <strong>对比效果图</strong>\\\\n        <br />\\\\n        <img\\\\n          width={'600px'}\\\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <div>\\\\n          <RdxContext>\\\\n            <h2>1.Rdx实现的棋盘</h2>\\\\n            {storeModel.map((row, rowI) => {\\\\n              return (\\\\n                <div key={rowI} style={rowStyle as any}>\\\\n                  {row.map((cell, cellI) => {\\\\n                    return (\\\\n                      <RdxView\\\\n                        recordStatus={false}\\\\n                        id={`${rowI}-${cellI}`}\\\\n                        render={Cell}\\\\n                      ></RdxView>\\\\n                    );\\\\n                  })}\\\\n                </div>\\\\n              );\\\\n            })}\\\\n            {/* <RdxView\\\\n          id={'show data'}\\\\n          recordStatus={false}\\\\n          deps={getDepsIds()}\\\\n          render={ShowDataView}\\\\n        /> */}\\\\n            {/* <DevVisualGraphTool />\\\\n        <DevVisualGraphTool /> */}\\\\n          </RdxContext>\\\\n        </div>\\\\n        <div style={{ marginLeft: 20 }}>\\\\n          <h2>2.普通的棋盘</h2>\\\\n          <Ordinary />\\\\n        </div>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\nconst CellForCommon = ({ content, onClick }) => {\\\\n  return (\\\\n    <div style={cellStyle as any} onClick={onClick}>\\\\n      {content}\\\\n    </div>\\\\n  );\\\\n};\\\\nconst Ordinary = () => {\\\\n  const [state, setState] = useState(storeModel);\\\\n  const click = useCallback((rowIndex, colIndex) => {\\\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\\\n    setState((state) => [\\\\n      ...state.slice(0, rowIndex),\\\\n      [\\\\n        ...state[rowIndex].slice(0, colIndex),\\\\n        randomContent(),\\\\n        ...state[rowIndex].slice(colIndex + 1),\\\\n      ],\\\\n      ...state.slice(rowIndex + 1),\\\\n    ]);\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      {state.map((row, rowIndex) => {\\\\n        return (\\\\n          <div style={rowStyle as any}>\\\\n            {row.map((col, colIndex) => {\\\\n              return (\\\\n                <CellForCommon\\\\n                  content={state[rowIndex][colIndex]}\\\\n                  onClick={() => {\\\\n                    click(rowIndex, colIndex);\\\\n                  }}\\\\n                />\\\\n              );\\\\n            })}\\\\n          </div>\\\\n        );\\\\n      })}\\\\n      {/* <ReactJson src={state} /> */}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-点对点更新-棋盘--井字游戏\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":114},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":66},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":114}}}},\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = addSourceDecorator(() => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":88},\"endLoc\":{\"col\":139,\"line\":136},\"startBody\":{\"col\":20,\"line\":88},\"endBody\":{\"col\":139,\"line\":136}}}},\"storySource\":{\"source\":\"import React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = () => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":66},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":20,\"line\":66},\"endBody\":{\"col\":1,\"line\":114}}}},\n    info: { inline: true },\n  },\n};\nconst size = 20;\nconst cellStyle = {\n  textAlign: 'center',\n  width: '20px',\n  height: '20px',\n  minWidth: '20px',\n  minHeight: '20px',\n  lineHeight: '20px',\n  border: '1px solid black',\n};\nconst rowStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nconst Cell = (context: DataContext<any, any[], any>) => {\n  const { value, next } = context;\n  console.log('Cell render');\n  return (\n    <div\n      style={cellStyle as any}\n      onClick={() => {\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n        next(randomContent());\n      }}\n    >\n      {value}\n    </div>\n  );\n};\n\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\nconst ShowDataView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  const depsIds = getDepsIds();\n  let data = [];\n  depsIds.forEach((item, index) => {\n    const [rowIndex, cellIndex] = item.id.split('-');\n    if (data[rowIndex]) {\n      data[rowIndex][cellIndex] = depsValues[index];\n    } else {\n      data[rowIndex] = [depsValues[index]];\n    }\n  });\n  return <ReactJson src={data} />;\n};\nconst getDepsIds = () => {\n  const datas = [];\n  storeModel.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\n    });\n  });\n  return datas;\n};\nexport const 井字游戏 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <div className='todoapp'>\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\n      <div>\n        <strong>对比效果图</strong>\n        <br />\n        <img\n          width={'600px'}\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RdxContext>\n            <h2>1.Rdx实现的棋盘</h2>\n            {storeModel.map((row, rowI) => {\n              return (\n                <div key={rowI} style={rowStyle as any}>\n                  {row.map((cell, cellI) => {\n                    return (\n                      <RdxView\n                        recordStatus={false}\n                        id={`${rowI}-${cellI}`}\n                        render={Cell}\n                      ></RdxView>\n                    );\n                  })}\n                </div>\n              );\n            })}\n            {/* <RdxView\n          id={'show data'}\n          recordStatus={false}\n          deps={getDepsIds()}\n          render={ShowDataView}\n        /> */}\n            {/* <DevVisualGraphTool />\n        <DevVisualGraphTool /> */}\n          </RdxContext>\n        </div>\n        <div style={{ marginLeft: 20 }}>\n          <h2>2.普通的棋盘</h2>\n          <Ordinary />\n        </div>\n      </div>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nconst CellForCommon = ({ content, onClick }) => {\n  return (\n    <div style={cellStyle as any} onClick={onClick}>\n      {content}\n    </div>\n  );\n};\nconst Ordinary = () => {\n  const [state, setState] = useState(storeModel);\n  const click = useCallback((rowIndex, colIndex) => {\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n    setState((state) => [\n      ...state.slice(0, rowIndex),\n      [\n        ...state[rowIndex].slice(0, colIndex),\n        randomContent(),\n        ...state[rowIndex].slice(colIndex + 1),\n      ],\n      ...state.slice(rowIndex + 1),\n    ]);\n  }, []);\n  return (\n    <div>\n      {state.map((row, rowIndex) => {\n        return (\n          <div style={rowStyle as any}>\n            {row.map((col, colIndex) => {\n              return (\n                <CellForCommon\n                  content={state[rowIndex][colIndex]}\n                  onClick={() => {\n                    click(rowIndex, colIndex);\n                  }}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n      {/* <ReactJson src={state} /> */}\n    </div>\n  );\n};\n",locationsMap:{"场景示例-点对点更新-棋盘--井字游戏":{startLoc:{col:20,line:110},endLoc:{col:277,line:158},startBody:{col:20,line:110},endBody:{col:277,line:158}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = () => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":66},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":20,\"line\":66},\"endBody\":{\"col\":1,\"line\":114}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/TicTacToe.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from 'react';\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\nimport { useState } from 'react';\nimport ReactJson from 'react-json-view';\nexport default {\n  title: '场景示例|点对点更新|棋盘',\n  parameters: {\"storySource\":{\"source\":\"import React, { useCallback } from 'react';\\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\\nimport { useState } from 'react';\\nimport ReactJson from 'react-json-view';\\nexport default {\\n  title: '场景示例|点对点更新|棋盘',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nconst size = 20;\\nconst cellStyle = {\\n  textAlign: 'center',\\n  width: '20px',\\n  height: '20px',\\n  minWidth: '20px',\\n  minHeight: '20px',\\n  lineHeight: '20px',\\n  border: '1px solid black',\\n};\\nconst rowStyle = {\\n  display: 'flex',\\n  flexDirection: 'row',\\n};\\n\\nconst Cell = (context: DataContext<any, any[], any>) => {\\n  const { value, next } = context;\\n  console.log('Cell render');\\n  return (\\n    <div\\n      style={cellStyle as any}\\n      onClick={() => {\\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n        next(randomContent());\\n      }}\\n    >\\n      {value}\\n    </div>\\n  );\\n};\\n\\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\\nconst ShowDataView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  const depsIds = getDepsIds();\\n  let data = [];\\n  depsIds.forEach((item, index) => {\\n    const [rowIndex, cellIndex] = item.id.split('-');\\n    if (data[rowIndex]) {\\n      data[rowIndex][cellIndex] = depsValues[index];\\n    } else {\\n      data[rowIndex] = [depsValues[index]];\\n    }\\n  });\\n  return <ReactJson src={data} />;\\n};\\nconst getDepsIds = () => {\\n  const datas = [];\\n  storeModel.forEach((row, rowIndex) => {\\n    row.forEach((cell, cellIndex) => {\\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\\n    });\\n  });\\n  return datas;\\n};\\nexport const 井字游戏 = () => {\\n  return (\\n    <div className='todoapp'>\\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\\n      <div>\\n        <strong>对比效果图</strong>\\n        <br />\\n        <img\\n          width={'600px'}\\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RdxContext>\\n            <h2>1.Rdx实现的棋盘</h2>\\n            {storeModel.map((row, rowI) => {\\n              return (\\n                <div key={rowI} style={rowStyle as any}>\\n                  {row.map((cell, cellI) => {\\n                    return (\\n                      <RdxView\\n                        recordStatus={false}\\n                        id={`${rowI}-${cellI}`}\\n                        render={Cell}\\n                      ></RdxView>\\n                    );\\n                  })}\\n                </div>\\n              );\\n            })}\\n            {/* <RdxView\\n          id={'show data'}\\n          recordStatus={false}\\n          deps={getDepsIds()}\\n          render={ShowDataView}\\n        /> */}\\n            {/* <DevVisualGraphTool />\\n        <DevVisualGraphTool /> */}\\n          </RdxContext>\\n        </div>\\n        <div style={{ marginLeft: 20 }}>\\n          <h2>2.普通的棋盘</h2>\\n          <Ordinary />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n};\\n\\nconst CellForCommon = ({ content, onClick }) => {\\n  return (\\n    <div style={cellStyle as any} onClick={onClick}>\\n      {content}\\n    </div>\\n  );\\n};\\nconst Ordinary = () => {\\n  const [state, setState] = useState(storeModel);\\n  const click = useCallback((rowIndex, colIndex) => {\\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\\n    setState((state) => [\\n      ...state.slice(0, rowIndex),\\n      [\\n        ...state[rowIndex].slice(0, colIndex),\\n        randomContent(),\\n        ...state[rowIndex].slice(colIndex + 1),\\n      ],\\n      ...state.slice(rowIndex + 1),\\n    ]);\\n  }, []);\\n  return (\\n    <div>\\n      {state.map((row, rowIndex) => {\\n        return (\\n          <div style={rowStyle as any}>\\n            {row.map((col, colIndex) => {\\n              return (\\n                <CellForCommon\\n                  content={state[rowIndex][colIndex]}\\n                  onClick={() => {\\n                    click(rowIndex, colIndex);\\n                  }}\\n                />\\n              );\\n            })}\\n          </div>\\n        );\\n      })}\\n      {/* <ReactJson src={state} /> */}\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-点对点更新-棋盘--井字游戏\":{\"startLoc\":{\"col\":20,\"line\":66},\"endLoc\":{\"col\":1,\"line\":114},\"startBody\":{\"col\":20,\"line\":66},\"endBody\":{\"col\":1,\"line\":114}}}},\n    info: { inline: true },\n  },\n};\nconst size = 20;\nconst cellStyle = {\n  textAlign: 'center',\n  width: '20px',\n  height: '20px',\n  minWidth: '20px',\n  minHeight: '20px',\n  lineHeight: '20px',\n  border: '1px solid black',\n};\nconst rowStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nconst Cell = (context: DataContext<any, any[], any>) => {\n  const { value, next } = context;\n  console.log('Cell render');\n  return (\n    <div\n      style={cellStyle as any}\n      onClick={() => {\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n        next(randomContent());\n      }}\n    >\n      {value}\n    </div>\n  );\n};\n\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\nconst ShowDataView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  const depsIds = getDepsIds();\n  let data = [];\n  depsIds.forEach((item, index) => {\n    const [rowIndex, cellIndex] = item.id.split('-');\n    if (data[rowIndex]) {\n      data[rowIndex][cellIndex] = depsValues[index];\n    } else {\n      data[rowIndex] = [depsValues[index]];\n    }\n  });\n  return <ReactJson src={data} />;\n};\nconst getDepsIds = () => {\n  const datas = [];\n  storeModel.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\n    });\n  });\n  return datas;\n};\nexport const 井字游戏 = addSourceDecorator(() => {\n  return (\n    <div className='todoapp'>\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\n      <div>\n        <strong>对比效果图</strong>\n        <br />\n        <img\n          width={'600px'}\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RdxContext>\n            <h2>1.Rdx实现的棋盘</h2>\n            {storeModel.map((row, rowI) => {\n              return (\n                <div key={rowI} style={rowStyle as any}>\n                  {row.map((cell, cellI) => {\n                    return (\n                      <RdxView\n                        recordStatus={false}\n                        id={`${rowI}-${cellI}`}\n                        render={Cell}\n                      ></RdxView>\n                    );\n                  })}\n                </div>\n              );\n            })}\n            {/* <RdxView\n          id={'show data'}\n          recordStatus={false}\n          deps={getDepsIds()}\n          render={ShowDataView}\n        /> */}\n            {/* <DevVisualGraphTool />\n        <DevVisualGraphTool /> */}\n          </RdxContext>\n        </div>\n        <div style={{ marginLeft: 20 }}>\n          <h2>2.普通的棋盘</h2>\n          <Ordinary />\n        </div>\n      </div>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nconst CellForCommon = ({ content, onClick }) => {\n  return (\n    <div style={cellStyle as any} onClick={onClick}>\n      {content}\n    </div>\n  );\n};\nconst Ordinary = () => {\n  const [state, setState] = useState(storeModel);\n  const click = useCallback((rowIndex, colIndex) => {\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n    setState((state) => [\n      ...state.slice(0, rowIndex),\n      [\n        ...state[rowIndex].slice(0, colIndex),\n        randomContent(),\n        ...state[rowIndex].slice(colIndex + 1),\n      ],\n      ...state.slice(rowIndex + 1),\n    ]);\n  }, []);\n  return (\n    <div>\n      {state.map((row, rowIndex) => {\n        return (\n          <div style={rowStyle as any}>\n            {row.map((col, colIndex) => {\n              return (\n                <CellForCommon\n                  content={state[rowIndex][colIndex]}\n                  onClick={() => {\n                    click(rowIndex, colIndex);\n                  }}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n      {/* <ReactJson src={state} /> */}\n    </div>\n  );\n};\n",locationsMap:{"场景示例-点对点更新-棋盘--井字游戏":{startLoc:{col:20,line:88},endLoc:{col:139,line:136},startBody:{col:20,line:88},endBody:{col:139,line:136}}}},storySource:{source:"import React, { useCallback } from 'react';\nimport { RdxContext, Status, RdxView, DataContext } from '@czwcode/rdx';\nimport { useState } from 'react';\nimport ReactJson from 'react-json-view';\nexport default {\n  title: '场景示例|点对点更新|棋盘',\n  parameters: {\n    info: { inline: true },\n  },\n};\nconst size = 20;\nconst cellStyle = {\n  textAlign: 'center',\n  width: '20px',\n  height: '20px',\n  minWidth: '20px',\n  minHeight: '20px',\n  lineHeight: '20px',\n  border: '1px solid black',\n};\nconst rowStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nconst Cell = (context: DataContext<any, any[], any>) => {\n  const { value, next } = context;\n  console.log('Cell render');\n  return (\n    <div\n      style={cellStyle as any}\n      onClick={() => {\n        const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n        next(randomContent());\n      }}\n    >\n      {value}\n    </div>\n  );\n};\n\nconst storeModel = new Array(size).fill(new Array(size).fill(undefined));\nconst ShowDataView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  const depsIds = getDepsIds();\n  let data = [];\n  depsIds.forEach((item, index) => {\n    const [rowIndex, cellIndex] = item.id.split('-');\n    if (data[rowIndex]) {\n      data[rowIndex][cellIndex] = depsValues[index];\n    } else {\n      data[rowIndex] = [depsValues[index]];\n    }\n  });\n  return <ReactJson src={data} />;\n};\nconst getDepsIds = () => {\n  const datas = [];\n  storeModel.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      datas.push({ id: `${rowIndex}-${cellIndex}` });\n    });\n  });\n  return datas;\n};\nexport const 井字游戏 = () => {\n  return (\n    <div className='todoapp'>\n      <h2>分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验</h2>\n      <div>\n        <strong>对比效果图</strong>\n        <br />\n        <img\n          width={'600px'}\n          src='https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RdxContext>\n            <h2>1.Rdx实现的棋盘</h2>\n            {storeModel.map((row, rowI) => {\n              return (\n                <div key={rowI} style={rowStyle as any}>\n                  {row.map((cell, cellI) => {\n                    return (\n                      <RdxView\n                        recordStatus={false}\n                        id={`${rowI}-${cellI}`}\n                        render={Cell}\n                      ></RdxView>\n                    );\n                  })}\n                </div>\n              );\n            })}\n            {/* <RdxView\n          id={'show data'}\n          recordStatus={false}\n          deps={getDepsIds()}\n          render={ShowDataView}\n        /> */}\n            {/* <DevVisualGraphTool />\n        <DevVisualGraphTool /> */}\n          </RdxContext>\n        </div>\n        <div style={{ marginLeft: 20 }}>\n          <h2>2.普通的棋盘</h2>\n          <Ordinary />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CellForCommon = ({ content, onClick }) => {\n  return (\n    <div style={cellStyle as any} onClick={onClick}>\n      {content}\n    </div>\n  );\n};\nconst Ordinary = () => {\n  const [state, setState] = useState(storeModel);\n  const click = useCallback((rowIndex, colIndex) => {\n    const randomContent = () => (Math.random() > 0.5 ? 'x' : '0');\n    setState((state) => [\n      ...state.slice(0, rowIndex),\n      [\n        ...state[rowIndex].slice(0, colIndex),\n        randomContent(),\n        ...state[rowIndex].slice(colIndex + 1),\n      ],\n      ...state.slice(rowIndex + 1),\n    ]);\n  }, []);\n  return (\n    <div>\n      {state.map((row, rowIndex) => {\n        return (\n          <div style={rowStyle as any}>\n            {row.map((col, colIndex) => {\n              return (\n                <CellForCommon\n                  content={state[rowIndex][colIndex]}\n                  onClick={() => {\n                    click(rowIndex, colIndex);\n                  }}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n      {/* <ReactJson src={state} /> */}\n    </div>\n  );\n};\n",locationsMap:{"场景示例-点对点更新-棋盘--井字游戏":{startLoc:{col:20,line:66},endLoc:{col:1,line:114},startBody:{col:20,line:66},endBody:{col:1,line:114}}}},info:{inline:!0}}};const cellStyle={textAlign:"center",width:"20px",height:"20px",minWidth:"20px",minHeight:"20px",lineHeight:"20px",border:"1px solid black"},rowStyle={display:"flex",flexDirection:"row"},Cell=context=>{const{value:value,next:next}=context;return console.log("Cell render"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:cellStyle,onClick:()=>{next(Math.random()>.5?"x":"0")}},value)},storeModel=new Array(20).fill(new Array(20).fill(void 0)),井字游戏=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"todoapp"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2",null,"分布式数据管理，避免了组件的交叉渲染，大大调高了交互的体验"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"对比效果图"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("img",{width:"600px",src:"https://img.alicdn.com/tfs/TB1gM4ePUY1gK0jSZFCXXcwqXXa-839-491.gif"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{display:"flex"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2",null,"1.Rdx实现的棋盘"),storeModel.map((row,rowI)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{key:rowI,style:rowStyle},row.map((cell,cellI)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{recordStatus:!1,id:`${rowI}-${cellI}`,render:Cell})))))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{marginLeft:20}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2",null,"2.普通的棋盘"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Ordinary,null)))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/TicTacToe.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/TicTacToe.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/TicTacToe.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),CellForCommon=({content:content,onClick:onClick})=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:cellStyle,onClick:onClick},content),Ordinary=()=>{const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(storeModel),click=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((rowIndex,colIndex)=>{setState(state=>[...state.slice(0,rowIndex),[...state[rowIndex].slice(0,colIndex),Math.random()>.5?"x":"0",...state[rowIndex].slice(colIndex+1)],...state.slice(rowIndex+1)])},[]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,state.map((row,rowIndex)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:rowStyle},row.map((col,colIndex)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(CellForCommon,{content:state[rowIndex][colIndex],onClick:()=>{click(rowIndex,colIndex)}})))))}},1757:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ToDo",(function(){return ToDo}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(38),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(33),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(104),uuid_v1__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(920),uuid_v1__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(uuid_v1__WEBPACK_IMPORTED_MODULE_4__),immer__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(350),addSourceDecorator=(__webpack_require__(1760),__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React from 'react';\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\nimport uuid from 'uuid/v1';\nimport { produce } from 'immer';\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\nimport 'todomvc-app-css/index.css';\nexport default {\n  title: '场景示例| Todo',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\n  <li\n    onClick={onItemClick}\n    className='view'\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    <input checked={completed} className='toggle' type='checkbox'></input>\n    <label>{text}</label>\n    <button\n      className='destroy'\n      onClick={(e) => {\n        e.stopPropagation();\n        onDelete && onDelete();\n      }}\n    ></button>\n  </li>\n);\n\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\n  <ul className='todo-list'>\n    {todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        {...todo}\n        onDelete={() => onDelete(todo.id)}\n        onItemClick={() => toggleTodo(todo.id)}\n      />\n    ))}\n  </ul>\n);\nconst Link = ({ active, children, onClick }) => (\n  <li\n    onClick={onClick}\n    style={{\n      marginLeft: '4px',\n    }}\n  >\n    <a className={active ? 'selected' : ''}>{children}</a>\n  </li>\n);\ninterface IToDo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\nenum VisibilityFilters {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n\nenum View {\n  List = 'List',\n  Add = 'Add',\n  Filter = 'Filter',\n}\nenum ListAction {\n  Add = 'Add',\n  Remove = 'Remove',\n  ChangeStatus = 'ChangeStatus',\n  ChangeAllStatus = 'ChangeAllStatus',\n}\nconst Filter = () => {\n  return (\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\n      id={View.Filter}\n      defaultValue={VisibilityFilters.SHOW_ALL}\n      render={(context) => {\n        const { next: updateState, next, value, status } = context;\n        if (status === Status.FirstRender) {\n          return '';\n        }\n        const links = [\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\n        ];\n        return (\n          <footer\n            className='footer'\n            style={{ boxSizing: 'content-box', display: 'flex' }}\n          >\n            <ul className='filters'>\n              {links.map((item) => (\n                <Link\n                  active={value === item.value}\n                  onClick={() => {\n                    next(item.value);\n                  }}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </ul>\n          </footer>\n        );\n      }}\n    />\n  );\n};\nconst AddButton = () => {\n  return (\n    <RdxView<IToDo[], any, any, any>\n      id={View.Add}\n      defaultValue={[]}\n      render={(context) => {\n        const { next, dispatchById } = context;\n        return (\n          <input\n            onKeyDown={(e: any) => {\n              const text = e.target.value.trim();\n              if (e.which === 13) {\n                dispatchById(View.List, {\n                  type: ListAction.Add,\n                  payload: {\n                    id: uuid(),\n                    text: text,\n                    completed: false,\n                  },\n                });\n                e.target.value = '';\n                e.stopPropagation();\n                e.preventDefault();\n              }\n            }}\n            className='new-todo'\n            placeholder='What needs to be done?'\n          />\n        );\n      }}\n    />\n  );\n};\nconst List = () => {\n  const listRef = React.useRef<\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n  >({\n    id: View.List,\n    defaultValue: {\n      dataSource: [\n        { id: '1', text: '222', completed: false },\n        { id: '2', text: '222', completed: true },\n      ],\n    },\n    reducer: (state, action, context) => {\n      const newState = produce(state, (state) => {\n        switch (action.type) {\n          case ListAction.Add:\n            state.dataSource.push(action.payload);\n            break;\n          case ListAction.Remove:\n            state.dataSource.splice(\n              state.dataSource.findIndex(\n                (item) => item.id === action.payload.id\n              ),\n              1\n            );\n            break;\n          case ListAction.ChangeAllStatus:\n            const completedCount = state.dataSource.filter(\n              (item) => item.completed\n            ).length;\n            if (state.dataSource.length === completedCount) {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: false,\n              }));\n            } else {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: true,\n              }));\n            }\n            break;\n          case ListAction.ChangeStatus:\n            const status =\n              state.dataSource[\n                state.dataSource.findIndex(\n                  (item) => item.id === action.payload.id\n                )\n              ].completed;\n            const findIndex = state.dataSource.findIndex(\n              (item) => item.id === action.payload.id\n            );\n            state.dataSource[findIndex].completed = !status;\n            break;\n          default:\n            break;\n        }\n      });\n      return newState;\n    },\n    deps: [{ id: View.Filter }],\n    render: (context) => {\n      const { value = {} as any, depsValues, status, dispatch } = context;\n      if (status === Status.FirstRender) {\n        return '';\n      }\n      const { dataSource = [] } = value;\n      const [filterSource] = depsValues;\n      const completedCount = dataSource.filter((item) => item.completed).length;\n      const todosCount = dataSource.length;\n      return (\n        <div style={{ position: 'relative' }}>\n          {!!todosCount && (\n            <span>\n              <input\n                className='toggle-all'\n                type='checkbox'\n                checked={completedCount === todosCount}\n                readOnly\n              />\n              <label\n                onClick={() => {\n                  dispatch({\n                    type: ListAction.ChangeAllStatus,\n                  });\n                }}\n              />\n            </span>\n          )}\n          <TodoList\n            todos={dataSource.filter((item) => {\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\n                return true;\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\n                return !item.completed;\n              } else {\n                return item.completed;\n              }\n            })}\n            onDelete={(id) => {\n              dispatch({\n                type: ListAction.Remove,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n            toggleTodo={(id) => {\n              dispatch({\n                type: ListAction.ChangeStatus,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n          />\n        </div>\n      );\n    },\n  });\n  return (\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n      {...listRef.current}\n    />\n  );\n};\nexport const ToDo = () => {\n  return (\n    <div className='todoapp'>\n      <RdxContext>\n        <h1>todos</h1>\n        {/* <DevVisualTableTool /> */}\n        <AddButton />\n        <List />\n        <Filter />\n        {/* <DevVisualGraphTool /> */}\n      </RdxContext>\n    </div>\n  );\n};\n",__ADDS_MAP__={"场景示例-todo--to-do":{startLoc:{col:20,line:274},endLoc:{col:1,line:287},startBody:{col:20,line:274},endBody:{col:1,line:287}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例| Todo",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\\\nimport uuid from 'uuid/v1';\\\\nimport { produce } from 'immer';\\\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\\\nimport 'todomvc-app-css/index.css';\\\\nexport default {\\\\n  title: '场景示例| Todo',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\\\n  <li\\\\n    onClick={onItemClick}\\\\n    className='view'\\\\n    style={{\\\\n      textDecoration: completed ? 'line-through' : 'none',\\\\n    }}\\\\n  >\\\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\\\n    <label>{text}</label>\\\\n    <button\\\\n      className='destroy'\\\\n      onClick={(e) => {\\\\n        e.stopPropagation();\\\\n        onDelete && onDelete();\\\\n      }}\\\\n    ></button>\\\\n  </li>\\\\n);\\\\n\\\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\\\n  <ul className='todo-list'>\\\\n    {todos.map((todo) => (\\\\n      <Todo\\\\n        key={todo.id}\\\\n        {...todo}\\\\n        onDelete={() => onDelete(todo.id)}\\\\n        onItemClick={() => toggleTodo(todo.id)}\\\\n      />\\\\n    ))}\\\\n  </ul>\\\\n);\\\\nconst Link = ({ active, children, onClick }) => (\\\\n  <li\\\\n    onClick={onClick}\\\\n    style={{\\\\n      marginLeft: '4px',\\\\n    }}\\\\n  >\\\\n    <a className={active ? 'selected' : ''}>{children}</a>\\\\n  </li>\\\\n);\\\\ninterface IToDo {\\\\n  id: string;\\\\n  text: string;\\\\n  completed: boolean;\\\\n}\\\\nenum VisibilityFilters {\\\\n  SHOW_ALL = 'SHOW_ALL',\\\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\\\n}\\\\n\\\\nenum View {\\\\n  List = 'List',\\\\n  Add = 'Add',\\\\n  Filter = 'Filter',\\\\n}\\\\nenum ListAction {\\\\n  Add = 'Add',\\\\n  Remove = 'Remove',\\\\n  ChangeStatus = 'ChangeStatus',\\\\n  ChangeAllStatus = 'ChangeAllStatus',\\\\n}\\\\nconst Filter = () => {\\\\n  return (\\\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\\\n      id={View.Filter}\\\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\\\n      render={(context) => {\\\\n        const { next: updateState, next, value, status } = context;\\\\n        if (status === Status.FirstRender) {\\\\n          return '';\\\\n        }\\\\n        const links = [\\\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\\\n        ];\\\\n        return (\\\\n          <footer\\\\n            className='footer'\\\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\\\n          >\\\\n            <ul className='filters'>\\\\n              {links.map((item) => (\\\\n                <Link\\\\n                  active={value === item.value}\\\\n                  onClick={() => {\\\\n                    next(item.value);\\\\n                  }}\\\\n                >\\\\n                  {item.label}\\\\n                </Link>\\\\n              ))}\\\\n            </ul>\\\\n          </footer>\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst AddButton = () => {\\\\n  return (\\\\n    <RdxView<IToDo[], any, any, any>\\\\n      id={View.Add}\\\\n      defaultValue={[]}\\\\n      render={(context) => {\\\\n        const { next, dispatchById } = context;\\\\n        return (\\\\n          <input\\\\n            onKeyDown={(e: any) => {\\\\n              const text = e.target.value.trim();\\\\n              if (e.which === 13) {\\\\n                dispatchById(View.List, {\\\\n                  type: ListAction.Add,\\\\n                  payload: {\\\\n                    id: uuid(),\\\\n                    text: text,\\\\n                    completed: false,\\\\n                  },\\\\n                });\\\\n                e.target.value = '';\\\\n                e.stopPropagation();\\\\n                e.preventDefault();\\\\n              }\\\\n            }}\\\\n            className='new-todo'\\\\n            placeholder='What needs to be done?'\\\\n          />\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst List = () => {\\\\n  const listRef = React.useRef<\\\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n  >({\\\\n    id: View.List,\\\\n    defaultValue: {\\\\n      dataSource: [\\\\n        { id: '1', text: '222', completed: false },\\\\n        { id: '2', text: '222', completed: true },\\\\n      ],\\\\n    },\\\\n    reducer: (state, action, context) => {\\\\n      const newState = produce(state, (state) => {\\\\n        switch (action.type) {\\\\n          case ListAction.Add:\\\\n            state.dataSource.push(action.payload);\\\\n            break;\\\\n          case ListAction.Remove:\\\\n            state.dataSource.splice(\\\\n              state.dataSource.findIndex(\\\\n                (item) => item.id === action.payload.id\\\\n              ),\\\\n              1\\\\n            );\\\\n            break;\\\\n          case ListAction.ChangeAllStatus:\\\\n            const completedCount = state.dataSource.filter(\\\\n              (item) => item.completed\\\\n            ).length;\\\\n            if (state.dataSource.length === completedCount) {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: false,\\\\n              }));\\\\n            } else {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: true,\\\\n              }));\\\\n            }\\\\n            break;\\\\n          case ListAction.ChangeStatus:\\\\n            const status =\\\\n              state.dataSource[\\\\n                state.dataSource.findIndex(\\\\n                  (item) => item.id === action.payload.id\\\\n                )\\\\n              ].completed;\\\\n            const findIndex = state.dataSource.findIndex(\\\\n              (item) => item.id === action.payload.id\\\\n            );\\\\n            state.dataSource[findIndex].completed = !status;\\\\n            break;\\\\n          default:\\\\n            break;\\\\n        }\\\\n      });\\\\n      return newState;\\\\n    },\\\\n    deps: [{ id: View.Filter }],\\\\n    render: (context) => {\\\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '';\\\\n      }\\\\n      const { dataSource = [] } = value;\\\\n      const [filterSource] = depsValues;\\\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\\\n      const todosCount = dataSource.length;\\\\n      return (\\\\n        <div style={{ position: 'relative' }}>\\\\n          {!!todosCount && (\\\\n            <span>\\\\n              <input\\\\n                className='toggle-all'\\\\n                type='checkbox'\\\\n                checked={completedCount === todosCount}\\\\n                readOnly\\\\n              />\\\\n              <label\\\\n                onClick={() => {\\\\n                  dispatch({\\\\n                    type: ListAction.ChangeAllStatus,\\\\n                  });\\\\n                }}\\\\n              />\\\\n            </span>\\\\n          )}\\\\n          <TodoList\\\\n            todos={dataSource.filter((item) => {\\\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\\\n                return true;\\\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\\\n                return !item.completed;\\\\n              } else {\\\\n                return item.completed;\\\\n              }\\\\n            })}\\\\n            onDelete={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.Remove,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n            toggleTodo={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.ChangeStatus,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n          />\\\\n        </div>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n      {...listRef.current}\\\\n    />\\\\n  );\\\\n};\\\\nexport const ToDo = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <RdxContext>\\\\n        <h1>todos</h1>\\\\n        {/* <DevVisualTableTool /> */}\\\\n        <AddButton />\\\\n        <List />\\\\n        <Filter />\\\\n        {/* <DevVisualGraphTool /> */}\\\\n      </RdxContext>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-todo--to-do\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":287},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":287}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Todo.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\\\nimport uuid from 'uuid/v1';\\\\nimport { produce } from 'immer';\\\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\\\nimport 'todomvc-app-css/index.css';\\\\nexport default {\\\\n  title: '场景示例| Todo',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\\\n  <li\\\\n    onClick={onItemClick}\\\\n    className='view'\\\\n    style={{\\\\n      textDecoration: completed ? 'line-through' : 'none',\\\\n    }}\\\\n  >\\\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\\\n    <label>{text}</label>\\\\n    <button\\\\n      className='destroy'\\\\n      onClick={(e) => {\\\\n        e.stopPropagation();\\\\n        onDelete && onDelete();\\\\n      }}\\\\n    ></button>\\\\n  </li>\\\\n);\\\\n\\\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\\\n  <ul className='todo-list'>\\\\n    {todos.map((todo) => (\\\\n      <Todo\\\\n        key={todo.id}\\\\n        {...todo}\\\\n        onDelete={() => onDelete(todo.id)}\\\\n        onItemClick={() => toggleTodo(todo.id)}\\\\n      />\\\\n    ))}\\\\n  </ul>\\\\n);\\\\nconst Link = ({ active, children, onClick }) => (\\\\n  <li\\\\n    onClick={onClick}\\\\n    style={{\\\\n      marginLeft: '4px',\\\\n    }}\\\\n  >\\\\n    <a className={active ? 'selected' : ''}>{children}</a>\\\\n  </li>\\\\n);\\\\ninterface IToDo {\\\\n  id: string;\\\\n  text: string;\\\\n  completed: boolean;\\\\n}\\\\nenum VisibilityFilters {\\\\n  SHOW_ALL = 'SHOW_ALL',\\\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\\\n}\\\\n\\\\nenum View {\\\\n  List = 'List',\\\\n  Add = 'Add',\\\\n  Filter = 'Filter',\\\\n}\\\\nenum ListAction {\\\\n  Add = 'Add',\\\\n  Remove = 'Remove',\\\\n  ChangeStatus = 'ChangeStatus',\\\\n  ChangeAllStatus = 'ChangeAllStatus',\\\\n}\\\\nconst Filter = () => {\\\\n  return (\\\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\\\n      id={View.Filter}\\\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\\\n      render={(context) => {\\\\n        const { next: updateState, next, value, status } = context;\\\\n        if (status === Status.FirstRender) {\\\\n          return '';\\\\n        }\\\\n        const links = [\\\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\\\n        ];\\\\n        return (\\\\n          <footer\\\\n            className='footer'\\\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\\\n          >\\\\n            <ul className='filters'>\\\\n              {links.map((item) => (\\\\n                <Link\\\\n                  active={value === item.value}\\\\n                  onClick={() => {\\\\n                    next(item.value);\\\\n                  }}\\\\n                >\\\\n                  {item.label}\\\\n                </Link>\\\\n              ))}\\\\n            </ul>\\\\n          </footer>\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst AddButton = () => {\\\\n  return (\\\\n    <RdxView<IToDo[], any, any, any>\\\\n      id={View.Add}\\\\n      defaultValue={[]}\\\\n      render={(context) => {\\\\n        const { next, dispatchById } = context;\\\\n        return (\\\\n          <input\\\\n            onKeyDown={(e: any) => {\\\\n              const text = e.target.value.trim();\\\\n              if (e.which === 13) {\\\\n                dispatchById(View.List, {\\\\n                  type: ListAction.Add,\\\\n                  payload: {\\\\n                    id: uuid(),\\\\n                    text: text,\\\\n                    completed: false,\\\\n                  },\\\\n                });\\\\n                e.target.value = '';\\\\n                e.stopPropagation();\\\\n                e.preventDefault();\\\\n              }\\\\n            }}\\\\n            className='new-todo'\\\\n            placeholder='What needs to be done?'\\\\n          />\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst List = () => {\\\\n  const listRef = React.useRef<\\\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n  >({\\\\n    id: View.List,\\\\n    defaultValue: {\\\\n      dataSource: [\\\\n        { id: '1', text: '222', completed: false },\\\\n        { id: '2', text: '222', completed: true },\\\\n      ],\\\\n    },\\\\n    reducer: (state, action, context) => {\\\\n      const newState = produce(state, (state) => {\\\\n        switch (action.type) {\\\\n          case ListAction.Add:\\\\n            state.dataSource.push(action.payload);\\\\n            break;\\\\n          case ListAction.Remove:\\\\n            state.dataSource.splice(\\\\n              state.dataSource.findIndex(\\\\n                (item) => item.id === action.payload.id\\\\n              ),\\\\n              1\\\\n            );\\\\n            break;\\\\n          case ListAction.ChangeAllStatus:\\\\n            const completedCount = state.dataSource.filter(\\\\n              (item) => item.completed\\\\n            ).length;\\\\n            if (state.dataSource.length === completedCount) {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: false,\\\\n              }));\\\\n            } else {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: true,\\\\n              }));\\\\n            }\\\\n            break;\\\\n          case ListAction.ChangeStatus:\\\\n            const status =\\\\n              state.dataSource[\\\\n                state.dataSource.findIndex(\\\\n                  (item) => item.id === action.payload.id\\\\n                )\\\\n              ].completed;\\\\n            const findIndex = state.dataSource.findIndex(\\\\n              (item) => item.id === action.payload.id\\\\n            );\\\\n            state.dataSource[findIndex].completed = !status;\\\\n            break;\\\\n          default:\\\\n            break;\\\\n        }\\\\n      });\\\\n      return newState;\\\\n    },\\\\n    deps: [{ id: View.Filter }],\\\\n    render: (context) => {\\\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '';\\\\n      }\\\\n      const { dataSource = [] } = value;\\\\n      const [filterSource] = depsValues;\\\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\\\n      const todosCount = dataSource.length;\\\\n      return (\\\\n        <div style={{ position: 'relative' }}>\\\\n          {!!todosCount && (\\\\n            <span>\\\\n              <input\\\\n                className='toggle-all'\\\\n                type='checkbox'\\\\n                checked={completedCount === todosCount}\\\\n                readOnly\\\\n              />\\\\n              <label\\\\n                onClick={() => {\\\\n                  dispatch({\\\\n                    type: ListAction.ChangeAllStatus,\\\\n                  });\\\\n                }}\\\\n              />\\\\n            </span>\\\\n          )}\\\\n          <TodoList\\\\n            todos={dataSource.filter((item) => {\\\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\\\n                return true;\\\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\\\n                return !item.completed;\\\\n              } else {\\\\n                return item.completed;\\\\n              }\\\\n            })}\\\\n            onDelete={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.Remove,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n            toggleTodo={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.ChangeStatus,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n          />\\\\n        </div>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n      {...listRef.current}\\\\n    />\\\\n  );\\\\n};\\\\nexport const ToDo = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <RdxContext>\\\\n        <h1>todos</h1>\\\\n        {/* <DevVisualTableTool /> */}\\\\n        <AddButton />\\\\n        <List />\\\\n        <Filter />\\\\n        {/* <DevVisualGraphTool /> */}\\\\n      </RdxContext>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-todo--to-do\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":287},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":287}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = addSourceDecorator(() => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":296},\"endLoc\":{\"col\":139,\"line\":309},\"startBody\":{\"col\":20,\"line\":296},\"endBody\":{\"col\":139,\"line\":309}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Todo.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = () => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":274},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":20,\"line\":274},\"endBody\":{\"col\":1,\"line\":287}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Todo.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\nimport uuid from 'uuid/v1';\nimport { produce } from 'immer';\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\nimport 'todomvc-app-css/index.css';\nexport default {\n  title: '场景示例| Todo',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\\\nimport uuid from 'uuid/v1';\\\\nimport { produce } from 'immer';\\\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\\\nimport 'todomvc-app-css/index.css';\\\\nexport default {\\\\n  title: '场景示例| Todo',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\\\n  <li\\\\n    onClick={onItemClick}\\\\n    className='view'\\\\n    style={{\\\\n      textDecoration: completed ? 'line-through' : 'none',\\\\n    }}\\\\n  >\\\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\\\n    <label>{text}</label>\\\\n    <button\\\\n      className='destroy'\\\\n      onClick={(e) => {\\\\n        e.stopPropagation();\\\\n        onDelete && onDelete();\\\\n      }}\\\\n    ></button>\\\\n  </li>\\\\n);\\\\n\\\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\\\n  <ul className='todo-list'>\\\\n    {todos.map((todo) => (\\\\n      <Todo\\\\n        key={todo.id}\\\\n        {...todo}\\\\n        onDelete={() => onDelete(todo.id)}\\\\n        onItemClick={() => toggleTodo(todo.id)}\\\\n      />\\\\n    ))}\\\\n  </ul>\\\\n);\\\\nconst Link = ({ active, children, onClick }) => (\\\\n  <li\\\\n    onClick={onClick}\\\\n    style={{\\\\n      marginLeft: '4px',\\\\n    }}\\\\n  >\\\\n    <a className={active ? 'selected' : ''}>{children}</a>\\\\n  </li>\\\\n);\\\\ninterface IToDo {\\\\n  id: string;\\\\n  text: string;\\\\n  completed: boolean;\\\\n}\\\\nenum VisibilityFilters {\\\\n  SHOW_ALL = 'SHOW_ALL',\\\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\\\n}\\\\n\\\\nenum View {\\\\n  List = 'List',\\\\n  Add = 'Add',\\\\n  Filter = 'Filter',\\\\n}\\\\nenum ListAction {\\\\n  Add = 'Add',\\\\n  Remove = 'Remove',\\\\n  ChangeStatus = 'ChangeStatus',\\\\n  ChangeAllStatus = 'ChangeAllStatus',\\\\n}\\\\nconst Filter = () => {\\\\n  return (\\\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\\\n      id={View.Filter}\\\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\\\n      render={(context) => {\\\\n        const { next: updateState, next, value, status } = context;\\\\n        if (status === Status.FirstRender) {\\\\n          return '';\\\\n        }\\\\n        const links = [\\\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\\\n        ];\\\\n        return (\\\\n          <footer\\\\n            className='footer'\\\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\\\n          >\\\\n            <ul className='filters'>\\\\n              {links.map((item) => (\\\\n                <Link\\\\n                  active={value === item.value}\\\\n                  onClick={() => {\\\\n                    next(item.value);\\\\n                  }}\\\\n                >\\\\n                  {item.label}\\\\n                </Link>\\\\n              ))}\\\\n            </ul>\\\\n          </footer>\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst AddButton = () => {\\\\n  return (\\\\n    <RdxView<IToDo[], any, any, any>\\\\n      id={View.Add}\\\\n      defaultValue={[]}\\\\n      render={(context) => {\\\\n        const { next, dispatchById } = context;\\\\n        return (\\\\n          <input\\\\n            onKeyDown={(e: any) => {\\\\n              const text = e.target.value.trim();\\\\n              if (e.which === 13) {\\\\n                dispatchById(View.List, {\\\\n                  type: ListAction.Add,\\\\n                  payload: {\\\\n                    id: uuid(),\\\\n                    text: text,\\\\n                    completed: false,\\\\n                  },\\\\n                });\\\\n                e.target.value = '';\\\\n                e.stopPropagation();\\\\n                e.preventDefault();\\\\n              }\\\\n            }}\\\\n            className='new-todo'\\\\n            placeholder='What needs to be done?'\\\\n          />\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst List = () => {\\\\n  const listRef = React.useRef<\\\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n  >({\\\\n    id: View.List,\\\\n    defaultValue: {\\\\n      dataSource: [\\\\n        { id: '1', text: '222', completed: false },\\\\n        { id: '2', text: '222', completed: true },\\\\n      ],\\\\n    },\\\\n    reducer: (state, action, context) => {\\\\n      const newState = produce(state, (state) => {\\\\n        switch (action.type) {\\\\n          case ListAction.Add:\\\\n            state.dataSource.push(action.payload);\\\\n            break;\\\\n          case ListAction.Remove:\\\\n            state.dataSource.splice(\\\\n              state.dataSource.findIndex(\\\\n                (item) => item.id === action.payload.id\\\\n              ),\\\\n              1\\\\n            );\\\\n            break;\\\\n          case ListAction.ChangeAllStatus:\\\\n            const completedCount = state.dataSource.filter(\\\\n              (item) => item.completed\\\\n            ).length;\\\\n            if (state.dataSource.length === completedCount) {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: false,\\\\n              }));\\\\n            } else {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: true,\\\\n              }));\\\\n            }\\\\n            break;\\\\n          case ListAction.ChangeStatus:\\\\n            const status =\\\\n              state.dataSource[\\\\n                state.dataSource.findIndex(\\\\n                  (item) => item.id === action.payload.id\\\\n                )\\\\n              ].completed;\\\\n            const findIndex = state.dataSource.findIndex(\\\\n              (item) => item.id === action.payload.id\\\\n            );\\\\n            state.dataSource[findIndex].completed = !status;\\\\n            break;\\\\n          default:\\\\n            break;\\\\n        }\\\\n      });\\\\n      return newState;\\\\n    },\\\\n    deps: [{ id: View.Filter }],\\\\n    render: (context) => {\\\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '';\\\\n      }\\\\n      const { dataSource = [] } = value;\\\\n      const [filterSource] = depsValues;\\\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\\\n      const todosCount = dataSource.length;\\\\n      return (\\\\n        <div style={{ position: 'relative' }}>\\\\n          {!!todosCount && (\\\\n            <span>\\\\n              <input\\\\n                className='toggle-all'\\\\n                type='checkbox'\\\\n                checked={completedCount === todosCount}\\\\n                readOnly\\\\n              />\\\\n              <label\\\\n                onClick={() => {\\\\n                  dispatch({\\\\n                    type: ListAction.ChangeAllStatus,\\\\n                  });\\\\n                }}\\\\n              />\\\\n            </span>\\\\n          )}\\\\n          <TodoList\\\\n            todos={dataSource.filter((item) => {\\\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\\\n                return true;\\\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\\\n                return !item.completed;\\\\n              } else {\\\\n                return item.completed;\\\\n              }\\\\n            })}\\\\n            onDelete={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.Remove,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n            toggleTodo={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.ChangeStatus,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n          />\\\\n        </div>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n      {...listRef.current}\\\\n    />\\\\n  );\\\\n};\\\\nexport const ToDo = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <RdxContext>\\\\n        <h1>todos</h1>\\\\n        {/* <DevVisualTableTool /> */}\\\\n        <AddButton />\\\\n        <List />\\\\n        <Filter />\\\\n        {/* <DevVisualGraphTool /> */}\\\\n      </RdxContext>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-todo--to-do\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":287},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":287}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/Todo.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\\\nimport uuid from 'uuid/v1';\\\\nimport { produce } from 'immer';\\\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\\\nimport 'todomvc-app-css/index.css';\\\\nexport default {\\\\n  title: '场景示例| Todo',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\\\n  <li\\\\n    onClick={onItemClick}\\\\n    className='view'\\\\n    style={{\\\\n      textDecoration: completed ? 'line-through' : 'none',\\\\n    }}\\\\n  >\\\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\\\n    <label>{text}</label>\\\\n    <button\\\\n      className='destroy'\\\\n      onClick={(e) => {\\\\n        e.stopPropagation();\\\\n        onDelete && onDelete();\\\\n      }}\\\\n    ></button>\\\\n  </li>\\\\n);\\\\n\\\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\\\n  <ul className='todo-list'>\\\\n    {todos.map((todo) => (\\\\n      <Todo\\\\n        key={todo.id}\\\\n        {...todo}\\\\n        onDelete={() => onDelete(todo.id)}\\\\n        onItemClick={() => toggleTodo(todo.id)}\\\\n      />\\\\n    ))}\\\\n  </ul>\\\\n);\\\\nconst Link = ({ active, children, onClick }) => (\\\\n  <li\\\\n    onClick={onClick}\\\\n    style={{\\\\n      marginLeft: '4px',\\\\n    }}\\\\n  >\\\\n    <a className={active ? 'selected' : ''}>{children}</a>\\\\n  </li>\\\\n);\\\\ninterface IToDo {\\\\n  id: string;\\\\n  text: string;\\\\n  completed: boolean;\\\\n}\\\\nenum VisibilityFilters {\\\\n  SHOW_ALL = 'SHOW_ALL',\\\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\\\n}\\\\n\\\\nenum View {\\\\n  List = 'List',\\\\n  Add = 'Add',\\\\n  Filter = 'Filter',\\\\n}\\\\nenum ListAction {\\\\n  Add = 'Add',\\\\n  Remove = 'Remove',\\\\n  ChangeStatus = 'ChangeStatus',\\\\n  ChangeAllStatus = 'ChangeAllStatus',\\\\n}\\\\nconst Filter = () => {\\\\n  return (\\\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\\\n      id={View.Filter}\\\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\\\n      render={(context) => {\\\\n        const { next: updateState, next, value, status } = context;\\\\n        if (status === Status.FirstRender) {\\\\n          return '';\\\\n        }\\\\n        const links = [\\\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\\\n        ];\\\\n        return (\\\\n          <footer\\\\n            className='footer'\\\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\\\n          >\\\\n            <ul className='filters'>\\\\n              {links.map((item) => (\\\\n                <Link\\\\n                  active={value === item.value}\\\\n                  onClick={() => {\\\\n                    next(item.value);\\\\n                  }}\\\\n                >\\\\n                  {item.label}\\\\n                </Link>\\\\n              ))}\\\\n            </ul>\\\\n          </footer>\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst AddButton = () => {\\\\n  return (\\\\n    <RdxView<IToDo[], any, any, any>\\\\n      id={View.Add}\\\\n      defaultValue={[]}\\\\n      render={(context) => {\\\\n        const { next, dispatchById } = context;\\\\n        return (\\\\n          <input\\\\n            onKeyDown={(e: any) => {\\\\n              const text = e.target.value.trim();\\\\n              if (e.which === 13) {\\\\n                dispatchById(View.List, {\\\\n                  type: ListAction.Add,\\\\n                  payload: {\\\\n                    id: uuid(),\\\\n                    text: text,\\\\n                    completed: false,\\\\n                  },\\\\n                });\\\\n                e.target.value = '';\\\\n                e.stopPropagation();\\\\n                e.preventDefault();\\\\n              }\\\\n            }}\\\\n            className='new-todo'\\\\n            placeholder='What needs to be done?'\\\\n          />\\\\n        );\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\nconst List = () => {\\\\n  const listRef = React.useRef<\\\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n  >({\\\\n    id: View.List,\\\\n    defaultValue: {\\\\n      dataSource: [\\\\n        { id: '1', text: '222', completed: false },\\\\n        { id: '2', text: '222', completed: true },\\\\n      ],\\\\n    },\\\\n    reducer: (state, action, context) => {\\\\n      const newState = produce(state, (state) => {\\\\n        switch (action.type) {\\\\n          case ListAction.Add:\\\\n            state.dataSource.push(action.payload);\\\\n            break;\\\\n          case ListAction.Remove:\\\\n            state.dataSource.splice(\\\\n              state.dataSource.findIndex(\\\\n                (item) => item.id === action.payload.id\\\\n              ),\\\\n              1\\\\n            );\\\\n            break;\\\\n          case ListAction.ChangeAllStatus:\\\\n            const completedCount = state.dataSource.filter(\\\\n              (item) => item.completed\\\\n            ).length;\\\\n            if (state.dataSource.length === completedCount) {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: false,\\\\n              }));\\\\n            } else {\\\\n              state.dataSource = state.dataSource.map((item) => ({\\\\n                ...item,\\\\n                completed: true,\\\\n              }));\\\\n            }\\\\n            break;\\\\n          case ListAction.ChangeStatus:\\\\n            const status =\\\\n              state.dataSource[\\\\n                state.dataSource.findIndex(\\\\n                  (item) => item.id === action.payload.id\\\\n                )\\\\n              ].completed;\\\\n            const findIndex = state.dataSource.findIndex(\\\\n              (item) => item.id === action.payload.id\\\\n            );\\\\n            state.dataSource[findIndex].completed = !status;\\\\n            break;\\\\n          default:\\\\n            break;\\\\n        }\\\\n      });\\\\n      return newState;\\\\n    },\\\\n    deps: [{ id: View.Filter }],\\\\n    render: (context) => {\\\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '';\\\\n      }\\\\n      const { dataSource = [] } = value;\\\\n      const [filterSource] = depsValues;\\\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\\\n      const todosCount = dataSource.length;\\\\n      return (\\\\n        <div style={{ position: 'relative' }}>\\\\n          {!!todosCount && (\\\\n            <span>\\\\n              <input\\\\n                className='toggle-all'\\\\n                type='checkbox'\\\\n                checked={completedCount === todosCount}\\\\n                readOnly\\\\n              />\\\\n              <label\\\\n                onClick={() => {\\\\n                  dispatch({\\\\n                    type: ListAction.ChangeAllStatus,\\\\n                  });\\\\n                }}\\\\n              />\\\\n            </span>\\\\n          )}\\\\n          <TodoList\\\\n            todos={dataSource.filter((item) => {\\\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\\\n                return true;\\\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\\\n                return !item.completed;\\\\n              } else {\\\\n                return item.completed;\\\\n              }\\\\n            })}\\\\n            onDelete={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.Remove,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n            toggleTodo={(id) => {\\\\n              dispatch({\\\\n                type: ListAction.ChangeStatus,\\\\n                payload: {\\\\n                  id: id,\\\\n                },\\\\n              });\\\\n            }}\\\\n          />\\\\n        </div>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\\\n      {...listRef.current}\\\\n    />\\\\n  );\\\\n};\\\\nexport const ToDo = () => {\\\\n  return (\\\\n    <div className='todoapp'>\\\\n      <RdxContext>\\\\n        <h1>todos</h1>\\\\n        {/* <DevVisualTableTool /> */}\\\\n        <AddButton />\\\\n        <List />\\\\n        <Filter />\\\\n        {/* <DevVisualGraphTool /> */}\\\\n      </RdxContext>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-todo--to-do\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":287},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":274},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":287}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = addSourceDecorator(() => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\",\"locationsMap\":{\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":296},\"endLoc\":{\"col\":139,\"line\":309},\"startBody\":{\"col\":20,\"line\":296},\"endBody\":{\"col\":139,\"line\":309}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = () => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":274},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":20,\"line\":274},\"endBody\":{\"col\":1,\"line\":287}}}},\n    info: { inline: true },\n  },\n};\n\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\n  <li\n    onClick={onItemClick}\n    className='view'\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    <input checked={completed} className='toggle' type='checkbox'></input>\n    <label>{text}</label>\n    <button\n      className='destroy'\n      onClick={(e) => {\n        e.stopPropagation();\n        onDelete && onDelete();\n      }}\n    ></button>\n  </li>\n);\n\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\n  <ul className='todo-list'>\n    {todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        {...todo}\n        onDelete={() => onDelete(todo.id)}\n        onItemClick={() => toggleTodo(todo.id)}\n      />\n    ))}\n  </ul>\n);\nconst Link = ({ active, children, onClick }) => (\n  <li\n    onClick={onClick}\n    style={{\n      marginLeft: '4px',\n    }}\n  >\n    <a className={active ? 'selected' : ''}>{children}</a>\n  </li>\n);\ninterface IToDo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\nenum VisibilityFilters {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n\nenum View {\n  List = 'List',\n  Add = 'Add',\n  Filter = 'Filter',\n}\nenum ListAction {\n  Add = 'Add',\n  Remove = 'Remove',\n  ChangeStatus = 'ChangeStatus',\n  ChangeAllStatus = 'ChangeAllStatus',\n}\nconst Filter = () => {\n  return (\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\n      id={View.Filter}\n      defaultValue={VisibilityFilters.SHOW_ALL}\n      render={(context) => {\n        const { next: updateState, next, value, status } = context;\n        if (status === Status.FirstRender) {\n          return '';\n        }\n        const links = [\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\n        ];\n        return (\n          <footer\n            className='footer'\n            style={{ boxSizing: 'content-box', display: 'flex' }}\n          >\n            <ul className='filters'>\n              {links.map((item) => (\n                <Link\n                  active={value === item.value}\n                  onClick={() => {\n                    next(item.value);\n                  }}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </ul>\n          </footer>\n        );\n      }}\n    />\n  );\n};\nconst AddButton = () => {\n  return (\n    <RdxView<IToDo[], any, any, any>\n      id={View.Add}\n      defaultValue={[]}\n      render={(context) => {\n        const { next, dispatchById } = context;\n        return (\n          <input\n            onKeyDown={(e: any) => {\n              const text = e.target.value.trim();\n              if (e.which === 13) {\n                dispatchById(View.List, {\n                  type: ListAction.Add,\n                  payload: {\n                    id: uuid(),\n                    text: text,\n                    completed: false,\n                  },\n                });\n                e.target.value = '';\n                e.stopPropagation();\n                e.preventDefault();\n              }\n            }}\n            className='new-todo'\n            placeholder='What needs to be done?'\n          />\n        );\n      }}\n    />\n  );\n};\nconst List = () => {\n  const listRef = React.useRef<\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n  >({\n    id: View.List,\n    defaultValue: {\n      dataSource: [\n        { id: '1', text: '222', completed: false },\n        { id: '2', text: '222', completed: true },\n      ],\n    },\n    reducer: (state, action, context) => {\n      const newState = produce(state, (state) => {\n        switch (action.type) {\n          case ListAction.Add:\n            state.dataSource.push(action.payload);\n            break;\n          case ListAction.Remove:\n            state.dataSource.splice(\n              state.dataSource.findIndex(\n                (item) => item.id === action.payload.id\n              ),\n              1\n            );\n            break;\n          case ListAction.ChangeAllStatus:\n            const completedCount = state.dataSource.filter(\n              (item) => item.completed\n            ).length;\n            if (state.dataSource.length === completedCount) {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: false,\n              }));\n            } else {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: true,\n              }));\n            }\n            break;\n          case ListAction.ChangeStatus:\n            const status =\n              state.dataSource[\n                state.dataSource.findIndex(\n                  (item) => item.id === action.payload.id\n                )\n              ].completed;\n            const findIndex = state.dataSource.findIndex(\n              (item) => item.id === action.payload.id\n            );\n            state.dataSource[findIndex].completed = !status;\n            break;\n          default:\n            break;\n        }\n      });\n      return newState;\n    },\n    deps: [{ id: View.Filter }],\n    render: (context) => {\n      const { value = {} as any, depsValues, status, dispatch } = context;\n      if (status === Status.FirstRender) {\n        return '';\n      }\n      const { dataSource = [] } = value;\n      const [filterSource] = depsValues;\n      const completedCount = dataSource.filter((item) => item.completed).length;\n      const todosCount = dataSource.length;\n      return (\n        <div style={{ position: 'relative' }}>\n          {!!todosCount && (\n            <span>\n              <input\n                className='toggle-all'\n                type='checkbox'\n                checked={completedCount === todosCount}\n                readOnly\n              />\n              <label\n                onClick={() => {\n                  dispatch({\n                    type: ListAction.ChangeAllStatus,\n                  });\n                }}\n              />\n            </span>\n          )}\n          <TodoList\n            todos={dataSource.filter((item) => {\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\n                return true;\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\n                return !item.completed;\n              } else {\n                return item.completed;\n              }\n            })}\n            onDelete={(id) => {\n              dispatch({\n                type: ListAction.Remove,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n            toggleTodo={(id) => {\n              dispatch({\n                type: ListAction.ChangeStatus,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n          />\n        </div>\n      );\n    },\n  });\n  return (\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n      {...listRef.current}\n    />\n  );\n};\nexport const ToDo = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <div className='todoapp'>\n      <RdxContext>\n        <h1>todos</h1>\n        {/* <DevVisualTableTool /> */}\n        <AddButton />\n        <List />\n        <Filter />\n        {/* <DevVisualGraphTool /> */}\n      </RdxContext>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-todo--to-do":{startLoc:{col:20,line:318},endLoc:{col:277,line:331},startBody:{col:20,line:318},endBody:{col:277,line:331}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = () => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":274},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":20,\"line\":274},\"endBody\":{\"col\":1,\"line\":287}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/Todo.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\nimport uuid from 'uuid/v1';\nimport { produce } from 'immer';\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\nimport 'todomvc-app-css/index.css';\nexport default {\n  title: '场景示例| Todo',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\\nimport uuid from 'uuid/v1';\\nimport { produce } from 'immer';\\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\\nimport 'todomvc-app-css/index.css';\\nexport default {\\n  title: '场景示例| Todo',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\\n  <li\\n    onClick={onItemClick}\\n    className='view'\\n    style={{\\n      textDecoration: completed ? 'line-through' : 'none',\\n    }}\\n  >\\n    <input checked={completed} className='toggle' type='checkbox'></input>\\n    <label>{text}</label>\\n    <button\\n      className='destroy'\\n      onClick={(e) => {\\n        e.stopPropagation();\\n        onDelete && onDelete();\\n      }}\\n    ></button>\\n  </li>\\n);\\n\\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\\n  <ul className='todo-list'>\\n    {todos.map((todo) => (\\n      <Todo\\n        key={todo.id}\\n        {...todo}\\n        onDelete={() => onDelete(todo.id)}\\n        onItemClick={() => toggleTodo(todo.id)}\\n      />\\n    ))}\\n  </ul>\\n);\\nconst Link = ({ active, children, onClick }) => (\\n  <li\\n    onClick={onClick}\\n    style={{\\n      marginLeft: '4px',\\n    }}\\n  >\\n    <a className={active ? 'selected' : ''}>{children}</a>\\n  </li>\\n);\\ninterface IToDo {\\n  id: string;\\n  text: string;\\n  completed: boolean;\\n}\\nenum VisibilityFilters {\\n  SHOW_ALL = 'SHOW_ALL',\\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\\n}\\n\\nenum View {\\n  List = 'List',\\n  Add = 'Add',\\n  Filter = 'Filter',\\n}\\nenum ListAction {\\n  Add = 'Add',\\n  Remove = 'Remove',\\n  ChangeStatus = 'ChangeStatus',\\n  ChangeAllStatus = 'ChangeAllStatus',\\n}\\nconst Filter = () => {\\n  return (\\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\\n      id={View.Filter}\\n      defaultValue={VisibilityFilters.SHOW_ALL}\\n      render={(context) => {\\n        const { next: updateState, next, value, status } = context;\\n        if (status === Status.FirstRender) {\\n          return '';\\n        }\\n        const links = [\\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\\n        ];\\n        return (\\n          <footer\\n            className='footer'\\n            style={{ boxSizing: 'content-box', display: 'flex' }}\\n          >\\n            <ul className='filters'>\\n              {links.map((item) => (\\n                <Link\\n                  active={value === item.value}\\n                  onClick={() => {\\n                    next(item.value);\\n                  }}\\n                >\\n                  {item.label}\\n                </Link>\\n              ))}\\n            </ul>\\n          </footer>\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst AddButton = () => {\\n  return (\\n    <RdxView<IToDo[], any, any, any>\\n      id={View.Add}\\n      defaultValue={[]}\\n      render={(context) => {\\n        const { next, dispatchById } = context;\\n        return (\\n          <input\\n            onKeyDown={(e: any) => {\\n              const text = e.target.value.trim();\\n              if (e.which === 13) {\\n                dispatchById(View.List, {\\n                  type: ListAction.Add,\\n                  payload: {\\n                    id: uuid(),\\n                    text: text,\\n                    completed: false,\\n                  },\\n                });\\n                e.target.value = '';\\n                e.stopPropagation();\\n                e.preventDefault();\\n              }\\n            }}\\n            className='new-todo'\\n            placeholder='What needs to be done?'\\n          />\\n        );\\n      }}\\n    />\\n  );\\n};\\nconst List = () => {\\n  const listRef = React.useRef<\\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n  >({\\n    id: View.List,\\n    defaultValue: {\\n      dataSource: [\\n        { id: '1', text: '222', completed: false },\\n        { id: '2', text: '222', completed: true },\\n      ],\\n    },\\n    reducer: (state, action, context) => {\\n      const newState = produce(state, (state) => {\\n        switch (action.type) {\\n          case ListAction.Add:\\n            state.dataSource.push(action.payload);\\n            break;\\n          case ListAction.Remove:\\n            state.dataSource.splice(\\n              state.dataSource.findIndex(\\n                (item) => item.id === action.payload.id\\n              ),\\n              1\\n            );\\n            break;\\n          case ListAction.ChangeAllStatus:\\n            const completedCount = state.dataSource.filter(\\n              (item) => item.completed\\n            ).length;\\n            if (state.dataSource.length === completedCount) {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: false,\\n              }));\\n            } else {\\n              state.dataSource = state.dataSource.map((item) => ({\\n                ...item,\\n                completed: true,\\n              }));\\n            }\\n            break;\\n          case ListAction.ChangeStatus:\\n            const status =\\n              state.dataSource[\\n                state.dataSource.findIndex(\\n                  (item) => item.id === action.payload.id\\n                )\\n              ].completed;\\n            const findIndex = state.dataSource.findIndex(\\n              (item) => item.id === action.payload.id\\n            );\\n            state.dataSource[findIndex].completed = !status;\\n            break;\\n          default:\\n            break;\\n        }\\n      });\\n      return newState;\\n    },\\n    deps: [{ id: View.Filter }],\\n    render: (context) => {\\n      const { value = {} as any, depsValues, status, dispatch } = context;\\n      if (status === Status.FirstRender) {\\n        return '';\\n      }\\n      const { dataSource = [] } = value;\\n      const [filterSource] = depsValues;\\n      const completedCount = dataSource.filter((item) => item.completed).length;\\n      const todosCount = dataSource.length;\\n      return (\\n        <div style={{ position: 'relative' }}>\\n          {!!todosCount && (\\n            <span>\\n              <input\\n                className='toggle-all'\\n                type='checkbox'\\n                checked={completedCount === todosCount}\\n                readOnly\\n              />\\n              <label\\n                onClick={() => {\\n                  dispatch({\\n                    type: ListAction.ChangeAllStatus,\\n                  });\\n                }}\\n              />\\n            </span>\\n          )}\\n          <TodoList\\n            todos={dataSource.filter((item) => {\\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\\n                return true;\\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\\n                return !item.completed;\\n              } else {\\n                return item.completed;\\n              }\\n            })}\\n            onDelete={(id) => {\\n              dispatch({\\n                type: ListAction.Remove,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n            toggleTodo={(id) => {\\n              dispatch({\\n                type: ListAction.ChangeStatus,\\n                payload: {\\n                  id: id,\\n                },\\n              });\\n            }}\\n          />\\n        </div>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\\n      {...listRef.current}\\n    />\\n  );\\n};\\nexport const ToDo = () => {\\n  return (\\n    <div className='todoapp'>\\n      <RdxContext>\\n        <h1>todos</h1>\\n        {/* <DevVisualTableTool /> */}\\n        <AddButton />\\n        <List />\\n        <Filter />\\n        {/* <DevVisualGraphTool /> */}\\n      </RdxContext>\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-todo--to-do\":{\"startLoc\":{\"col\":20,\"line\":274},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":20,\"line\":274},\"endBody\":{\"col\":1,\"line\":287}}}},\n    info: { inline: true },\n  },\n};\n\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\n  <li\n    onClick={onItemClick}\n    className='view'\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    <input checked={completed} className='toggle' type='checkbox'></input>\n    <label>{text}</label>\n    <button\n      className='destroy'\n      onClick={(e) => {\n        e.stopPropagation();\n        onDelete && onDelete();\n      }}\n    ></button>\n  </li>\n);\n\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\n  <ul className='todo-list'>\n    {todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        {...todo}\n        onDelete={() => onDelete(todo.id)}\n        onItemClick={() => toggleTodo(todo.id)}\n      />\n    ))}\n  </ul>\n);\nconst Link = ({ active, children, onClick }) => (\n  <li\n    onClick={onClick}\n    style={{\n      marginLeft: '4px',\n    }}\n  >\n    <a className={active ? 'selected' : ''}>{children}</a>\n  </li>\n);\ninterface IToDo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\nenum VisibilityFilters {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n\nenum View {\n  List = 'List',\n  Add = 'Add',\n  Filter = 'Filter',\n}\nenum ListAction {\n  Add = 'Add',\n  Remove = 'Remove',\n  ChangeStatus = 'ChangeStatus',\n  ChangeAllStatus = 'ChangeAllStatus',\n}\nconst Filter = () => {\n  return (\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\n      id={View.Filter}\n      defaultValue={VisibilityFilters.SHOW_ALL}\n      render={(context) => {\n        const { next: updateState, next, value, status } = context;\n        if (status === Status.FirstRender) {\n          return '';\n        }\n        const links = [\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\n        ];\n        return (\n          <footer\n            className='footer'\n            style={{ boxSizing: 'content-box', display: 'flex' }}\n          >\n            <ul className='filters'>\n              {links.map((item) => (\n                <Link\n                  active={value === item.value}\n                  onClick={() => {\n                    next(item.value);\n                  }}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </ul>\n          </footer>\n        );\n      }}\n    />\n  );\n};\nconst AddButton = () => {\n  return (\n    <RdxView<IToDo[], any, any, any>\n      id={View.Add}\n      defaultValue={[]}\n      render={(context) => {\n        const { next, dispatchById } = context;\n        return (\n          <input\n            onKeyDown={(e: any) => {\n              const text = e.target.value.trim();\n              if (e.which === 13) {\n                dispatchById(View.List, {\n                  type: ListAction.Add,\n                  payload: {\n                    id: uuid(),\n                    text: text,\n                    completed: false,\n                  },\n                });\n                e.target.value = '';\n                e.stopPropagation();\n                e.preventDefault();\n              }\n            }}\n            className='new-todo'\n            placeholder='What needs to be done?'\n          />\n        );\n      }}\n    />\n  );\n};\nconst List = () => {\n  const listRef = React.useRef<\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n  >({\n    id: View.List,\n    defaultValue: {\n      dataSource: [\n        { id: '1', text: '222', completed: false },\n        { id: '2', text: '222', completed: true },\n      ],\n    },\n    reducer: (state, action, context) => {\n      const newState = produce(state, (state) => {\n        switch (action.type) {\n          case ListAction.Add:\n            state.dataSource.push(action.payload);\n            break;\n          case ListAction.Remove:\n            state.dataSource.splice(\n              state.dataSource.findIndex(\n                (item) => item.id === action.payload.id\n              ),\n              1\n            );\n            break;\n          case ListAction.ChangeAllStatus:\n            const completedCount = state.dataSource.filter(\n              (item) => item.completed\n            ).length;\n            if (state.dataSource.length === completedCount) {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: false,\n              }));\n            } else {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: true,\n              }));\n            }\n            break;\n          case ListAction.ChangeStatus:\n            const status =\n              state.dataSource[\n                state.dataSource.findIndex(\n                  (item) => item.id === action.payload.id\n                )\n              ].completed;\n            const findIndex = state.dataSource.findIndex(\n              (item) => item.id === action.payload.id\n            );\n            state.dataSource[findIndex].completed = !status;\n            break;\n          default:\n            break;\n        }\n      });\n      return newState;\n    },\n    deps: [{ id: View.Filter }],\n    render: (context) => {\n      const { value = {} as any, depsValues, status, dispatch } = context;\n      if (status === Status.FirstRender) {\n        return '';\n      }\n      const { dataSource = [] } = value;\n      const [filterSource] = depsValues;\n      const completedCount = dataSource.filter((item) => item.completed).length;\n      const todosCount = dataSource.length;\n      return (\n        <div style={{ position: 'relative' }}>\n          {!!todosCount && (\n            <span>\n              <input\n                className='toggle-all'\n                type='checkbox'\n                checked={completedCount === todosCount}\n                readOnly\n              />\n              <label\n                onClick={() => {\n                  dispatch({\n                    type: ListAction.ChangeAllStatus,\n                  });\n                }}\n              />\n            </span>\n          )}\n          <TodoList\n            todos={dataSource.filter((item) => {\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\n                return true;\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\n                return !item.completed;\n              } else {\n                return item.completed;\n              }\n            })}\n            onDelete={(id) => {\n              dispatch({\n                type: ListAction.Remove,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n            toggleTodo={(id) => {\n              dispatch({\n                type: ListAction.ChangeStatus,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n          />\n        </div>\n      );\n    },\n  });\n  return (\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n      {...listRef.current}\n    />\n  );\n};\nexport const ToDo = addSourceDecorator(() => {\n  return (\n    <div className='todoapp'>\n      <RdxContext>\n        <h1>todos</h1>\n        {/* <DevVisualTableTool /> */}\n        <AddButton />\n        <List />\n        <Filter />\n        {/* <DevVisualGraphTool /> */}\n      </RdxContext>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-todo--to-do":{startLoc:{col:20,line:296},endLoc:{col:139,line:309},startBody:{col:20,line:296},endBody:{col:139,line:309}}}},storySource:{source:"import React from 'react';\nimport { RdxContext, Status, RdxView, IBase } from '@czwcode/rdx';\nimport uuid from 'uuid/v1';\nimport { produce } from 'immer';\nimport { DevVisualGraphTool, DevVisualTableTool } from '@czwcode/rdx-plugins';\nimport 'todomvc-app-css/index.css';\nexport default {\n  title: '场景示例| Todo',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst Todo = ({ onItemClick, onDelete, completed, text }) => (\n  <li\n    onClick={onItemClick}\n    className='view'\n    style={{\n      textDecoration: completed ? 'line-through' : 'none',\n    }}\n  >\n    <input checked={completed} className='toggle' type='checkbox'></input>\n    <label>{text}</label>\n    <button\n      className='destroy'\n      onClick={(e) => {\n        e.stopPropagation();\n        onDelete && onDelete();\n      }}\n    ></button>\n  </li>\n);\n\nconst TodoList = ({ todos, toggleTodo, onDelete }) => (\n  <ul className='todo-list'>\n    {todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        {...todo}\n        onDelete={() => onDelete(todo.id)}\n        onItemClick={() => toggleTodo(todo.id)}\n      />\n    ))}\n  </ul>\n);\nconst Link = ({ active, children, onClick }) => (\n  <li\n    onClick={onClick}\n    style={{\n      marginLeft: '4px',\n    }}\n  >\n    <a className={active ? 'selected' : ''}>{children}</a>\n  </li>\n);\ninterface IToDo {\n  id: string;\n  text: string;\n  completed: boolean;\n}\nenum VisibilityFilters {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n\nenum View {\n  List = 'List',\n  Add = 'Add',\n  Filter = 'Filter',\n}\nenum ListAction {\n  Add = 'Add',\n  Remove = 'Remove',\n  ChangeStatus = 'ChangeStatus',\n  ChangeAllStatus = 'ChangeAllStatus',\n}\nconst Filter = () => {\n  return (\n    <RdxView<VisibilityFilters, [IToDo[]], any, any>\n      id={View.Filter}\n      defaultValue={VisibilityFilters.SHOW_ALL}\n      render={(context) => {\n        const { next: updateState, next, value, status } = context;\n        if (status === Status.FirstRender) {\n          return '';\n        }\n        const links = [\n          { label: 'All', value: VisibilityFilters.SHOW_ALL },\n          { label: 'Active', value: VisibilityFilters.SHOW_ACTIVE },\n          { label: 'Completed', value: VisibilityFilters.SHOW_COMPLETED },\n        ];\n        return (\n          <footer\n            className='footer'\n            style={{ boxSizing: 'content-box', display: 'flex' }}\n          >\n            <ul className='filters'>\n              {links.map((item) => (\n                <Link\n                  active={value === item.value}\n                  onClick={() => {\n                    next(item.value);\n                  }}\n                >\n                  {item.label}\n                </Link>\n              ))}\n            </ul>\n          </footer>\n        );\n      }}\n    />\n  );\n};\nconst AddButton = () => {\n  return (\n    <RdxView<IToDo[], any, any, any>\n      id={View.Add}\n      defaultValue={[]}\n      render={(context) => {\n        const { next, dispatchById } = context;\n        return (\n          <input\n            onKeyDown={(e: any) => {\n              const text = e.target.value.trim();\n              if (e.which === 13) {\n                dispatchById(View.List, {\n                  type: ListAction.Add,\n                  payload: {\n                    id: uuid(),\n                    text: text,\n                    completed: false,\n                  },\n                });\n                e.target.value = '';\n                e.stopPropagation();\n                e.preventDefault();\n              }\n            }}\n            className='new-todo'\n            placeholder='What needs to be done?'\n          />\n        );\n      }}\n    />\n  );\n};\nconst List = () => {\n  const listRef = React.useRef<\n    IBase<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n  >({\n    id: View.List,\n    defaultValue: {\n      dataSource: [\n        { id: '1', text: '222', completed: false },\n        { id: '2', text: '222', completed: true },\n      ],\n    },\n    reducer: (state, action, context) => {\n      const newState = produce(state, (state) => {\n        switch (action.type) {\n          case ListAction.Add:\n            state.dataSource.push(action.payload);\n            break;\n          case ListAction.Remove:\n            state.dataSource.splice(\n              state.dataSource.findIndex(\n                (item) => item.id === action.payload.id\n              ),\n              1\n            );\n            break;\n          case ListAction.ChangeAllStatus:\n            const completedCount = state.dataSource.filter(\n              (item) => item.completed\n            ).length;\n            if (state.dataSource.length === completedCount) {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: false,\n              }));\n            } else {\n              state.dataSource = state.dataSource.map((item) => ({\n                ...item,\n                completed: true,\n              }));\n            }\n            break;\n          case ListAction.ChangeStatus:\n            const status =\n              state.dataSource[\n                state.dataSource.findIndex(\n                  (item) => item.id === action.payload.id\n                )\n              ].completed;\n            const findIndex = state.dataSource.findIndex(\n              (item) => item.id === action.payload.id\n            );\n            state.dataSource[findIndex].completed = !status;\n            break;\n          default:\n            break;\n        }\n      });\n      return newState;\n    },\n    deps: [{ id: View.Filter }],\n    render: (context) => {\n      const { value = {} as any, depsValues, status, dispatch } = context;\n      if (status === Status.FirstRender) {\n        return '';\n      }\n      const { dataSource = [] } = value;\n      const [filterSource] = depsValues;\n      const completedCount = dataSource.filter((item) => item.completed).length;\n      const todosCount = dataSource.length;\n      return (\n        <div style={{ position: 'relative' }}>\n          {!!todosCount && (\n            <span>\n              <input\n                className='toggle-all'\n                type='checkbox'\n                checked={completedCount === todosCount}\n                readOnly\n              />\n              <label\n                onClick={() => {\n                  dispatch({\n                    type: ListAction.ChangeAllStatus,\n                  });\n                }}\n              />\n            </span>\n          )}\n          <TodoList\n            todos={dataSource.filter((item) => {\n              if (filterSource === VisibilityFilters.SHOW_ALL) {\n                return true;\n              } else if (filterSource === VisibilityFilters.SHOW_ACTIVE) {\n                return !item.completed;\n              } else {\n                return item.completed;\n              }\n            })}\n            onDelete={(id) => {\n              dispatch({\n                type: ListAction.Remove,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n            toggleTodo={(id) => {\n              dispatch({\n                type: ListAction.ChangeStatus,\n                payload: {\n                  id: id,\n                },\n              });\n            }}\n          />\n        </div>\n      );\n    },\n  });\n  return (\n    <RdxView<{ dataSource: IToDo[] }, [VisibilityFilters], any, any>\n      {...listRef.current}\n    />\n  );\n};\nexport const ToDo = () => {\n  return (\n    <div className='todoapp'>\n      <RdxContext>\n        <h1>todos</h1>\n        {/* <DevVisualTableTool /> */}\n        <AddButton />\n        <List />\n        <Filter />\n        {/* <DevVisualGraphTool /> */}\n      </RdxContext>\n    </div>\n  );\n};\n",locationsMap:{"场景示例-todo--to-do":{startLoc:{col:20,line:274},endLoc:{col:1,line:287},startBody:{col:20,line:274},endBody:{col:1,line:287}}}},info:{inline:!0}}};const Todo=({onItemClick:onItemClick,onDelete:onDelete,completed:completed,text:text})=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{onClick:onItemClick,className:"view",style:{textDecoration:completed?"line-through":"none"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{checked:completed,className:"toggle",type:"checkbox"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label",null,text),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("button",{className:"destroy",onClick:e=>{e.stopPropagation(),onDelete&&onDelete()}})),TodoList=({todos:todos,toggleTodo:toggleTodo,onDelete:onDelete})=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"todo-list"},todos.map(todo=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Todo,Object.assign({key:todo.id},todo,{onDelete:()=>onDelete(todo.id),onItemClick:()=>toggleTodo(todo.id)})))),Link=({active:active,children:children,onClick:onClick})=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li",{onClick:onClick,style:{marginLeft:"4px"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a",{className:active?"selected":""},children));var VisibilityFilters,View,ListAction;!function(VisibilityFilters){VisibilityFilters.SHOW_ALL="SHOW_ALL",VisibilityFilters.SHOW_COMPLETED="SHOW_COMPLETED",VisibilityFilters.SHOW_ACTIVE="SHOW_ACTIVE"}(VisibilityFilters||(VisibilityFilters={})),function(View){View.List="List",View.Add="Add",View.Filter="Filter"}(View||(View={})),function(ListAction){ListAction.Add="Add",ListAction.Remove="Remove",ListAction.ChangeStatus="ChangeStatus",ListAction.ChangeAllStatus="ChangeAllStatus"}(ListAction||(ListAction={}));const Filter=()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,{id:View.Filter,defaultValue:VisibilityFilters.SHOW_ALL,render:context=>{const{next:updateState,next:next,value:value,status:status}=context;if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.c.FirstRender)return"";const links=[{label:"All",value:VisibilityFilters.SHOW_ALL},{label:"Active",value:VisibilityFilters.SHOW_ACTIVE},{label:"Completed",value:VisibilityFilters.SHOW_COMPLETED}];return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("footer",{className:"footer",style:{boxSizing:"content-box",display:"flex"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul",{className:"filters"},links.map(item=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Link,{active:value===item.value,onClick:()=>{next(item.value)}},item.label))))}}),AddButton=()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,{id:View.Add,defaultValue:[],render:context=>{const{next:next,dispatchById:dispatchById}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{onKeyDown:e=>{const text=e.target.value.trim();13===e.which&&(dispatchById(View.List,{type:ListAction.Add,payload:{id:uuid_v1__WEBPACK_IMPORTED_MODULE_4___default()(),text:text,completed:!1}}),e.target.value="",e.stopPropagation(),e.preventDefault())},className:"new-todo",placeholder:"What needs to be done?"})}}),List=()=>{const listRef=react__WEBPACK_IMPORTED_MODULE_0___default.a.useRef({id:View.List,defaultValue:{dataSource:[{id:"1",text:"222",completed:!1},{id:"2",text:"222",completed:!0}]},reducer:(state,action,context)=>Object(immer__WEBPACK_IMPORTED_MODULE_5__.a)(state,state=>{switch(action.type){case ListAction.Add:state.dataSource.push(action.payload);break;case ListAction.Remove:state.dataSource.splice(state.dataSource.findIndex(item=>item.id===action.payload.id),1);break;case ListAction.ChangeAllStatus:const completedCount=state.dataSource.filter(item=>item.completed).length;state.dataSource.length===completedCount?state.dataSource=state.dataSource.map(item=>Object.assign(Object.assign({},item),{completed:!1})):state.dataSource=state.dataSource.map(item=>Object.assign(Object.assign({},item),{completed:!0}));break;case ListAction.ChangeStatus:const status=state.dataSource[state.dataSource.findIndex(item=>item.id===action.payload.id)].completed,findIndex=state.dataSource.findIndex(item=>item.id===action.payload.id);state.dataSource[findIndex].completed=!status}}),deps:[{id:View.Filter}],render:context=>{const{value:value={},depsValues:depsValues,status:status,dispatch:dispatch}=context;if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.c.FirstRender)return"";const{dataSource:dataSource=[]}=value,[filterSource]=depsValues,completedCount=dataSource.filter(item=>item.completed).length,todosCount=dataSource.length;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{position:"relative"}},!!todosCount&&react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input",{className:"toggle-all",type:"checkbox",checked:completedCount===todosCount,readOnly:!0}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label",{onClick:()=>{dispatch({type:ListAction.ChangeAllStatus})}})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(TodoList,{todos:dataSource.filter(item=>filterSource===VisibilityFilters.SHOW_ALL||(filterSource===VisibilityFilters.SHOW_ACTIVE?!item.completed:item.completed)),onDelete:id=>{dispatch({type:ListAction.Remove,payload:{id:id}})},toggleTodo:id=>{dispatch({type:ListAction.ChangeStatus,payload:{id:id}})}}))}});return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,Object.assign({},listRef.current))},ToDo=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{className:"todoapp"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h1",null,"todos"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(AddButton,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(List,null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Filter,null))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Todo.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Todo.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/Todo.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},1762:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"同步联动",(function(){return 同步联动})),__webpack_require__.d(__webpack_exports__,"异步联动",(function(){return 异步联动})),__webpack_require__.d(__webpack_exports__,"查询列表_作用域",(function(){return 查询列表_作用域}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(33),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(104),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(38),_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(358),_alifd_next__WEBPACK_IMPORTED_MODULE_6__=(__webpack_require__(657),__webpack_require__(2196)),_alifd_next__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(82),_alifd_next__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(357),_alifd_next__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(89),axios__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(921),axios__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_10__),react_json_view__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(199),react_json_view__WEBPACK_IMPORTED_MODULE_11___default=__webpack_require__.n(react_json_view__WEBPACK_IMPORTED_MODULE_11__),province_city_china_data__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(170),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  Status,\n  ReactionContext,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport ReactJsonView from 'react-json-view';\nexport default {\n  title: '场景示例|联动|Rdx版本',\n  parameters: {\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\nconst { Row, Col } = Grid;\n\nexport const 同步联动 = () => {\n  interface TreeNode {\n    label: string;\n    value: string;\n    children: TreeNode[];\n  }\n  interface TaskValue {\n    chooseValue: string;\n    dataSource: TreeNode[];\n  }\n  enum AdministrativeRegions {\n    // 省\n    Province = 'province',\n    // 市\n    City = 'city',\n    // 区\n    Area = 'area',\n  }\n  const provinceTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { value, updateState: udpateState } = context;\n      const res = await axios.get(\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\n      );\n      udpateState({\n        ...value,\n        dataSource: res.data,\n      });\n    },\n    []\n  );\n  const provinceView = useCallback(\n    (context: DataContext<TaskValue, any, any>) => {\n      const { next, next: updateState, value, status } = context;\n      if (status === Status.FirstRender) {\n        return '空白状态';\n      }\n      if (status === Status.Waiting) {\n        return '加载状态';\n      }\n      if (status === Status.Error) {\n        return '错误状态';\n      }\n      const { dataSource, chooseValue } = value;\n\n      return (\n        <Menu\n          onItemClick={(key) => {\n            next({\n              ...value,\n              chooseValue: key,\n            });\n          }}\n          selectMode={'single'}\n          selectedKeys={chooseValue}\n          style={{ width: 100 }}\n        >\n          {dataSource.map((item) => (\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\n          ))}\n        </Menu>\n      );\n    },\n    []\n  );\n  const otherTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [preLevelValue = {}] = depsValues;\n      const { dataSource = [], chooseValue } = preLevelValue;\n      udpateState({\n        ...value,\n        dataSource: dataSource.find((item) => item.value === chooseValue)\n          ?.children,\n      });\n    },\n    []\n  );\n  const otherDefines = [\n    {\n      key: AdministrativeRegions.City,\n      relyTaskKey: AdministrativeRegions.Province,\n    },\n    {\n      key: AdministrativeRegions.Area,\n      relyTaskKey: AdministrativeRegions.City,\n    },\n  ];\n\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\n    const { next: updateState, next, value, status } = context;\n    if (status === Status.FirstRender) {\n      return '空白状态';\n    }\n    if (status === Status.Waiting) {\n      return '加载状态';\n    }\n    if (status === Status.Error) {\n      return '错误状态';\n    }\n    const { dataSource, chooseValue } = value;\n    if (!dataSource) {\n      return '';\n    }\n    return (\n      <Menu\n        onItemClick={(key) => {\n          next({\n            ...value,\n            chooseValue: key,\n          });\n        }}\n        selectMode={'single'}\n        selectedKeys={chooseValue}\n        style={{ width: 100 }}\n      >\n        {dataSource.map((item) => (\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <RdxContext onChange={() => {}}>\n      <Row>\n        <Col>\n          <RdxView<TaskValue, any, any, any>\n            id={AdministrativeRegions.Province}\n            defaultValue={{ dataSource: [], chooseValue: '' }}\n            reaction={provinceTask}\n            render={provinceView}\n          ></RdxView>\n        </Col>\n        {otherDefines.map((item) => (\n          <Col>\n            <RdxView<TaskValue, any, any, any>\n              id={item.key}\n              deps={[{ id: item.relyTaskKey }]}\n              defaultValue={{ dataSource: [], chooseValue: '' }}\n              reaction={otherTask}\n              render={otherTaskView}\n            ></RdxView>\n          </Col>\n        ))}\n      </Row>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n/**\n *\n *\n * @interface Model\n */\ninterface Model {\n  dataSource: { label: string; value: string }[];\n  value: string;\n}\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst produceTask = (\n  data: any[],\n  filter: (v: any, depsValues: Model[]) => boolean,\n  formatter: (data: any[]) => { label: string; value: string }[]\n) => async (context: ReactionContext<Model, any, any>) => {\n  const { value, depsValues, updateState: udpateState } = context;\n  const newData = data.filter((value) => {\n    const bool = filter(value, depsValues);\n    return bool;\n  });\n  const newDataSource = formatter(newData);\n  await pause(2000);\n  udpateState({\n    ...value,\n    value: newDataSource[0] && newDataSource[0].value,\n    dataSource: newDataSource,\n  });\n};\nconst countryTask = produceTask(\n  province,\n  (relyValues) => {\n    return true;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.province }));\n  }\n);\nconst regionTask = produceTask(\n  city,\n  (v, depsValues) => {\n    const [province] = depsValues;\n    return v.province === province.value;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.city }));\n  }\n);\nconst cityTask = produceTask(\n  area,\n  (v, depsValues) => {\n    const [province, city] = depsValues;\n    return (\n      (!province.value || v.province === province.value) &&\n      (!city.value || v.city === city.value)\n    );\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.area }));\n  }\n);\nenum View {\n  Country = 'Country',\n  Region = 'Region',\n  City = 'City',\n}\n\nconst data = [\n  {\n    id: View.Country,\n    label: '国家',\n    task: countryTask,\n  },\n  {\n    id: View.Region,\n    label: '区域',\n    task: regionTask,\n  },\n  {\n    id: View.City,\n    label: '城市',\n    task: cityTask,\n  },\n];\n\nconst defaultValue = { value: '', dataSource: [] };\nexport const 异步联动 = () => {\n  const ref = useRef({\n    view: (context) => {\n      const { status, value, next } = context;\n      return (\n        <Select\n          disabled={status === Status.Waiting || status === Status.Running}\n          state={\n            status === Status.Waiting || status === Status.Running\n              ? 'loading'\n              : undefined\n          }\n          showSearch\n          value={value.value}\n          dataSource={value.dataSource}\n          onChange={(v) => {\n            next({ ...value, value: v });\n          }}\n        ></Select>\n      );\n    },\n  });\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              deps={depsIds.map((item) => ({ id: item }))}\n              reaction={item.task}\n              defaultValue={defaultValue}\n              render={ref.current.view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n\nexport const 查询列表_作用域 = () => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              scope={'filter'}\n              deps={depsIds.map((item) => ({ id: item }))}\n              defaultValue={defaultValue}\n              render={SearchView}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <RdxView\n        id={'SearchButton'}\n        render={SearchButtonView}\n        scope={'filter'}\n        deps={data.map((item) => ({ id: item.id }))}\n      ></RdxView>\n      <RdxView\n        id={'OutScope'}\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\n        render={OutScopeView}\n      />\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\nconst SearchView = (context: DataContext<any, any, any>) => {\n  const { status, value, next } = context;\n  return (\n    <Select\n      disabled={status === Status.Waiting || status === Status.Running}\n      state={status === Status.Waiting ? 'loading' : undefined}\n      showSearch\n      value={value.value}\n      dataSource={[\n        { label: 'A', value: 'A' },\n        { label: 'B', value: 'B' },\n        { label: 'C', value: 'C' },\n      ]}\n      onChange={(v) => {\n        next({ ...value, value: v });\n      }}\n    ></Select>\n  );\n};\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\n  const { mergeScopeState2Global, next, depsValues } = context;\n  return (\n    <div>\n      <Button\n        type='primary'\n        onClick={() => {\n          mergeScopeState2Global();\n        }}\n      >\n        查询\n      </Button>\n      <br />\n      <strong>筛选区域内：</strong>\n      <ReactJsonView src={depsValues} />\n    </div>\n  );\n};\nconst OutScopeView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  return (\n    <>\n      <strong>外部： </strong>\n      <ReactJsonView src={depsValues} />\n    </>\n  );\n};\n",__ADDS_MAP__={"场景示例-联动-rdx版本--同步联动":{startLoc:{col:20,line:25},endLoc:{col:1,line:173},startBody:{col:20,line:25},endBody:{col:1,line:173}},"场景示例-联动-rdx版本--异步联动":{startLoc:{col:20,line:260},endLoc:{col:1,line:302},startBody:{col:20,line:260},endBody:{col:1,line:302}},"场景示例-联动-rdx版本--查询列表-作用域":{startLoc:{col:24,line:304},endLoc:{col:1,line:336},startBody:{col:24,line:304},endBody:{col:1,line:336}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|联动|Rdx版本",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  Status,\\\\n  ReactionContext,\\\\n  DataContext,\\\\n} from '@czwcode/rdx';\\\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\\\nimport axios from 'axios';\\\\nimport { useCallback } from 'react';\\\\nimport ReactJsonView from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|联动|Rdx版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\nconst { Row, Col } = Grid;\\\\n\\\\nexport const 同步联动 = () => {\\\\n  interface TreeNode {\\\\n    label: string;\\\\n    value: string;\\\\n    children: TreeNode[];\\\\n  }\\\\n  interface TaskValue {\\\\n    chooseValue: string;\\\\n    dataSource: TreeNode[];\\\\n  }\\\\n  enum AdministrativeRegions {\\\\n    // 省\\\\n    Province = 'province',\\\\n    // 市\\\\n    City = 'city',\\\\n    // 区\\\\n    Area = 'area',\\\\n  }\\\\n  const provinceTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { value, updateState: udpateState } = context;\\\\n      const res = await axios.get(\\\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\\\n      );\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: res.data,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const provinceView = useCallback(\\\\n    (context: DataContext<TaskValue, any, any>) => {\\\\n      const { next, next: updateState, value, status } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '空白状态';\\\\n      }\\\\n      if (status === Status.Waiting) {\\\\n        return '加载状态';\\\\n      }\\\\n      if (status === Status.Error) {\\\\n        return '错误状态';\\\\n      }\\\\n      const { dataSource, chooseValue } = value;\\\\n\\\\n      return (\\\\n        <Menu\\\\n          onItemClick={(key) => {\\\\n            next({\\\\n              ...value,\\\\n              chooseValue: key,\\\\n            });\\\\n          }}\\\\n          selectMode={'single'}\\\\n          selectedKeys={chooseValue}\\\\n          style={{ width: 100 }}\\\\n        >\\\\n          {dataSource.map((item) => (\\\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n          ))}\\\\n        </Menu>\\\\n      );\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [preLevelValue = {}] = depsValues;\\\\n      const { dataSource = [], chooseValue } = preLevelValue;\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\\\n          ?.children,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherDefines = [\\\\n    {\\\\n      key: AdministrativeRegions.City,\\\\n      relyTaskKey: AdministrativeRegions.Province,\\\\n    },\\\\n    {\\\\n      key: AdministrativeRegions.Area,\\\\n      relyTaskKey: AdministrativeRegions.City,\\\\n    },\\\\n  ];\\\\n\\\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\\\n    const { next: updateState, next, value, status } = context;\\\\n    if (status === Status.FirstRender) {\\\\n      return '空白状态';\\\\n    }\\\\n    if (status === Status.Waiting) {\\\\n      return '加载状态';\\\\n    }\\\\n    if (status === Status.Error) {\\\\n      return '错误状态';\\\\n    }\\\\n    const { dataSource, chooseValue } = value;\\\\n    if (!dataSource) {\\\\n      return '';\\\\n    }\\\\n    return (\\\\n      <Menu\\\\n        onItemClick={(key) => {\\\\n          next({\\\\n            ...value,\\\\n            chooseValue: key,\\\\n          });\\\\n        }}\\\\n        selectMode={'single'}\\\\n        selectedKeys={chooseValue}\\\\n        style={{ width: 100 }}\\\\n      >\\\\n        {dataSource.map((item) => (\\\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n        ))}\\\\n      </Menu>\\\\n    );\\\\n  };\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <Row>\\\\n        <Col>\\\\n          <RdxView<TaskValue, any, any, any>\\\\n            id={AdministrativeRegions.Province}\\\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n            reaction={provinceTask}\\\\n            render={provinceView}\\\\n          ></RdxView>\\\\n        </Col>\\\\n        {otherDefines.map((item) => (\\\\n          <Col>\\\\n            <RdxView<TaskValue, any, any, any>\\\\n              id={item.key}\\\\n              deps={[{ id: item.relyTaskKey }]}\\\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n              reaction={otherTask}\\\\n              render={otherTaskView}\\\\n            ></RdxView>\\\\n          </Col>\\\\n        ))}\\\\n      </Row>\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n/**\\\\n *\\\\n *\\\\n * @interface Model\\\\n */\\\\ninterface Model {\\\\n  dataSource: { label: string; value: string }[];\\\\n  value: string;\\\\n}\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst produceTask = (\\\\n  data: any[],\\\\n  filter: (v: any, depsValues: Model[]) => boolean,\\\\n  formatter: (data: any[]) => { label: string; value: string }[]\\\\n) => async (context: ReactionContext<Model, any, any>) => {\\\\n  const { value, depsValues, updateState: udpateState } = context;\\\\n  const newData = data.filter((value) => {\\\\n    const bool = filter(value, depsValues);\\\\n    return bool;\\\\n  });\\\\n  const newDataSource = formatter(newData);\\\\n  await pause(2000);\\\\n  udpateState({\\\\n    ...value,\\\\n    value: newDataSource[0] && newDataSource[0].value,\\\\n    dataSource: newDataSource,\\\\n  });\\\\n};\\\\nconst countryTask = produceTask(\\\\n  province,\\\\n  (relyValues) => {\\\\n    return true;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\\\n  }\\\\n);\\\\nconst regionTask = produceTask(\\\\n  city,\\\\n  (v, depsValues) => {\\\\n    const [province] = depsValues;\\\\n    return v.province === province.value;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\\\n  }\\\\n);\\\\nconst cityTask = produceTask(\\\\n  area,\\\\n  (v, depsValues) => {\\\\n    const [province, city] = depsValues;\\\\n    return (\\\\n      (!province.value || v.province === province.value) &&\\\\n      (!city.value || v.city === city.value)\\\\n    );\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\\\n  }\\\\n);\\\\nenum View {\\\\n  Country = 'Country',\\\\n  Region = 'Region',\\\\n  City = 'City',\\\\n}\\\\n\\\\nconst data = [\\\\n  {\\\\n    id: View.Country,\\\\n    label: '国家',\\\\n    task: countryTask,\\\\n  },\\\\n  {\\\\n    id: View.Region,\\\\n    label: '区域',\\\\n    task: regionTask,\\\\n  },\\\\n  {\\\\n    id: View.City,\\\\n    label: '城市',\\\\n    task: cityTask,\\\\n  },\\\\n];\\\\n\\\\nconst defaultValue = { value: '', dataSource: [] };\\\\nexport const 异步联动 = () => {\\\\n  const ref = useRef({\\\\n    view: (context) => {\\\\n      const { status, value, next } = context;\\\\n      return (\\\\n        <Select\\\\n          disabled={status === Status.Waiting || status === Status.Running}\\\\n          state={\\\\n            status === Status.Waiting || status === Status.Running\\\\n              ? 'loading'\\\\n              : undefined\\\\n          }\\\\n          showSearch\\\\n          value={value.value}\\\\n          dataSource={value.dataSource}\\\\n          onChange={(v) => {\\\\n            next({ ...value, value: v });\\\\n          }}\\\\n        ></Select>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              reaction={item.task}\\\\n              defaultValue={defaultValue}\\\\n              render={ref.current.view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 查询列表_作用域 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              scope={'filter'}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              defaultValue={defaultValue}\\\\n              render={SearchView}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <RdxView\\\\n        id={'SearchButton'}\\\\n        render={SearchButtonView}\\\\n        scope={'filter'}\\\\n        deps={data.map((item) => ({ id: item.id }))}\\\\n      ></RdxView>\\\\n      <RdxView\\\\n        id={'OutScope'}\\\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\\\n        render={OutScopeView}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\nconst SearchView = (context: DataContext<any, any, any>) => {\\\\n  const { status, value, next } = context;\\\\n  return (\\\\n    <Select\\\\n      disabled={status === Status.Waiting || status === Status.Running}\\\\n      state={status === Status.Waiting ? 'loading' : undefined}\\\\n      showSearch\\\\n      value={value.value}\\\\n      dataSource={[\\\\n        { label: 'A', value: 'A' },\\\\n        { label: 'B', value: 'B' },\\\\n        { label: 'C', value: 'C' },\\\\n      ]}\\\\n      onChange={(v) => {\\\\n        next({ ...value, value: v });\\\\n      }}\\\\n    ></Select>\\\\n  );\\\\n};\\\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\\\n  const { mergeScopeState2Global, next, depsValues } = context;\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        type='primary'\\\\n        onClick={() => {\\\\n          mergeScopeState2Global();\\\\n        }}\\\\n      >\\\\n        查询\\\\n      </Button>\\\\n      <br />\\\\n      <strong>筛选区域内：</strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  return (\\\\n    <>\\\\n      <strong>外部： </strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-联动-rdx版本--同步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":173},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":173}},\\\"场景示例-联动-rdx版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":302},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":302}},\\\"场景示例-联动-rdx版本--查询列表-作用域\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":336},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":336}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/cascader.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  Status,\\\\n  ReactionContext,\\\\n  DataContext,\\\\n} from '@czwcode/rdx';\\\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\\\nimport axios from 'axios';\\\\nimport { useCallback } from 'react';\\\\nimport ReactJsonView from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|联动|Rdx版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\nconst { Row, Col } = Grid;\\\\n\\\\nexport const 同步联动 = () => {\\\\n  interface TreeNode {\\\\n    label: string;\\\\n    value: string;\\\\n    children: TreeNode[];\\\\n  }\\\\n  interface TaskValue {\\\\n    chooseValue: string;\\\\n    dataSource: TreeNode[];\\\\n  }\\\\n  enum AdministrativeRegions {\\\\n    // 省\\\\n    Province = 'province',\\\\n    // 市\\\\n    City = 'city',\\\\n    // 区\\\\n    Area = 'area',\\\\n  }\\\\n  const provinceTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { value, updateState: udpateState } = context;\\\\n      const res = await axios.get(\\\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\\\n      );\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: res.data,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const provinceView = useCallback(\\\\n    (context: DataContext<TaskValue, any, any>) => {\\\\n      const { next, next: updateState, value, status } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '空白状态';\\\\n      }\\\\n      if (status === Status.Waiting) {\\\\n        return '加载状态';\\\\n      }\\\\n      if (status === Status.Error) {\\\\n        return '错误状态';\\\\n      }\\\\n      const { dataSource, chooseValue } = value;\\\\n\\\\n      return (\\\\n        <Menu\\\\n          onItemClick={(key) => {\\\\n            next({\\\\n              ...value,\\\\n              chooseValue: key,\\\\n            });\\\\n          }}\\\\n          selectMode={'single'}\\\\n          selectedKeys={chooseValue}\\\\n          style={{ width: 100 }}\\\\n        >\\\\n          {dataSource.map((item) => (\\\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n          ))}\\\\n        </Menu>\\\\n      );\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [preLevelValue = {}] = depsValues;\\\\n      const { dataSource = [], chooseValue } = preLevelValue;\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\\\n          ?.children,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherDefines = [\\\\n    {\\\\n      key: AdministrativeRegions.City,\\\\n      relyTaskKey: AdministrativeRegions.Province,\\\\n    },\\\\n    {\\\\n      key: AdministrativeRegions.Area,\\\\n      relyTaskKey: AdministrativeRegions.City,\\\\n    },\\\\n  ];\\\\n\\\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\\\n    const { next: updateState, next, value, status } = context;\\\\n    if (status === Status.FirstRender) {\\\\n      return '空白状态';\\\\n    }\\\\n    if (status === Status.Waiting) {\\\\n      return '加载状态';\\\\n    }\\\\n    if (status === Status.Error) {\\\\n      return '错误状态';\\\\n    }\\\\n    const { dataSource, chooseValue } = value;\\\\n    if (!dataSource) {\\\\n      return '';\\\\n    }\\\\n    return (\\\\n      <Menu\\\\n        onItemClick={(key) => {\\\\n          next({\\\\n            ...value,\\\\n            chooseValue: key,\\\\n          });\\\\n        }}\\\\n        selectMode={'single'}\\\\n        selectedKeys={chooseValue}\\\\n        style={{ width: 100 }}\\\\n      >\\\\n        {dataSource.map((item) => (\\\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n        ))}\\\\n      </Menu>\\\\n    );\\\\n  };\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <Row>\\\\n        <Col>\\\\n          <RdxView<TaskValue, any, any, any>\\\\n            id={AdministrativeRegions.Province}\\\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n            reaction={provinceTask}\\\\n            render={provinceView}\\\\n          ></RdxView>\\\\n        </Col>\\\\n        {otherDefines.map((item) => (\\\\n          <Col>\\\\n            <RdxView<TaskValue, any, any, any>\\\\n              id={item.key}\\\\n              deps={[{ id: item.relyTaskKey }]}\\\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n              reaction={otherTask}\\\\n              render={otherTaskView}\\\\n            ></RdxView>\\\\n          </Col>\\\\n        ))}\\\\n      </Row>\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n/**\\\\n *\\\\n *\\\\n * @interface Model\\\\n */\\\\ninterface Model {\\\\n  dataSource: { label: string; value: string }[];\\\\n  value: string;\\\\n}\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst produceTask = (\\\\n  data: any[],\\\\n  filter: (v: any, depsValues: Model[]) => boolean,\\\\n  formatter: (data: any[]) => { label: string; value: string }[]\\\\n) => async (context: ReactionContext<Model, any, any>) => {\\\\n  const { value, depsValues, updateState: udpateState } = context;\\\\n  const newData = data.filter((value) => {\\\\n    const bool = filter(value, depsValues);\\\\n    return bool;\\\\n  });\\\\n  const newDataSource = formatter(newData);\\\\n  await pause(2000);\\\\n  udpateState({\\\\n    ...value,\\\\n    value: newDataSource[0] && newDataSource[0].value,\\\\n    dataSource: newDataSource,\\\\n  });\\\\n};\\\\nconst countryTask = produceTask(\\\\n  province,\\\\n  (relyValues) => {\\\\n    return true;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\\\n  }\\\\n);\\\\nconst regionTask = produceTask(\\\\n  city,\\\\n  (v, depsValues) => {\\\\n    const [province] = depsValues;\\\\n    return v.province === province.value;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\\\n  }\\\\n);\\\\nconst cityTask = produceTask(\\\\n  area,\\\\n  (v, depsValues) => {\\\\n    const [province, city] = depsValues;\\\\n    return (\\\\n      (!province.value || v.province === province.value) &&\\\\n      (!city.value || v.city === city.value)\\\\n    );\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\\\n  }\\\\n);\\\\nenum View {\\\\n  Country = 'Country',\\\\n  Region = 'Region',\\\\n  City = 'City',\\\\n}\\\\n\\\\nconst data = [\\\\n  {\\\\n    id: View.Country,\\\\n    label: '国家',\\\\n    task: countryTask,\\\\n  },\\\\n  {\\\\n    id: View.Region,\\\\n    label: '区域',\\\\n    task: regionTask,\\\\n  },\\\\n  {\\\\n    id: View.City,\\\\n    label: '城市',\\\\n    task: cityTask,\\\\n  },\\\\n];\\\\n\\\\nconst defaultValue = { value: '', dataSource: [] };\\\\nexport const 异步联动 = () => {\\\\n  const ref = useRef({\\\\n    view: (context) => {\\\\n      const { status, value, next } = context;\\\\n      return (\\\\n        <Select\\\\n          disabled={status === Status.Waiting || status === Status.Running}\\\\n          state={\\\\n            status === Status.Waiting || status === Status.Running\\\\n              ? 'loading'\\\\n              : undefined\\\\n          }\\\\n          showSearch\\\\n          value={value.value}\\\\n          dataSource={value.dataSource}\\\\n          onChange={(v) => {\\\\n            next({ ...value, value: v });\\\\n          }}\\\\n        ></Select>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              reaction={item.task}\\\\n              defaultValue={defaultValue}\\\\n              render={ref.current.view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 查询列表_作用域 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              scope={'filter'}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              defaultValue={defaultValue}\\\\n              render={SearchView}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <RdxView\\\\n        id={'SearchButton'}\\\\n        render={SearchButtonView}\\\\n        scope={'filter'}\\\\n        deps={data.map((item) => ({ id: item.id }))}\\\\n      ></RdxView>\\\\n      <RdxView\\\\n        id={'OutScope'}\\\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\\\n        render={OutScopeView}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\nconst SearchView = (context: DataContext<any, any, any>) => {\\\\n  const { status, value, next } = context;\\\\n  return (\\\\n    <Select\\\\n      disabled={status === Status.Waiting || status === Status.Running}\\\\n      state={status === Status.Waiting ? 'loading' : undefined}\\\\n      showSearch\\\\n      value={value.value}\\\\n      dataSource={[\\\\n        { label: 'A', value: 'A' },\\\\n        { label: 'B', value: 'B' },\\\\n        { label: 'C', value: 'C' },\\\\n      ]}\\\\n      onChange={(v) => {\\\\n        next({ ...value, value: v });\\\\n      }}\\\\n    ></Select>\\\\n  );\\\\n};\\\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\\\n  const { mergeScopeState2Global, next, depsValues } = context;\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        type='primary'\\\\n        onClick={() => {\\\\n          mergeScopeState2Global();\\\\n        }}\\\\n      >\\\\n        查询\\\\n      </Button>\\\\n      <br />\\\\n      <strong>筛选区域内：</strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  return (\\\\n    <>\\\\n      <strong>外部： </strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-联动-rdx版本--同步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":173},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":173}},\\\"场景示例-联动-rdx版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":302},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":302}},\\\"场景示例-联动-rdx版本--查询列表-作用域\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":336},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":336}}}},\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = addSourceDecorator(() => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 查询列表_作用域 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":47},\"endLoc\":{\"col\":139,\"line\":195},\"startBody\":{\"col\":20,\"line\":47},\"endBody\":{\"col\":139,\"line\":195}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":282},\"endLoc\":{\"col\":139,\"line\":324},\"startBody\":{\"col\":20,\"line\":282},\"endBody\":{\"col\":139,\"line\":324}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":326},\"endLoc\":{\"col\":139,\"line\":358},\"startBody\":{\"col\":24,\"line\":326},\"endBody\":{\"col\":139,\"line\":358}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascader.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = () => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = () => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 查询列表_作用域 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":25},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":20,\"line\":25},\"endBody\":{\"col\":1,\"line\":173}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":260},\"endLoc\":{\"col\":1,\"line\":302},\"startBody\":{\"col\":20,\"line\":260},\"endBody\":{\"col\":1,\"line\":302}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":304},\"endLoc\":{\"col\":1,\"line\":336},\"startBody\":{\"col\":24,\"line\":304},\"endBody\":{\"col\":1,\"line\":336}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascader.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  Status,\n  ReactionContext,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport ReactJsonView from 'react-json-view';\nexport default {\n  title: '场景示例|联动|Rdx版本',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  Status,\\\\n  ReactionContext,\\\\n  DataContext,\\\\n} from '@czwcode/rdx';\\\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\\\nimport axios from 'axios';\\\\nimport { useCallback } from 'react';\\\\nimport ReactJsonView from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|联动|Rdx版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\nconst { Row, Col } = Grid;\\\\n\\\\nexport const 同步联动 = () => {\\\\n  interface TreeNode {\\\\n    label: string;\\\\n    value: string;\\\\n    children: TreeNode[];\\\\n  }\\\\n  interface TaskValue {\\\\n    chooseValue: string;\\\\n    dataSource: TreeNode[];\\\\n  }\\\\n  enum AdministrativeRegions {\\\\n    // 省\\\\n    Province = 'province',\\\\n    // 市\\\\n    City = 'city',\\\\n    // 区\\\\n    Area = 'area',\\\\n  }\\\\n  const provinceTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { value, updateState: udpateState } = context;\\\\n      const res = await axios.get(\\\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\\\n      );\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: res.data,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const provinceView = useCallback(\\\\n    (context: DataContext<TaskValue, any, any>) => {\\\\n      const { next, next: updateState, value, status } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '空白状态';\\\\n      }\\\\n      if (status === Status.Waiting) {\\\\n        return '加载状态';\\\\n      }\\\\n      if (status === Status.Error) {\\\\n        return '错误状态';\\\\n      }\\\\n      const { dataSource, chooseValue } = value;\\\\n\\\\n      return (\\\\n        <Menu\\\\n          onItemClick={(key) => {\\\\n            next({\\\\n              ...value,\\\\n              chooseValue: key,\\\\n            });\\\\n          }}\\\\n          selectMode={'single'}\\\\n          selectedKeys={chooseValue}\\\\n          style={{ width: 100 }}\\\\n        >\\\\n          {dataSource.map((item) => (\\\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n          ))}\\\\n        </Menu>\\\\n      );\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [preLevelValue = {}] = depsValues;\\\\n      const { dataSource = [], chooseValue } = preLevelValue;\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\\\n          ?.children,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherDefines = [\\\\n    {\\\\n      key: AdministrativeRegions.City,\\\\n      relyTaskKey: AdministrativeRegions.Province,\\\\n    },\\\\n    {\\\\n      key: AdministrativeRegions.Area,\\\\n      relyTaskKey: AdministrativeRegions.City,\\\\n    },\\\\n  ];\\\\n\\\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\\\n    const { next: updateState, next, value, status } = context;\\\\n    if (status === Status.FirstRender) {\\\\n      return '空白状态';\\\\n    }\\\\n    if (status === Status.Waiting) {\\\\n      return '加载状态';\\\\n    }\\\\n    if (status === Status.Error) {\\\\n      return '错误状态';\\\\n    }\\\\n    const { dataSource, chooseValue } = value;\\\\n    if (!dataSource) {\\\\n      return '';\\\\n    }\\\\n    return (\\\\n      <Menu\\\\n        onItemClick={(key) => {\\\\n          next({\\\\n            ...value,\\\\n            chooseValue: key,\\\\n          });\\\\n        }}\\\\n        selectMode={'single'}\\\\n        selectedKeys={chooseValue}\\\\n        style={{ width: 100 }}\\\\n      >\\\\n        {dataSource.map((item) => (\\\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n        ))}\\\\n      </Menu>\\\\n    );\\\\n  };\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <Row>\\\\n        <Col>\\\\n          <RdxView<TaskValue, any, any, any>\\\\n            id={AdministrativeRegions.Province}\\\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n            reaction={provinceTask}\\\\n            render={provinceView}\\\\n          ></RdxView>\\\\n        </Col>\\\\n        {otherDefines.map((item) => (\\\\n          <Col>\\\\n            <RdxView<TaskValue, any, any, any>\\\\n              id={item.key}\\\\n              deps={[{ id: item.relyTaskKey }]}\\\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n              reaction={otherTask}\\\\n              render={otherTaskView}\\\\n            ></RdxView>\\\\n          </Col>\\\\n        ))}\\\\n      </Row>\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n/**\\\\n *\\\\n *\\\\n * @interface Model\\\\n */\\\\ninterface Model {\\\\n  dataSource: { label: string; value: string }[];\\\\n  value: string;\\\\n}\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst produceTask = (\\\\n  data: any[],\\\\n  filter: (v: any, depsValues: Model[]) => boolean,\\\\n  formatter: (data: any[]) => { label: string; value: string }[]\\\\n) => async (context: ReactionContext<Model, any, any>) => {\\\\n  const { value, depsValues, updateState: udpateState } = context;\\\\n  const newData = data.filter((value) => {\\\\n    const bool = filter(value, depsValues);\\\\n    return bool;\\\\n  });\\\\n  const newDataSource = formatter(newData);\\\\n  await pause(2000);\\\\n  udpateState({\\\\n    ...value,\\\\n    value: newDataSource[0] && newDataSource[0].value,\\\\n    dataSource: newDataSource,\\\\n  });\\\\n};\\\\nconst countryTask = produceTask(\\\\n  province,\\\\n  (relyValues) => {\\\\n    return true;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\\\n  }\\\\n);\\\\nconst regionTask = produceTask(\\\\n  city,\\\\n  (v, depsValues) => {\\\\n    const [province] = depsValues;\\\\n    return v.province === province.value;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\\\n  }\\\\n);\\\\nconst cityTask = produceTask(\\\\n  area,\\\\n  (v, depsValues) => {\\\\n    const [province, city] = depsValues;\\\\n    return (\\\\n      (!province.value || v.province === province.value) &&\\\\n      (!city.value || v.city === city.value)\\\\n    );\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\\\n  }\\\\n);\\\\nenum View {\\\\n  Country = 'Country',\\\\n  Region = 'Region',\\\\n  City = 'City',\\\\n}\\\\n\\\\nconst data = [\\\\n  {\\\\n    id: View.Country,\\\\n    label: '国家',\\\\n    task: countryTask,\\\\n  },\\\\n  {\\\\n    id: View.Region,\\\\n    label: '区域',\\\\n    task: regionTask,\\\\n  },\\\\n  {\\\\n    id: View.City,\\\\n    label: '城市',\\\\n    task: cityTask,\\\\n  },\\\\n];\\\\n\\\\nconst defaultValue = { value: '', dataSource: [] };\\\\nexport const 异步联动 = () => {\\\\n  const ref = useRef({\\\\n    view: (context) => {\\\\n      const { status, value, next } = context;\\\\n      return (\\\\n        <Select\\\\n          disabled={status === Status.Waiting || status === Status.Running}\\\\n          state={\\\\n            status === Status.Waiting || status === Status.Running\\\\n              ? 'loading'\\\\n              : undefined\\\\n          }\\\\n          showSearch\\\\n          value={value.value}\\\\n          dataSource={value.dataSource}\\\\n          onChange={(v) => {\\\\n            next({ ...value, value: v });\\\\n          }}\\\\n        ></Select>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              reaction={item.task}\\\\n              defaultValue={defaultValue}\\\\n              render={ref.current.view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 查询列表_作用域 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              scope={'filter'}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              defaultValue={defaultValue}\\\\n              render={SearchView}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <RdxView\\\\n        id={'SearchButton'}\\\\n        render={SearchButtonView}\\\\n        scope={'filter'}\\\\n        deps={data.map((item) => ({ id: item.id }))}\\\\n      ></RdxView>\\\\n      <RdxView\\\\n        id={'OutScope'}\\\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\\\n        render={OutScopeView}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\nconst SearchView = (context: DataContext<any, any, any>) => {\\\\n  const { status, value, next } = context;\\\\n  return (\\\\n    <Select\\\\n      disabled={status === Status.Waiting || status === Status.Running}\\\\n      state={status === Status.Waiting ? 'loading' : undefined}\\\\n      showSearch\\\\n      value={value.value}\\\\n      dataSource={[\\\\n        { label: 'A', value: 'A' },\\\\n        { label: 'B', value: 'B' },\\\\n        { label: 'C', value: 'C' },\\\\n      ]}\\\\n      onChange={(v) => {\\\\n        next({ ...value, value: v });\\\\n      }}\\\\n    ></Select>\\\\n  );\\\\n};\\\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\\\n  const { mergeScopeState2Global, next, depsValues } = context;\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        type='primary'\\\\n        onClick={() => {\\\\n          mergeScopeState2Global();\\\\n        }}\\\\n      >\\\\n        查询\\\\n      </Button>\\\\n      <br />\\\\n      <strong>筛选区域内：</strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  return (\\\\n    <>\\\\n      <strong>外部： </strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-联动-rdx版本--同步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":173},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":173}},\\\"场景示例-联动-rdx版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":302},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":302}},\\\"场景示例-联动-rdx版本--查询列表-作用域\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":336},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":336}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/cascader.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  Status,\\\\n  ReactionContext,\\\\n  DataContext,\\\\n} from '@czwcode/rdx';\\\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\\\nimport axios from 'axios';\\\\nimport { useCallback } from 'react';\\\\nimport ReactJsonView from 'react-json-view';\\\\nexport default {\\\\n  title: '场景示例|联动|Rdx版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\nconst { Row, Col } = Grid;\\\\n\\\\nexport const 同步联动 = () => {\\\\n  interface TreeNode {\\\\n    label: string;\\\\n    value: string;\\\\n    children: TreeNode[];\\\\n  }\\\\n  interface TaskValue {\\\\n    chooseValue: string;\\\\n    dataSource: TreeNode[];\\\\n  }\\\\n  enum AdministrativeRegions {\\\\n    // 省\\\\n    Province = 'province',\\\\n    // 市\\\\n    City = 'city',\\\\n    // 区\\\\n    Area = 'area',\\\\n  }\\\\n  const provinceTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { value, updateState: udpateState } = context;\\\\n      const res = await axios.get(\\\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\\\n      );\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: res.data,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const provinceView = useCallback(\\\\n    (context: DataContext<TaskValue, any, any>) => {\\\\n      const { next, next: updateState, value, status } = context;\\\\n      if (status === Status.FirstRender) {\\\\n        return '空白状态';\\\\n      }\\\\n      if (status === Status.Waiting) {\\\\n        return '加载状态';\\\\n      }\\\\n      if (status === Status.Error) {\\\\n        return '错误状态';\\\\n      }\\\\n      const { dataSource, chooseValue } = value;\\\\n\\\\n      return (\\\\n        <Menu\\\\n          onItemClick={(key) => {\\\\n            next({\\\\n              ...value,\\\\n              chooseValue: key,\\\\n            });\\\\n          }}\\\\n          selectMode={'single'}\\\\n          selectedKeys={chooseValue}\\\\n          style={{ width: 100 }}\\\\n        >\\\\n          {dataSource.map((item) => (\\\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n          ))}\\\\n        </Menu>\\\\n      );\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherTask = useCallback(\\\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [preLevelValue = {}] = depsValues;\\\\n      const { dataSource = [], chooseValue } = preLevelValue;\\\\n      udpateState({\\\\n        ...value,\\\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\\\n          ?.children,\\\\n      });\\\\n    },\\\\n    []\\\\n  );\\\\n  const otherDefines = [\\\\n    {\\\\n      key: AdministrativeRegions.City,\\\\n      relyTaskKey: AdministrativeRegions.Province,\\\\n    },\\\\n    {\\\\n      key: AdministrativeRegions.Area,\\\\n      relyTaskKey: AdministrativeRegions.City,\\\\n    },\\\\n  ];\\\\n\\\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\\\n    const { next: updateState, next, value, status } = context;\\\\n    if (status === Status.FirstRender) {\\\\n      return '空白状态';\\\\n    }\\\\n    if (status === Status.Waiting) {\\\\n      return '加载状态';\\\\n    }\\\\n    if (status === Status.Error) {\\\\n      return '错误状态';\\\\n    }\\\\n    const { dataSource, chooseValue } = value;\\\\n    if (!dataSource) {\\\\n      return '';\\\\n    }\\\\n    return (\\\\n      <Menu\\\\n        onItemClick={(key) => {\\\\n          next({\\\\n            ...value,\\\\n            chooseValue: key,\\\\n          });\\\\n        }}\\\\n        selectMode={'single'}\\\\n        selectedKeys={chooseValue}\\\\n        style={{ width: 100 }}\\\\n      >\\\\n        {dataSource.map((item) => (\\\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\\\n        ))}\\\\n      </Menu>\\\\n    );\\\\n  };\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <Row>\\\\n        <Col>\\\\n          <RdxView<TaskValue, any, any, any>\\\\n            id={AdministrativeRegions.Province}\\\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n            reaction={provinceTask}\\\\n            render={provinceView}\\\\n          ></RdxView>\\\\n        </Col>\\\\n        {otherDefines.map((item) => (\\\\n          <Col>\\\\n            <RdxView<TaskValue, any, any, any>\\\\n              id={item.key}\\\\n              deps={[{ id: item.relyTaskKey }]}\\\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\\\n              reaction={otherTask}\\\\n              render={otherTaskView}\\\\n            ></RdxView>\\\\n          </Col>\\\\n        ))}\\\\n      </Row>\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n/**\\\\n *\\\\n *\\\\n * @interface Model\\\\n */\\\\ninterface Model {\\\\n  dataSource: { label: string; value: string }[];\\\\n  value: string;\\\\n}\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst produceTask = (\\\\n  data: any[],\\\\n  filter: (v: any, depsValues: Model[]) => boolean,\\\\n  formatter: (data: any[]) => { label: string; value: string }[]\\\\n) => async (context: ReactionContext<Model, any, any>) => {\\\\n  const { value, depsValues, updateState: udpateState } = context;\\\\n  const newData = data.filter((value) => {\\\\n    const bool = filter(value, depsValues);\\\\n    return bool;\\\\n  });\\\\n  const newDataSource = formatter(newData);\\\\n  await pause(2000);\\\\n  udpateState({\\\\n    ...value,\\\\n    value: newDataSource[0] && newDataSource[0].value,\\\\n    dataSource: newDataSource,\\\\n  });\\\\n};\\\\nconst countryTask = produceTask(\\\\n  province,\\\\n  (relyValues) => {\\\\n    return true;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\\\n  }\\\\n);\\\\nconst regionTask = produceTask(\\\\n  city,\\\\n  (v, depsValues) => {\\\\n    const [province] = depsValues;\\\\n    return v.province === province.value;\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\\\n  }\\\\n);\\\\nconst cityTask = produceTask(\\\\n  area,\\\\n  (v, depsValues) => {\\\\n    const [province, city] = depsValues;\\\\n    return (\\\\n      (!province.value || v.province === province.value) &&\\\\n      (!city.value || v.city === city.value)\\\\n    );\\\\n  },\\\\n  (data) => {\\\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\\\n  }\\\\n);\\\\nenum View {\\\\n  Country = 'Country',\\\\n  Region = 'Region',\\\\n  City = 'City',\\\\n}\\\\n\\\\nconst data = [\\\\n  {\\\\n    id: View.Country,\\\\n    label: '国家',\\\\n    task: countryTask,\\\\n  },\\\\n  {\\\\n    id: View.Region,\\\\n    label: '区域',\\\\n    task: regionTask,\\\\n  },\\\\n  {\\\\n    id: View.City,\\\\n    label: '城市',\\\\n    task: cityTask,\\\\n  },\\\\n];\\\\n\\\\nconst defaultValue = { value: '', dataSource: [] };\\\\nexport const 异步联动 = () => {\\\\n  const ref = useRef({\\\\n    view: (context) => {\\\\n      const { status, value, next } = context;\\\\n      return (\\\\n        <Select\\\\n          disabled={status === Status.Waiting || status === Status.Running}\\\\n          state={\\\\n            status === Status.Waiting || status === Status.Running\\\\n              ? 'loading'\\\\n              : undefined\\\\n          }\\\\n          showSearch\\\\n          value={value.value}\\\\n          dataSource={value.dataSource}\\\\n          onChange={(v) => {\\\\n            next({ ...value, value: v });\\\\n          }}\\\\n        ></Select>\\\\n      );\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              reaction={item.task}\\\\n              defaultValue={defaultValue}\\\\n              render={ref.current.view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 查询列表_作用域 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<Model, any, any, any>\\\\n              id={item.id}\\\\n              scope={'filter'}\\\\n              deps={depsIds.map((item) => ({ id: item }))}\\\\n              defaultValue={defaultValue}\\\\n              render={SearchView}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <RdxView\\\\n        id={'SearchButton'}\\\\n        render={SearchButtonView}\\\\n        scope={'filter'}\\\\n        deps={data.map((item) => ({ id: item.id }))}\\\\n      ></RdxView>\\\\n      <RdxView\\\\n        id={'OutScope'}\\\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\\\n        render={OutScopeView}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\nconst SearchView = (context: DataContext<any, any, any>) => {\\\\n  const { status, value, next } = context;\\\\n  return (\\\\n    <Select\\\\n      disabled={status === Status.Waiting || status === Status.Running}\\\\n      state={status === Status.Waiting ? 'loading' : undefined}\\\\n      showSearch\\\\n      value={value.value}\\\\n      dataSource={[\\\\n        { label: 'A', value: 'A' },\\\\n        { label: 'B', value: 'B' },\\\\n        { label: 'C', value: 'C' },\\\\n      ]}\\\\n      onChange={(v) => {\\\\n        next({ ...value, value: v });\\\\n      }}\\\\n    ></Select>\\\\n  );\\\\n};\\\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\\\n  const { mergeScopeState2Global, next, depsValues } = context;\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        type='primary'\\\\n        onClick={() => {\\\\n          mergeScopeState2Global();\\\\n        }}\\\\n      >\\\\n        查询\\\\n      </Button>\\\\n      <br />\\\\n      <strong>筛选区域内：</strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  return (\\\\n    <>\\\\n      <strong>外部： </strong>\\\\n      <ReactJsonView src={depsValues} />\\\\n    </>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-联动-rdx版本--同步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":173},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":25},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":173}},\\\"场景示例-联动-rdx版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":302},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":260},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":302}},\\\"场景示例-联动-rdx版本--查询列表-作用域\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":336},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":304},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":336}}}},\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = addSourceDecorator(() => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 查询列表_作用域 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":47},\"endLoc\":{\"col\":139,\"line\":195},\"startBody\":{\"col\":20,\"line\":47},\"endBody\":{\"col\":139,\"line\":195}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":282},\"endLoc\":{\"col\":139,\"line\":324},\"startBody\":{\"col\":20,\"line\":282},\"endBody\":{\"col\":139,\"line\":324}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":326},\"endLoc\":{\"col\":139,\"line\":358},\"startBody\":{\"col\":24,\"line\":326},\"endBody\":{\"col\":139,\"line\":358}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = () => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = () => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 查询列表_作用域 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":25},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":20,\"line\":25},\"endBody\":{\"col\":1,\"line\":173}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":260},\"endLoc\":{\"col\":1,\"line\":302},\"startBody\":{\"col\":20,\"line\":260},\"endBody\":{\"col\":1,\"line\":302}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":304},\"endLoc\":{\"col\":1,\"line\":336},\"startBody\":{\"col\":24,\"line\":304},\"endBody\":{\"col\":1,\"line\":336}}}},\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\nconst { Row, Col } = Grid;\n\nexport const 同步联动 = addSourceDecorator(addSourceDecorator(() => {\n  interface TreeNode {\n    label: string;\n    value: string;\n    children: TreeNode[];\n  }\n  interface TaskValue {\n    chooseValue: string;\n    dataSource: TreeNode[];\n  }\n  enum AdministrativeRegions {\n    // 省\n    Province = 'province',\n    // 市\n    City = 'city',\n    // 区\n    Area = 'area',\n  }\n  const provinceTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { value, updateState: udpateState } = context;\n      const res = await axios.get(\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\n      );\n      udpateState({\n        ...value,\n        dataSource: res.data,\n      });\n    },\n    []\n  );\n  const provinceView = useCallback(\n    (context: DataContext<TaskValue, any, any>) => {\n      const { next, next: updateState, value, status } = context;\n      if (status === Status.FirstRender) {\n        return '空白状态';\n      }\n      if (status === Status.Waiting) {\n        return '加载状态';\n      }\n      if (status === Status.Error) {\n        return '错误状态';\n      }\n      const { dataSource, chooseValue } = value;\n\n      return (\n        <Menu\n          onItemClick={(key) => {\n            next({\n              ...value,\n              chooseValue: key,\n            });\n          }}\n          selectMode={'single'}\n          selectedKeys={chooseValue}\n          style={{ width: 100 }}\n        >\n          {dataSource.map((item) => (\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\n          ))}\n        </Menu>\n      );\n    },\n    []\n  );\n  const otherTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [preLevelValue = {}] = depsValues;\n      const { dataSource = [], chooseValue } = preLevelValue;\n      udpateState({\n        ...value,\n        dataSource: dataSource.find((item) => item.value === chooseValue)\n          ?.children,\n      });\n    },\n    []\n  );\n  const otherDefines = [\n    {\n      key: AdministrativeRegions.City,\n      relyTaskKey: AdministrativeRegions.Province,\n    },\n    {\n      key: AdministrativeRegions.Area,\n      relyTaskKey: AdministrativeRegions.City,\n    },\n  ];\n\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\n    const { next: updateState, next, value, status } = context;\n    if (status === Status.FirstRender) {\n      return '空白状态';\n    }\n    if (status === Status.Waiting) {\n      return '加载状态';\n    }\n    if (status === Status.Error) {\n      return '错误状态';\n    }\n    const { dataSource, chooseValue } = value;\n    if (!dataSource) {\n      return '';\n    }\n    return (\n      <Menu\n        onItemClick={(key) => {\n          next({\n            ...value,\n            chooseValue: key,\n          });\n        }}\n        selectMode={'single'}\n        selectedKeys={chooseValue}\n        style={{ width: 100 }}\n      >\n        {dataSource.map((item) => (\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <RdxContext onChange={() => {}}>\n      <Row>\n        <Col>\n          <RdxView<TaskValue, any, any, any>\n            id={AdministrativeRegions.Province}\n            defaultValue={{ dataSource: [], chooseValue: '' }}\n            reaction={provinceTask}\n            render={provinceView}\n          ></RdxView>\n        </Col>\n        {otherDefines.map((item) => (\n          <Col>\n            <RdxView<TaskValue, any, any, any>\n              id={item.key}\n              deps={[{ id: item.relyTaskKey }]}\n              defaultValue={{ dataSource: [], chooseValue: '' }}\n              reaction={otherTask}\n              render={otherTaskView}\n            ></RdxView>\n          </Col>\n        ))}\n      </Row>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n/**\n *\n *\n * @interface Model\n */\ninterface Model {\n  dataSource: { label: string; value: string }[];\n  value: string;\n}\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst produceTask = (\n  data: any[],\n  filter: (v: any, depsValues: Model[]) => boolean,\n  formatter: (data: any[]) => { label: string; value: string }[]\n) => async (context: ReactionContext<Model, any, any>) => {\n  const { value, depsValues, updateState: udpateState } = context;\n  const newData = data.filter((value) => {\n    const bool = filter(value, depsValues);\n    return bool;\n  });\n  const newDataSource = formatter(newData);\n  await pause(2000);\n  udpateState({\n    ...value,\n    value: newDataSource[0] && newDataSource[0].value,\n    dataSource: newDataSource,\n  });\n};\nconst countryTask = produceTask(\n  province,\n  (relyValues) => {\n    return true;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.province }));\n  }\n);\nconst regionTask = produceTask(\n  city,\n  (v, depsValues) => {\n    const [province] = depsValues;\n    return v.province === province.value;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.city }));\n  }\n);\nconst cityTask = produceTask(\n  area,\n  (v, depsValues) => {\n    const [province, city] = depsValues;\n    return (\n      (!province.value || v.province === province.value) &&\n      (!city.value || v.city === city.value)\n    );\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.area }));\n  }\n);\nenum View {\n  Country = 'Country',\n  Region = 'Region',\n  City = 'City',\n}\n\nconst data = [\n  {\n    id: View.Country,\n    label: '国家',\n    task: countryTask,\n  },\n  {\n    id: View.Region,\n    label: '区域',\n    task: regionTask,\n  },\n  {\n    id: View.City,\n    label: '城市',\n    task: cityTask,\n  },\n];\n\nconst defaultValue = { value: '', dataSource: [] };\nexport const 异步联动 = addSourceDecorator(addSourceDecorator(() => {\n  const ref = useRef({\n    view: (context) => {\n      const { status, value, next } = context;\n      return (\n        <Select\n          disabled={status === Status.Waiting || status === Status.Running}\n          state={\n            status === Status.Waiting || status === Status.Running\n              ? 'loading'\n              : undefined\n          }\n          showSearch\n          value={value.value}\n          dataSource={value.dataSource}\n          onChange={(v) => {\n            next({ ...value, value: v });\n          }}\n        ></Select>\n      );\n    },\n  });\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              deps={depsIds.map((item) => ({ id: item }))}\n              reaction={item.task}\n              defaultValue={defaultValue}\n              render={ref.current.view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 查询列表_作用域 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              scope={'filter'}\n              deps={depsIds.map((item) => ({ id: item }))}\n              defaultValue={defaultValue}\n              render={SearchView}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <RdxView\n        id={'SearchButton'}\n        render={SearchButtonView}\n        scope={'filter'}\n        deps={data.map((item) => ({ id: item.id }))}\n      ></RdxView>\n      <RdxView\n        id={'OutScope'}\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\n        render={OutScopeView}\n      />\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\nconst SearchView = (context: DataContext<any, any, any>) => {\n  const { status, value, next } = context;\n  return (\n    <Select\n      disabled={status === Status.Waiting || status === Status.Running}\n      state={status === Status.Waiting ? 'loading' : undefined}\n      showSearch\n      value={value.value}\n      dataSource={[\n        { label: 'A', value: 'A' },\n        { label: 'B', value: 'B' },\n        { label: 'C', value: 'C' },\n      ]}\n      onChange={(v) => {\n        next({ ...value, value: v });\n      }}\n    ></Select>\n  );\n};\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\n  const { mergeScopeState2Global, next, depsValues } = context;\n  return (\n    <div>\n      <Button\n        type='primary'\n        onClick={() => {\n          mergeScopeState2Global();\n        }}\n      >\n        查询\n      </Button>\n      <br />\n      <strong>筛选区域内：</strong>\n      <ReactJsonView src={depsValues} />\n    </div>\n  );\n};\nconst OutScopeView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  return (\n    <>\n      <strong>外部： </strong>\n      <ReactJsonView src={depsValues} />\n    </>\n  );\n};\n",locationsMap:{"场景示例-联动-rdx版本--同步联动":{startLoc:{col:20,line:69},endLoc:{col:277,line:217},startBody:{col:20,line:69},endBody:{col:277,line:217}},"场景示例-联动-rdx版本--异步联动":{startLoc:{col:20,line:304},endLoc:{col:277,line:346},startBody:{col:20,line:304},endBody:{col:277,line:346}},"场景示例-联动-rdx版本--查询列表-作用域":{startLoc:{col:24,line:348},endLoc:{col:277,line:380},startBody:{col:24,line:348},endBody:{col:277,line:380}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = () => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = () => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 查询列表_作用域 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":25},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":20,\"line\":25},\"endBody\":{\"col\":1,\"line\":173}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":260},\"endLoc\":{\"col\":1,\"line\":302},\"startBody\":{\"col\":20,\"line\":260},\"endBody\":{\"col\":1,\"line\":302}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":304},\"endLoc\":{\"col\":1,\"line\":336},\"startBody\":{\"col\":24,\"line\":304},\"endBody\":{\"col\":1,\"line\":336}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascader.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  Status,\n  ReactionContext,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport ReactJsonView from 'react-json-view';\nexport default {\n  title: '场景示例|联动|Rdx版本',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  Status,\\n  ReactionContext,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\\nimport axios from 'axios';\\nimport { useCallback } from 'react';\\nimport ReactJsonView from 'react-json-view';\\nexport default {\\n  title: '场景示例|联动|Rdx版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\nconst { Row, Col } = Grid;\\n\\nexport const 同步联动 = () => {\\n  interface TreeNode {\\n    label: string;\\n    value: string;\\n    children: TreeNode[];\\n  }\\n  interface TaskValue {\\n    chooseValue: string;\\n    dataSource: TreeNode[];\\n  }\\n  enum AdministrativeRegions {\\n    // 省\\n    Province = 'province',\\n    // 市\\n    City = 'city',\\n    // 区\\n    Area = 'area',\\n  }\\n  const provinceTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { value, updateState: udpateState } = context;\\n      const res = await axios.get(\\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\\n      );\\n      udpateState({\\n        ...value,\\n        dataSource: res.data,\\n      });\\n    },\\n    []\\n  );\\n  const provinceView = useCallback(\\n    (context: DataContext<TaskValue, any, any>) => {\\n      const { next, next: updateState, value, status } = context;\\n      if (status === Status.FirstRender) {\\n        return '空白状态';\\n      }\\n      if (status === Status.Waiting) {\\n        return '加载状态';\\n      }\\n      if (status === Status.Error) {\\n        return '错误状态';\\n      }\\n      const { dataSource, chooseValue } = value;\\n\\n      return (\\n        <Menu\\n          onItemClick={(key) => {\\n            next({\\n              ...value,\\n              chooseValue: key,\\n            });\\n          }}\\n          selectMode={'single'}\\n          selectedKeys={chooseValue}\\n          style={{ width: 100 }}\\n        >\\n          {dataSource.map((item) => (\\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n          ))}\\n        </Menu>\\n      );\\n    },\\n    []\\n  );\\n  const otherTask = useCallback(\\n    async (context: ReactionContext<TaskValue, any, any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [preLevelValue = {}] = depsValues;\\n      const { dataSource = [], chooseValue } = preLevelValue;\\n      udpateState({\\n        ...value,\\n        dataSource: dataSource.find((item) => item.value === chooseValue)\\n          ?.children,\\n      });\\n    },\\n    []\\n  );\\n  const otherDefines = [\\n    {\\n      key: AdministrativeRegions.City,\\n      relyTaskKey: AdministrativeRegions.Province,\\n    },\\n    {\\n      key: AdministrativeRegions.Area,\\n      relyTaskKey: AdministrativeRegions.City,\\n    },\\n  ];\\n\\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\\n    const { next: updateState, next, value, status } = context;\\n    if (status === Status.FirstRender) {\\n      return '空白状态';\\n    }\\n    if (status === Status.Waiting) {\\n      return '加载状态';\\n    }\\n    if (status === Status.Error) {\\n      return '错误状态';\\n    }\\n    const { dataSource, chooseValue } = value;\\n    if (!dataSource) {\\n      return '';\\n    }\\n    return (\\n      <Menu\\n        onItemClick={(key) => {\\n          next({\\n            ...value,\\n            chooseValue: key,\\n          });\\n        }}\\n        selectMode={'single'}\\n        selectedKeys={chooseValue}\\n        style={{ width: 100 }}\\n      >\\n        {dataSource.map((item) => (\\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\\n        ))}\\n      </Menu>\\n    );\\n  };\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <Row>\\n        <Col>\\n          <RdxView<TaskValue, any, any, any>\\n            id={AdministrativeRegions.Province}\\n            defaultValue={{ dataSource: [], chooseValue: '' }}\\n            reaction={provinceTask}\\n            render={provinceView}\\n          ></RdxView>\\n        </Col>\\n        {otherDefines.map((item) => (\\n          <Col>\\n            <RdxView<TaskValue, any, any, any>\\n              id={item.key}\\n              deps={[{ id: item.relyTaskKey }]}\\n              defaultValue={{ dataSource: [], chooseValue: '' }}\\n              reaction={otherTask}\\n              render={otherTaskView}\\n            ></RdxView>\\n          </Col>\\n        ))}\\n      </Row>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n/**\\n *\\n *\\n * @interface Model\\n */\\ninterface Model {\\n  dataSource: { label: string; value: string }[];\\n  value: string;\\n}\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst produceTask = (\\n  data: any[],\\n  filter: (v: any, depsValues: Model[]) => boolean,\\n  formatter: (data: any[]) => { label: string; value: string }[]\\n) => async (context: ReactionContext<Model, any, any>) => {\\n  const { value, depsValues, updateState: udpateState } = context;\\n  const newData = data.filter((value) => {\\n    const bool = filter(value, depsValues);\\n    return bool;\\n  });\\n  const newDataSource = formatter(newData);\\n  await pause(2000);\\n  udpateState({\\n    ...value,\\n    value: newDataSource[0] && newDataSource[0].value,\\n    dataSource: newDataSource,\\n  });\\n};\\nconst countryTask = produceTask(\\n  province,\\n  (relyValues) => {\\n    return true;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.province }));\\n  }\\n);\\nconst regionTask = produceTask(\\n  city,\\n  (v, depsValues) => {\\n    const [province] = depsValues;\\n    return v.province === province.value;\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.city }));\\n  }\\n);\\nconst cityTask = produceTask(\\n  area,\\n  (v, depsValues) => {\\n    const [province, city] = depsValues;\\n    return (\\n      (!province.value || v.province === province.value) &&\\n      (!city.value || v.city === city.value)\\n    );\\n  },\\n  (data) => {\\n    return data.map((item) => ({ label: item.name, value: item.area }));\\n  }\\n);\\nenum View {\\n  Country = 'Country',\\n  Region = 'Region',\\n  City = 'City',\\n}\\n\\nconst data = [\\n  {\\n    id: View.Country,\\n    label: '国家',\\n    task: countryTask,\\n  },\\n  {\\n    id: View.Region,\\n    label: '区域',\\n    task: regionTask,\\n  },\\n  {\\n    id: View.City,\\n    label: '城市',\\n    task: cityTask,\\n  },\\n];\\n\\nconst defaultValue = { value: '', dataSource: [] };\\nexport const 异步联动 = () => {\\n  const ref = useRef({\\n    view: (context) => {\\n      const { status, value, next } = context;\\n      return (\\n        <Select\\n          disabled={status === Status.Waiting || status === Status.Running}\\n          state={\\n            status === Status.Waiting || status === Status.Running\\n              ? 'loading'\\n              : undefined\\n          }\\n          showSearch\\n          value={value.value}\\n          dataSource={value.dataSource}\\n          onChange={(v) => {\\n            next({ ...value, value: v });\\n          }}\\n        ></Select>\\n      );\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              reaction={item.task}\\n              defaultValue={defaultValue}\\n              render={ref.current.view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 查询列表_作用域 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        const depsIds = data.slice(0, index).map((item) => item.id);\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<Model, any, any, any>\\n              id={item.id}\\n              scope={'filter'}\\n              deps={depsIds.map((item) => ({ id: item }))}\\n              defaultValue={defaultValue}\\n              render={SearchView}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <RdxView\\n        id={'SearchButton'}\\n        render={SearchButtonView}\\n        scope={'filter'}\\n        deps={data.map((item) => ({ id: item.id }))}\\n      ></RdxView>\\n      <RdxView\\n        id={'OutScope'}\\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\\n        render={OutScopeView}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\nconst SearchView = (context: DataContext<any, any, any>) => {\\n  const { status, value, next } = context;\\n  return (\\n    <Select\\n      disabled={status === Status.Waiting || status === Status.Running}\\n      state={status === Status.Waiting ? 'loading' : undefined}\\n      showSearch\\n      value={value.value}\\n      dataSource={[\\n        { label: 'A', value: 'A' },\\n        { label: 'B', value: 'B' },\\n        { label: 'C', value: 'C' },\\n      ]}\\n      onChange={(v) => {\\n        next({ ...value, value: v });\\n      }}\\n    ></Select>\\n  );\\n};\\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\\n  const { mergeScopeState2Global, next, depsValues } = context;\\n  return (\\n    <div>\\n      <Button\\n        type='primary'\\n        onClick={() => {\\n          mergeScopeState2Global();\\n        }}\\n      >\\n        查询\\n      </Button>\\n      <br />\\n      <strong>筛选区域内：</strong>\\n      <ReactJsonView src={depsValues} />\\n    </div>\\n  );\\n};\\nconst OutScopeView = (context: DataContext<any, any, any>) => {\\n  const { depsValues } = context;\\n  return (\\n    <>\\n      <strong>外部： </strong>\\n      <ReactJsonView src={depsValues} />\\n    </>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-联动-rdx版本--同步联动\":{\"startLoc\":{\"col\":20,\"line\":25},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":20,\"line\":25},\"endBody\":{\"col\":1,\"line\":173}},\"场景示例-联动-rdx版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":260},\"endLoc\":{\"col\":1,\"line\":302},\"startBody\":{\"col\":20,\"line\":260},\"endBody\":{\"col\":1,\"line\":302}},\"场景示例-联动-rdx版本--查询列表-作用域\":{\"startLoc\":{\"col\":24,\"line\":304},\"endLoc\":{\"col\":1,\"line\":336},\"startBody\":{\"col\":24,\"line\":304},\"endBody\":{\"col\":1,\"line\":336}}}},\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\nconst { Row, Col } = Grid;\n\nexport const 同步联动 = addSourceDecorator(() => {\n  interface TreeNode {\n    label: string;\n    value: string;\n    children: TreeNode[];\n  }\n  interface TaskValue {\n    chooseValue: string;\n    dataSource: TreeNode[];\n  }\n  enum AdministrativeRegions {\n    // 省\n    Province = 'province',\n    // 市\n    City = 'city',\n    // 区\n    Area = 'area',\n  }\n  const provinceTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { value, updateState: udpateState } = context;\n      const res = await axios.get(\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\n      );\n      udpateState({\n        ...value,\n        dataSource: res.data,\n      });\n    },\n    []\n  );\n  const provinceView = useCallback(\n    (context: DataContext<TaskValue, any, any>) => {\n      const { next, next: updateState, value, status } = context;\n      if (status === Status.FirstRender) {\n        return '空白状态';\n      }\n      if (status === Status.Waiting) {\n        return '加载状态';\n      }\n      if (status === Status.Error) {\n        return '错误状态';\n      }\n      const { dataSource, chooseValue } = value;\n\n      return (\n        <Menu\n          onItemClick={(key) => {\n            next({\n              ...value,\n              chooseValue: key,\n            });\n          }}\n          selectMode={'single'}\n          selectedKeys={chooseValue}\n          style={{ width: 100 }}\n        >\n          {dataSource.map((item) => (\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\n          ))}\n        </Menu>\n      );\n    },\n    []\n  );\n  const otherTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [preLevelValue = {}] = depsValues;\n      const { dataSource = [], chooseValue } = preLevelValue;\n      udpateState({\n        ...value,\n        dataSource: dataSource.find((item) => item.value === chooseValue)\n          ?.children,\n      });\n    },\n    []\n  );\n  const otherDefines = [\n    {\n      key: AdministrativeRegions.City,\n      relyTaskKey: AdministrativeRegions.Province,\n    },\n    {\n      key: AdministrativeRegions.Area,\n      relyTaskKey: AdministrativeRegions.City,\n    },\n  ];\n\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\n    const { next: updateState, next, value, status } = context;\n    if (status === Status.FirstRender) {\n      return '空白状态';\n    }\n    if (status === Status.Waiting) {\n      return '加载状态';\n    }\n    if (status === Status.Error) {\n      return '错误状态';\n    }\n    const { dataSource, chooseValue } = value;\n    if (!dataSource) {\n      return '';\n    }\n    return (\n      <Menu\n        onItemClick={(key) => {\n          next({\n            ...value,\n            chooseValue: key,\n          });\n        }}\n        selectMode={'single'}\n        selectedKeys={chooseValue}\n        style={{ width: 100 }}\n      >\n        {dataSource.map((item) => (\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <RdxContext onChange={() => {}}>\n      <Row>\n        <Col>\n          <RdxView<TaskValue, any, any, any>\n            id={AdministrativeRegions.Province}\n            defaultValue={{ dataSource: [], chooseValue: '' }}\n            reaction={provinceTask}\n            render={provinceView}\n          ></RdxView>\n        </Col>\n        {otherDefines.map((item) => (\n          <Col>\n            <RdxView<TaskValue, any, any, any>\n              id={item.key}\n              deps={[{ id: item.relyTaskKey }]}\n              defaultValue={{ dataSource: [], chooseValue: '' }}\n              reaction={otherTask}\n              render={otherTaskView}\n            ></RdxView>\n          </Col>\n        ))}\n      </Row>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n/**\n *\n *\n * @interface Model\n */\ninterface Model {\n  dataSource: { label: string; value: string }[];\n  value: string;\n}\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst produceTask = (\n  data: any[],\n  filter: (v: any, depsValues: Model[]) => boolean,\n  formatter: (data: any[]) => { label: string; value: string }[]\n) => async (context: ReactionContext<Model, any, any>) => {\n  const { value, depsValues, updateState: udpateState } = context;\n  const newData = data.filter((value) => {\n    const bool = filter(value, depsValues);\n    return bool;\n  });\n  const newDataSource = formatter(newData);\n  await pause(2000);\n  udpateState({\n    ...value,\n    value: newDataSource[0] && newDataSource[0].value,\n    dataSource: newDataSource,\n  });\n};\nconst countryTask = produceTask(\n  province,\n  (relyValues) => {\n    return true;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.province }));\n  }\n);\nconst regionTask = produceTask(\n  city,\n  (v, depsValues) => {\n    const [province] = depsValues;\n    return v.province === province.value;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.city }));\n  }\n);\nconst cityTask = produceTask(\n  area,\n  (v, depsValues) => {\n    const [province, city] = depsValues;\n    return (\n      (!province.value || v.province === province.value) &&\n      (!city.value || v.city === city.value)\n    );\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.area }));\n  }\n);\nenum View {\n  Country = 'Country',\n  Region = 'Region',\n  City = 'City',\n}\n\nconst data = [\n  {\n    id: View.Country,\n    label: '国家',\n    task: countryTask,\n  },\n  {\n    id: View.Region,\n    label: '区域',\n    task: regionTask,\n  },\n  {\n    id: View.City,\n    label: '城市',\n    task: cityTask,\n  },\n];\n\nconst defaultValue = { value: '', dataSource: [] };\nexport const 异步联动 = addSourceDecorator(() => {\n  const ref = useRef({\n    view: (context) => {\n      const { status, value, next } = context;\n      return (\n        <Select\n          disabled={status === Status.Waiting || status === Status.Running}\n          state={\n            status === Status.Waiting || status === Status.Running\n              ? 'loading'\n              : undefined\n          }\n          showSearch\n          value={value.value}\n          dataSource={value.dataSource}\n          onChange={(v) => {\n            next({ ...value, value: v });\n          }}\n        ></Select>\n      );\n    },\n  });\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              deps={depsIds.map((item) => ({ id: item }))}\n              reaction={item.task}\n              defaultValue={defaultValue}\n              render={ref.current.view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 查询列表_作用域 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              scope={'filter'}\n              deps={depsIds.map((item) => ({ id: item }))}\n              defaultValue={defaultValue}\n              render={SearchView}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <RdxView\n        id={'SearchButton'}\n        render={SearchButtonView}\n        scope={'filter'}\n        deps={data.map((item) => ({ id: item.id }))}\n      ></RdxView>\n      <RdxView\n        id={'OutScope'}\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\n        render={OutScopeView}\n      />\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\nconst SearchView = (context: DataContext<any, any, any>) => {\n  const { status, value, next } = context;\n  return (\n    <Select\n      disabled={status === Status.Waiting || status === Status.Running}\n      state={status === Status.Waiting ? 'loading' : undefined}\n      showSearch\n      value={value.value}\n      dataSource={[\n        { label: 'A', value: 'A' },\n        { label: 'B', value: 'B' },\n        { label: 'C', value: 'C' },\n      ]}\n      onChange={(v) => {\n        next({ ...value, value: v });\n      }}\n    ></Select>\n  );\n};\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\n  const { mergeScopeState2Global, next, depsValues } = context;\n  return (\n    <div>\n      <Button\n        type='primary'\n        onClick={() => {\n          mergeScopeState2Global();\n        }}\n      >\n        查询\n      </Button>\n      <br />\n      <strong>筛选区域内：</strong>\n      <ReactJsonView src={depsValues} />\n    </div>\n  );\n};\nconst OutScopeView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  return (\n    <>\n      <strong>外部： </strong>\n      <ReactJsonView src={depsValues} />\n    </>\n  );\n};\n",locationsMap:{"场景示例-联动-rdx版本--同步联动":{startLoc:{col:20,line:47},endLoc:{col:139,line:195},startBody:{col:20,line:47},endBody:{col:139,line:195}},"场景示例-联动-rdx版本--异步联动":{startLoc:{col:20,line:282},endLoc:{col:139,line:324},startBody:{col:20,line:282},endBody:{col:139,line:324}},"场景示例-联动-rdx版本--查询列表-作用域":{startLoc:{col:24,line:326},endLoc:{col:139,line:358},startBody:{col:24,line:326},endBody:{col:139,line:358}}}},storySource:{source:"import React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  Status,\n  ReactionContext,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { Menu, Grid, Input, Select, Button } from '@alifd/next';\nimport axios from 'axios';\nimport { useCallback } from 'react';\nimport ReactJsonView from 'react-json-view';\nexport default {\n  title: '场景示例|联动|Rdx版本',\n  parameters: {\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\nconst { Row, Col } = Grid;\n\nexport const 同步联动 = () => {\n  interface TreeNode {\n    label: string;\n    value: string;\n    children: TreeNode[];\n  }\n  interface TaskValue {\n    chooseValue: string;\n    dataSource: TreeNode[];\n  }\n  enum AdministrativeRegions {\n    // 省\n    Province = 'province',\n    // 市\n    City = 'city',\n    // 区\n    Area = 'area',\n  }\n  const provinceTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { value, updateState: udpateState } = context;\n      const res = await axios.get(\n        'https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json'\n      );\n      udpateState({\n        ...value,\n        dataSource: res.data,\n      });\n    },\n    []\n  );\n  const provinceView = useCallback(\n    (context: DataContext<TaskValue, any, any>) => {\n      const { next, next: updateState, value, status } = context;\n      if (status === Status.FirstRender) {\n        return '空白状态';\n      }\n      if (status === Status.Waiting) {\n        return '加载状态';\n      }\n      if (status === Status.Error) {\n        return '错误状态';\n      }\n      const { dataSource, chooseValue } = value;\n\n      return (\n        <Menu\n          onItemClick={(key) => {\n            next({\n              ...value,\n              chooseValue: key,\n            });\n          }}\n          selectMode={'single'}\n          selectedKeys={chooseValue}\n          style={{ width: 100 }}\n        >\n          {dataSource.map((item) => (\n            <Menu.Item key={item.value}>{item.label}</Menu.Item>\n          ))}\n        </Menu>\n      );\n    },\n    []\n  );\n  const otherTask = useCallback(\n    async (context: ReactionContext<TaskValue, any, any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [preLevelValue = {}] = depsValues;\n      const { dataSource = [], chooseValue } = preLevelValue;\n      udpateState({\n        ...value,\n        dataSource: dataSource.find((item) => item.value === chooseValue)\n          ?.children,\n      });\n    },\n    []\n  );\n  const otherDefines = [\n    {\n      key: AdministrativeRegions.City,\n      relyTaskKey: AdministrativeRegions.Province,\n    },\n    {\n      key: AdministrativeRegions.Area,\n      relyTaskKey: AdministrativeRegions.City,\n    },\n  ];\n\n  const otherTaskView = (context: DataContext<TaskValue, any, any>) => {\n    const { next: updateState, next, value, status } = context;\n    if (status === Status.FirstRender) {\n      return '空白状态';\n    }\n    if (status === Status.Waiting) {\n      return '加载状态';\n    }\n    if (status === Status.Error) {\n      return '错误状态';\n    }\n    const { dataSource, chooseValue } = value;\n    if (!dataSource) {\n      return '';\n    }\n    return (\n      <Menu\n        onItemClick={(key) => {\n          next({\n            ...value,\n            chooseValue: key,\n          });\n        }}\n        selectMode={'single'}\n        selectedKeys={chooseValue}\n        style={{ width: 100 }}\n      >\n        {dataSource.map((item) => (\n          <Menu.Item key={item.value}>{item.label}</Menu.Item>\n        ))}\n      </Menu>\n    );\n  };\n  return (\n    <RdxContext onChange={() => {}}>\n      <Row>\n        <Col>\n          <RdxView<TaskValue, any, any, any>\n            id={AdministrativeRegions.Province}\n            defaultValue={{ dataSource: [], chooseValue: '' }}\n            reaction={provinceTask}\n            render={provinceView}\n          ></RdxView>\n        </Col>\n        {otherDefines.map((item) => (\n          <Col>\n            <RdxView<TaskValue, any, any, any>\n              id={item.key}\n              deps={[{ id: item.relyTaskKey }]}\n              defaultValue={{ dataSource: [], chooseValue: '' }}\n              reaction={otherTask}\n              render={otherTaskView}\n            ></RdxView>\n          </Col>\n        ))}\n      </Row>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n/**\n *\n *\n * @interface Model\n */\ninterface Model {\n  dataSource: { label: string; value: string }[];\n  value: string;\n}\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst produceTask = (\n  data: any[],\n  filter: (v: any, depsValues: Model[]) => boolean,\n  formatter: (data: any[]) => { label: string; value: string }[]\n) => async (context: ReactionContext<Model, any, any>) => {\n  const { value, depsValues, updateState: udpateState } = context;\n  const newData = data.filter((value) => {\n    const bool = filter(value, depsValues);\n    return bool;\n  });\n  const newDataSource = formatter(newData);\n  await pause(2000);\n  udpateState({\n    ...value,\n    value: newDataSource[0] && newDataSource[0].value,\n    dataSource: newDataSource,\n  });\n};\nconst countryTask = produceTask(\n  province,\n  (relyValues) => {\n    return true;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.province }));\n  }\n);\nconst regionTask = produceTask(\n  city,\n  (v, depsValues) => {\n    const [province] = depsValues;\n    return v.province === province.value;\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.city }));\n  }\n);\nconst cityTask = produceTask(\n  area,\n  (v, depsValues) => {\n    const [province, city] = depsValues;\n    return (\n      (!province.value || v.province === province.value) &&\n      (!city.value || v.city === city.value)\n    );\n  },\n  (data) => {\n    return data.map((item) => ({ label: item.name, value: item.area }));\n  }\n);\nenum View {\n  Country = 'Country',\n  Region = 'Region',\n  City = 'City',\n}\n\nconst data = [\n  {\n    id: View.Country,\n    label: '国家',\n    task: countryTask,\n  },\n  {\n    id: View.Region,\n    label: '区域',\n    task: regionTask,\n  },\n  {\n    id: View.City,\n    label: '城市',\n    task: cityTask,\n  },\n];\n\nconst defaultValue = { value: '', dataSource: [] };\nexport const 异步联动 = () => {\n  const ref = useRef({\n    view: (context) => {\n      const { status, value, next } = context;\n      return (\n        <Select\n          disabled={status === Status.Waiting || status === Status.Running}\n          state={\n            status === Status.Waiting || status === Status.Running\n              ? 'loading'\n              : undefined\n          }\n          showSearch\n          value={value.value}\n          dataSource={value.dataSource}\n          onChange={(v) => {\n            next({ ...value, value: v });\n          }}\n        ></Select>\n      );\n    },\n  });\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              deps={depsIds.map((item) => ({ id: item }))}\n              reaction={item.task}\n              defaultValue={defaultValue}\n              render={ref.current.view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n\nexport const 查询列表_作用域 = () => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        const depsIds = data.slice(0, index).map((item) => item.id);\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<Model, any, any, any>\n              id={item.id}\n              scope={'filter'}\n              deps={depsIds.map((item) => ({ id: item }))}\n              defaultValue={defaultValue}\n              render={SearchView}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <RdxView\n        id={'SearchButton'}\n        render={SearchButtonView}\n        scope={'filter'}\n        deps={data.map((item) => ({ id: item.id }))}\n      ></RdxView>\n      <RdxView\n        id={'OutScope'}\n        deps={[...data.slice(0, 1).map((item) => ({ id: item.id }))]}\n        render={OutScopeView}\n      />\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\nconst SearchView = (context: DataContext<any, any, any>) => {\n  const { status, value, next } = context;\n  return (\n    <Select\n      disabled={status === Status.Waiting || status === Status.Running}\n      state={status === Status.Waiting ? 'loading' : undefined}\n      showSearch\n      value={value.value}\n      dataSource={[\n        { label: 'A', value: 'A' },\n        { label: 'B', value: 'B' },\n        { label: 'C', value: 'C' },\n      ]}\n      onChange={(v) => {\n        next({ ...value, value: v });\n      }}\n    ></Select>\n  );\n};\nconst SearchButtonView = (context: DataContext<any, any, any>) => {\n  const { mergeScopeState2Global, next, depsValues } = context;\n  return (\n    <div>\n      <Button\n        type='primary'\n        onClick={() => {\n          mergeScopeState2Global();\n        }}\n      >\n        查询\n      </Button>\n      <br />\n      <strong>筛选区域内：</strong>\n      <ReactJsonView src={depsValues} />\n    </div>\n  );\n};\nconst OutScopeView = (context: DataContext<any, any, any>) => {\n  const { depsValues } = context;\n  return (\n    <>\n      <strong>外部： </strong>\n      <ReactJsonView src={depsValues} />\n    </>\n  );\n};\n",locationsMap:{"场景示例-联动-rdx版本--同步联动":{startLoc:{col:20,line:25},endLoc:{col:1,line:173},startBody:{col:20,line:25},endBody:{col:1,line:173}},"场景示例-联动-rdx版本--异步联动":{startLoc:{col:20,line:260},endLoc:{col:1,line:302},startBody:{col:20,line:260},endBody:{col:1,line:302}},"场景示例-联动-rdx版本--查询列表-作用域":{startLoc:{col:24,line:304},endLoc:{col:1,line:336},startBody:{col:24,line:304},endBody:{col:1,line:336}}}},info:{inline:!0}}};const{Row:Row,Col:Col}=_alifd_next__WEBPACK_IMPORTED_MODULE_6__.a,同步联动=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{let AdministrativeRegions;!function(AdministrativeRegions){AdministrativeRegions.Province="province",AdministrativeRegions.City="city",AdministrativeRegions.Area="area"}(AdministrativeRegions||(AdministrativeRegions={}));const provinceTask=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(context=>__awaiter(void 0,void 0,void 0,(function*(){const{value:value,updateState:udpateState}=context,res=yield axios__WEBPACK_IMPORTED_MODULE_10___default.a.get("https://os.alipayobjects.com/rmsportal/ODDwqcDFTLAguOvWEolX.json");udpateState(Object.assign(Object.assign({},value),{dataSource:res.data}))})),[]),provinceView=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(context=>{const{next:next,next:updateState,value:value,status:status}=context;if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.FirstRender)return"空白状态";if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting)return"加载状态";if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Error)return"错误状态";const{dataSource:dataSource,chooseValue:chooseValue}=value;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_7__.a,{onItemClick:key=>{next(Object.assign(Object.assign({},value),{chooseValue:key}))},selectMode:"single",selectedKeys:chooseValue,style:{width:100}},dataSource.map(item=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_7__.a.Item,{key:item.value},item.label)))},[]),otherTask=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(context=>__awaiter(void 0,void 0,void 0,(function*(){var _a;const{updateState:udpateState,value:value,depsValues:depsValues}=context,[preLevelValue={}]=depsValues,{dataSource:dataSource=[],chooseValue:chooseValue}=preLevelValue;udpateState(Object.assign(Object.assign({},value),{dataSource:null===(_a=dataSource.find(item=>item.value===chooseValue))||void 0===_a?void 0:_a.children}))})),[]),otherDefines=[{key:AdministrativeRegions.City,relyTaskKey:AdministrativeRegions.Province},{key:AdministrativeRegions.Area,relyTaskKey:AdministrativeRegions.City}],otherTaskView=context=>{const{next:updateState,next:next,value:value,status:status}=context;if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.FirstRender)return"空白状态";if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting)return"加载状态";if(status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Error)return"错误状态";const{dataSource:dataSource,chooseValue:chooseValue}=value;return dataSource?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_7__.a,{onItemClick:key=>{next(Object.assign(Object.assign({},value),{chooseValue:key}))},selectMode:"single",selectedKeys:chooseValue,style:{width:100}},dataSource.map(item=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_7__.a.Item,{key:item.value},item.label))):""};return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{onChange:()=>{}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Row,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Col,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:AdministrativeRegions.Province,defaultValue:{dataSource:[],chooseValue:""},reaction:provinceTask,render:provinceView})),otherDefines.map(item=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Col,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:item.key,deps:[{id:item.relyTaskKey}],defaultValue:{dataSource:[],chooseValue:""},reaction:otherTask,render:otherTaskView})))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__.a,null))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),produceTask=(data,filter,formatter)=>context=>__awaiter(void 0,void 0,void 0,(function*(){const{value:value,depsValues:depsValues,updateState:udpateState}=context,newData=data.filter(value=>filter(value,depsValues)),newDataSource=formatter(newData);var t;yield(t=2e3,new Promise(resolve=>setTimeout(resolve,t))),udpateState(Object.assign(Object.assign({},value),{value:newDataSource[0]&&newDataSource[0].value,dataSource:newDataSource}))})),countryTask=produceTask(province_city_china_data__WEBPACK_IMPORTED_MODULE_12__.province,relyValues=>!0,data=>data.map(item=>({label:item.name,value:item.province}))),regionTask=produceTask(province_city_china_data__WEBPACK_IMPORTED_MODULE_12__.city,(v,depsValues)=>{const[province]=depsValues;return v.province===province.value},data=>data.map(item=>({label:item.name,value:item.city}))),cityTask=produceTask(province_city_china_data__WEBPACK_IMPORTED_MODULE_12__.area,(v,depsValues)=>{const[province,city]=depsValues;return!(province.value&&v.province!==province.value||city.value&&v.city!==city.value)},data=>data.map(item=>({label:item.name,value:item.area})));var View;!function(View){View.Country="Country",View.Region="Region",View.City="City"}(View||(View={}));const data=[{id:View.Country,label:"国家",task:countryTask},{id:View.Region,label:"区域",task:regionTask},{id:View.City,label:"城市",task:cityTask}],defaultValue={value:"",dataSource:[]},异步联动=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const ref=Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)({view:context=>{const{status:status,value:value,next:next}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_8__.a,{disabled:status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting||status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Running,state:status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting||status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Running?"loading":void 0,showSearch:!0,value:value.value,dataSource:value.dataSource,onChange:v=>{next(Object.assign(Object.assign({},value),{value:v}))}})}});return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,null,data.map((item,index)=>{const depsIds=data.slice(0,index).map(item=>item.id);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,item.label),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:item.id,deps:depsIds.map(item=>({id:item})),reaction:item.task,defaultValue:defaultValue,render:ref.current.view}))}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__.a,null))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),查询列表_作用域=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,null,data.map((item,index)=>{const depsIds=data.slice(0,index).map(item=>item.id);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,item.label),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:item.id,scope:"filter",deps:depsIds.map(item=>({id:item})),defaultValue:defaultValue,render:SearchView}))}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"SearchButton",render:SearchButtonView,scope:"filter",deps:data.map(item=>({id:item.id}))}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"OutScope",deps:[...data.slice(0,1).map(item=>({id:item.id}))],render:OutScopeView}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__.a,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascader.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),SearchView=context=>{const{status:status,value:value,next:next}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_8__.a,{disabled:status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting||status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Running,state:status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting?"loading":void 0,showSearch:!0,value:value.value,dataSource:[{label:"A",value:"A"},{label:"B",value:"B"},{label:"C",value:"C"}],onChange:v=>{next(Object.assign(Object.assign({},value),{value:v}))}})},SearchButtonView=context=>{const{mergeScopeState2Global:mergeScopeState2Global,next:next,depsValues:depsValues}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_9__.a,{type:"primary",onClick:()=>{mergeScopeState2Global()}},"查询"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"筛选区域内："),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_json_view__WEBPACK_IMPORTED_MODULE_11___default.a,{src:depsValues}))},OutScopeView=context=>{const{depsValues:depsValues}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"外部： "),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_json_view__WEBPACK_IMPORTED_MODULE_11___default.a,{src:depsValues}))}},1849:function(module,exports,__webpack_require__){var map={"./af":683,"./af.js":683,"./ar":684,"./ar-dz":685,"./ar-dz.js":685,"./ar-kw":686,"./ar-kw.js":686,"./ar-ly":687,"./ar-ly.js":687,"./ar-ma":688,"./ar-ma.js":688,"./ar-sa":689,"./ar-sa.js":689,"./ar-tn":690,"./ar-tn.js":690,"./ar.js":684,"./az":691,"./az.js":691,"./be":692,"./be.js":692,"./bg":693,"./bg.js":693,"./bm":694,"./bm.js":694,"./bn":695,"./bn.js":695,"./bo":696,"./bo.js":696,"./br":697,"./br.js":697,"./bs":698,"./bs.js":698,"./ca":699,"./ca.js":699,"./cs":700,"./cs.js":700,"./cv":701,"./cv.js":701,"./cy":702,"./cy.js":702,"./da":703,"./da.js":703,"./de":704,"./de-at":705,"./de-at.js":705,"./de-ch":706,"./de-ch.js":706,"./de.js":704,"./dv":707,"./dv.js":707,"./el":708,"./el.js":708,"./en-au":709,"./en-au.js":709,"./en-ca":710,"./en-ca.js":710,"./en-gb":711,"./en-gb.js":711,"./en-ie":712,"./en-ie.js":712,"./en-il":713,"./en-il.js":713,"./en-in":714,"./en-in.js":714,"./en-nz":715,"./en-nz.js":715,"./en-sg":716,"./en-sg.js":716,"./eo":717,"./eo.js":717,"./es":718,"./es-do":719,"./es-do.js":719,"./es-us":720,"./es-us.js":720,"./es.js":718,"./et":721,"./et.js":721,"./eu":722,"./eu.js":722,"./fa":723,"./fa.js":723,"./fi":724,"./fi.js":724,"./fil":725,"./fil.js":725,"./fo":726,"./fo.js":726,"./fr":727,"./fr-ca":728,"./fr-ca.js":728,"./fr-ch":729,"./fr-ch.js":729,"./fr.js":727,"./fy":730,"./fy.js":730,"./ga":731,"./ga.js":731,"./gd":732,"./gd.js":732,"./gl":733,"./gl.js":733,"./gom-deva":734,"./gom-deva.js":734,"./gom-latn":735,"./gom-latn.js":735,"./gu":736,"./gu.js":736,"./he":737,"./he.js":737,"./hi":738,"./hi.js":738,"./hr":739,"./hr.js":739,"./hu":740,"./hu.js":740,"./hy-am":741,"./hy-am.js":741,"./id":742,"./id.js":742,"./is":743,"./is.js":743,"./it":744,"./it-ch":745,"./it-ch.js":745,"./it.js":744,"./ja":746,"./ja.js":746,"./jv":747,"./jv.js":747,"./ka":748,"./ka.js":748,"./kk":749,"./kk.js":749,"./km":750,"./km.js":750,"./kn":751,"./kn.js":751,"./ko":752,"./ko.js":752,"./ku":753,"./ku.js":753,"./ky":754,"./ky.js":754,"./lb":755,"./lb.js":755,"./lo":756,"./lo.js":756,"./lt":757,"./lt.js":757,"./lv":758,"./lv.js":758,"./me":759,"./me.js":759,"./mi":760,"./mi.js":760,"./mk":761,"./mk.js":761,"./ml":762,"./ml.js":762,"./mn":763,"./mn.js":763,"./mr":764,"./mr.js":764,"./ms":765,"./ms-my":766,"./ms-my.js":766,"./ms.js":765,"./mt":767,"./mt.js":767,"./my":768,"./my.js":768,"./nb":769,"./nb.js":769,"./ne":770,"./ne.js":770,"./nl":771,"./nl-be":772,"./nl-be.js":772,"./nl.js":771,"./nn":773,"./nn.js":773,"./oc-lnc":774,"./oc-lnc.js":774,"./pa-in":775,"./pa-in.js":775,"./pl":776,"./pl.js":776,"./pt":777,"./pt-br":778,"./pt-br.js":778,"./pt.js":777,"./ro":779,"./ro.js":779,"./ru":780,"./ru.js":780,"./sd":781,"./sd.js":781,"./se":782,"./se.js":782,"./si":783,"./si.js":783,"./sk":784,"./sk.js":784,"./sl":785,"./sl.js":785,"./sq":786,"./sq.js":786,"./sr":787,"./sr-cyrl":788,"./sr-cyrl.js":788,"./sr.js":787,"./ss":789,"./ss.js":789,"./sv":790,"./sv.js":790,"./sw":791,"./sw.js":791,"./ta":792,"./ta.js":792,"./te":793,"./te.js":793,"./tet":794,"./tet.js":794,"./tg":795,"./tg.js":795,"./th":796,"./th.js":796,"./tk":797,"./tk.js":797,"./tl-ph":798,"./tl-ph.js":798,"./tlh":799,"./tlh.js":799,"./tr":800,"./tr.js":800,"./tzl":801,"./tzl.js":801,"./tzm":802,"./tzm-latn":803,"./tzm-latn.js":803,"./tzm.js":802,"./ug-cn":804,"./ug-cn.js":804,"./uk":805,"./uk.js":805,"./ur":806,"./ur.js":806,"./uz":807,"./uz-latn":808,"./uz-latn.js":808,"./uz.js":807,"./vi":809,"./vi.js":809,"./x-pseudo":810,"./x-pseudo.js":810,"./yo":811,"./yo.js":811,"./zh-cn":812,"./zh-cn.js":812,"./zh-hk":813,"./zh-hk.js":813,"./zh-mo":814,"./zh-mo.js":814,"./zh-tw":815,"./zh-tw.js":815};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1849},2174:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"异步联动",(function(){return 异步联动}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_alifd_next__WEBPACK_IMPORTED_MODULE_2__=(__webpack_require__(657),__webpack_require__(357)),province_city_china_data__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(170),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React, { useState, useEffect } from 'react';\nimport '@alifd/next/dist/next.css';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '场景示例|联动|普通版本',\n  parameters: {\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\ninterface IBaseSelect {\n  title: string;\n  value: string;\n  onChange: (v: string) => void;\n  depsValues: string[];\n  fetchDataSource: { label: string; value: string }[];\n}\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst BaseSelect = (props: IBaseSelect) => {\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\n  const [state, setState] = useState({\n    loading: false,\n    dataSource: [] as { label: string; value: string }[],\n  });\n  const countRef = useRef(0);\n  useEffect(() => {\n    console.log('title', title, depsValues);\n    setState({\n      ...state,\n      loading: true,\n    });\n    // countRef.current++;\n    let recordCount = countRef.current;\n    async function anyNameFunction() {\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\n      setState({\n        loading: false,\n        dataSource: fetchDataSource,\n      });\n    }\n    anyNameFunction();\n  }, depsValues);\n  return (\n    <div>\n      <strong>{title}</strong>\n      <Select\n        state={state.loading ? 'loading' : undefined}\n        dataSource={state.dataSource}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\nconst data = [\n  {\n    label: '国家',\n    id: 'province',\n    dataSource: province,\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.province }));\n    },\n    filter: (relyValues) => {\n      return true;\n    },\n  },\n  {\n    label: '城市',\n    dataSource: city,\n    id: 'city',\n    filter: (v, depsValues) => {\n      const [province] = depsValues;\n      return v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.city }));\n    },\n  },\n  {\n    label: '区域',\n    dataSource: area,\n    id: 'area',\n    filter: (v, depsValues) => {\n      const [province, city] = depsValues;\n      return city\n        ? v.province === province && v.city === city\n        : v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.area }));\n    },\n  },\n];\nexport const 异步联动 = () => {\n  const [state, setState] = useState({\n    province: '',\n    city: '',\n    area: '',\n  });\n  return (\n    <div>\n      {data.map((row, index) => {\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\n        const newData = row.dataSource.filter((value) => {\n          const bool = row.filter(value, depsValues);\n          return bool;\n        });\n        const newDataSource = row.formatter(newData);\n        return (\n          <BaseSelect\n            value={state[row.id]}\n            depsValues={depsValues}\n            onChange={(v) => {\n              setState({\n                ...state,\n                [row.id]: v,\n              });\n            }}\n            fetchDataSource={newDataSource}\n            title={row.label}\n          />\n        );\n      })}\n    </div>\n  );\n};\n",__ADDS_MAP__={"场景示例-联动-普通版本--异步联动":{startLoc:{col:20,line:96},endLoc:{col:1,line:128},startBody:{col:20,line:96},endBody:{col:1,line:128}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|联动|普通版本",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useState, useEffect } from 'react';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|联动|普通版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\ninterface IBaseSelect {\\\\n  title: string;\\\\n  value: string;\\\\n  onChange: (v: string) => void;\\\\n  depsValues: string[];\\\\n  fetchDataSource: { label: string; value: string }[];\\\\n}\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst BaseSelect = (props: IBaseSelect) => {\\\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\\\n  const [state, setState] = useState({\\\\n    loading: false,\\\\n    dataSource: [] as { label: string; value: string }[],\\\\n  });\\\\n  const countRef = useRef(0);\\\\n  useEffect(() => {\\\\n    console.log('title', title, depsValues);\\\\n    setState({\\\\n      ...state,\\\\n      loading: true,\\\\n    });\\\\n    // countRef.current++;\\\\n    let recordCount = countRef.current;\\\\n    async function anyNameFunction() {\\\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\\\n      setState({\\\\n        loading: false,\\\\n        dataSource: fetchDataSource,\\\\n      });\\\\n    }\\\\n    anyNameFunction();\\\\n  }, depsValues);\\\\n  return (\\\\n    <div>\\\\n      <strong>{title}</strong>\\\\n      <Select\\\\n        state={state.loading ? 'loading' : undefined}\\\\n        dataSource={state.dataSource}\\\\n        value={value}\\\\n        onChange={onChange}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst data = [\\\\n  {\\\\n    label: '国家',\\\\n    id: 'province',\\\\n    dataSource: province,\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\\\n    },\\\\n    filter: (relyValues) => {\\\\n      return true;\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '城市',\\\\n    dataSource: city,\\\\n    id: 'city',\\\\n    filter: (v, depsValues) => {\\\\n      const [province] = depsValues;\\\\n      return v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '区域',\\\\n    dataSource: area,\\\\n    id: 'area',\\\\n    filter: (v, depsValues) => {\\\\n      const [province, city] = depsValues;\\\\n      return city\\\\n        ? v.province === province && v.city === city\\\\n        : v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\\\n    },\\\\n  },\\\\n];\\\\nexport const 异步联动 = () => {\\\\n  const [state, setState] = useState({\\\\n    province: '',\\\\n    city: '',\\\\n    area: '',\\\\n  });\\\\n  return (\\\\n    <div>\\\\n      {data.map((row, index) => {\\\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\\\n        const newData = row.dataSource.filter((value) => {\\\\n          const bool = row.filter(value, depsValues);\\\\n          return bool;\\\\n        });\\\\n        const newDataSource = row.formatter(newData);\\\\n        return (\\\\n          <BaseSelect\\\\n            value={state[row.id]}\\\\n            depsValues={depsValues}\\\\n            onChange={(v) => {\\\\n              setState({\\\\n                ...state,\\\\n                [row.id]: v,\\\\n              });\\\\n            }}\\\\n            fetchDataSource={newDataSource}\\\\n            title={row.label}\\\\n          />\\\\n        );\\\\n      })}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-联动-普通版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":128},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":128}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/cascaderBase.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useState, useEffect } from 'react';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|联动|普通版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\ninterface IBaseSelect {\\\\n  title: string;\\\\n  value: string;\\\\n  onChange: (v: string) => void;\\\\n  depsValues: string[];\\\\n  fetchDataSource: { label: string; value: string }[];\\\\n}\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst BaseSelect = (props: IBaseSelect) => {\\\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\\\n  const [state, setState] = useState({\\\\n    loading: false,\\\\n    dataSource: [] as { label: string; value: string }[],\\\\n  });\\\\n  const countRef = useRef(0);\\\\n  useEffect(() => {\\\\n    console.log('title', title, depsValues);\\\\n    setState({\\\\n      ...state,\\\\n      loading: true,\\\\n    });\\\\n    // countRef.current++;\\\\n    let recordCount = countRef.current;\\\\n    async function anyNameFunction() {\\\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\\\n      setState({\\\\n        loading: false,\\\\n        dataSource: fetchDataSource,\\\\n      });\\\\n    }\\\\n    anyNameFunction();\\\\n  }, depsValues);\\\\n  return (\\\\n    <div>\\\\n      <strong>{title}</strong>\\\\n      <Select\\\\n        state={state.loading ? 'loading' : undefined}\\\\n        dataSource={state.dataSource}\\\\n        value={value}\\\\n        onChange={onChange}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst data = [\\\\n  {\\\\n    label: '国家',\\\\n    id: 'province',\\\\n    dataSource: province,\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\\\n    },\\\\n    filter: (relyValues) => {\\\\n      return true;\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '城市',\\\\n    dataSource: city,\\\\n    id: 'city',\\\\n    filter: (v, depsValues) => {\\\\n      const [province] = depsValues;\\\\n      return v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '区域',\\\\n    dataSource: area,\\\\n    id: 'area',\\\\n    filter: (v, depsValues) => {\\\\n      const [province, city] = depsValues;\\\\n      return city\\\\n        ? v.province === province && v.city === city\\\\n        : v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\\\n    },\\\\n  },\\\\n];\\\\nexport const 异步联动 = () => {\\\\n  const [state, setState] = useState({\\\\n    province: '',\\\\n    city: '',\\\\n    area: '',\\\\n  });\\\\n  return (\\\\n    <div>\\\\n      {data.map((row, index) => {\\\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\\\n        const newData = row.dataSource.filter((value) => {\\\\n          const bool = row.filter(value, depsValues);\\\\n          return bool;\\\\n        });\\\\n        const newDataSource = row.formatter(newData);\\\\n        return (\\\\n          <BaseSelect\\\\n            value={state[row.id]}\\\\n            depsValues={depsValues}\\\\n            onChange={(v) => {\\\\n              setState({\\\\n                ...state,\\\\n                [row.id]: v,\\\\n              });\\\\n            }}\\\\n            fetchDataSource={newDataSource}\\\\n            title={row.label}\\\\n          />\\\\n        );\\\\n      })}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-联动-普通版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":128},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":128}}}},\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = addSourceDecorator(() => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":118},\"endLoc\":{\"col\":139,\"line\":150},\"startBody\":{\"col\":20,\"line\":118},\"endBody\":{\"col\":139,\"line\":150}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascaderBase.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = () => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":96},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":20,\"line\":96},\"endBody\":{\"col\":1,\"line\":128}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascaderBase.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useState, useEffect } from 'react';\nimport '@alifd/next/dist/next.css';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '场景示例|联动|普通版本',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useState, useEffect } from 'react';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|联动|普通版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\ninterface IBaseSelect {\\\\n  title: string;\\\\n  value: string;\\\\n  onChange: (v: string) => void;\\\\n  depsValues: string[];\\\\n  fetchDataSource: { label: string; value: string }[];\\\\n}\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst BaseSelect = (props: IBaseSelect) => {\\\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\\\n  const [state, setState] = useState({\\\\n    loading: false,\\\\n    dataSource: [] as { label: string; value: string }[],\\\\n  });\\\\n  const countRef = useRef(0);\\\\n  useEffect(() => {\\\\n    console.log('title', title, depsValues);\\\\n    setState({\\\\n      ...state,\\\\n      loading: true,\\\\n    });\\\\n    // countRef.current++;\\\\n    let recordCount = countRef.current;\\\\n    async function anyNameFunction() {\\\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\\\n      setState({\\\\n        loading: false,\\\\n        dataSource: fetchDataSource,\\\\n      });\\\\n    }\\\\n    anyNameFunction();\\\\n  }, depsValues);\\\\n  return (\\\\n    <div>\\\\n      <strong>{title}</strong>\\\\n      <Select\\\\n        state={state.loading ? 'loading' : undefined}\\\\n        dataSource={state.dataSource}\\\\n        value={value}\\\\n        onChange={onChange}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst data = [\\\\n  {\\\\n    label: '国家',\\\\n    id: 'province',\\\\n    dataSource: province,\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\\\n    },\\\\n    filter: (relyValues) => {\\\\n      return true;\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '城市',\\\\n    dataSource: city,\\\\n    id: 'city',\\\\n    filter: (v, depsValues) => {\\\\n      const [province] = depsValues;\\\\n      return v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '区域',\\\\n    dataSource: area,\\\\n    id: 'area',\\\\n    filter: (v, depsValues) => {\\\\n      const [province, city] = depsValues;\\\\n      return city\\\\n        ? v.province === province && v.city === city\\\\n        : v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\\\n    },\\\\n  },\\\\n];\\\\nexport const 异步联动 = () => {\\\\n  const [state, setState] = useState({\\\\n    province: '',\\\\n    city: '',\\\\n    area: '',\\\\n  });\\\\n  return (\\\\n    <div>\\\\n      {data.map((row, index) => {\\\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\\\n        const newData = row.dataSource.filter((value) => {\\\\n          const bool = row.filter(value, depsValues);\\\\n          return bool;\\\\n        });\\\\n        const newDataSource = row.formatter(newData);\\\\n        return (\\\\n          <BaseSelect\\\\n            value={state[row.id]}\\\\n            depsValues={depsValues}\\\\n            onChange={(v) => {\\\\n              setState({\\\\n                ...state,\\\\n                [row.id]: v,\\\\n              });\\\\n            }}\\\\n            fetchDataSource={newDataSource}\\\\n            title={row.label}\\\\n          />\\\\n        );\\\\n      })}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-联动-普通版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":128},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":128}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/cascaderBase.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useState, useEffect } from 'react';\\\\nimport '@alifd/next/dist/next.css';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|联动|普通版本',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\nimport { province, city, area } from 'province-city-china/data';\\\\nimport { useRef } from 'react';\\\\ninterface IBaseSelect {\\\\n  title: string;\\\\n  value: string;\\\\n  onChange: (v: string) => void;\\\\n  depsValues: string[];\\\\n  fetchDataSource: { label: string; value: string }[];\\\\n}\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst BaseSelect = (props: IBaseSelect) => {\\\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\\\n  const [state, setState] = useState({\\\\n    loading: false,\\\\n    dataSource: [] as { label: string; value: string }[],\\\\n  });\\\\n  const countRef = useRef(0);\\\\n  useEffect(() => {\\\\n    console.log('title', title, depsValues);\\\\n    setState({\\\\n      ...state,\\\\n      loading: true,\\\\n    });\\\\n    // countRef.current++;\\\\n    let recordCount = countRef.current;\\\\n    async function anyNameFunction() {\\\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\\\n      setState({\\\\n        loading: false,\\\\n        dataSource: fetchDataSource,\\\\n      });\\\\n    }\\\\n    anyNameFunction();\\\\n  }, depsValues);\\\\n  return (\\\\n    <div>\\\\n      <strong>{title}</strong>\\\\n      <Select\\\\n        state={state.loading ? 'loading' : undefined}\\\\n        dataSource={state.dataSource}\\\\n        value={value}\\\\n        onChange={onChange}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\nconst data = [\\\\n  {\\\\n    label: '国家',\\\\n    id: 'province',\\\\n    dataSource: province,\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\\\n    },\\\\n    filter: (relyValues) => {\\\\n      return true;\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '城市',\\\\n    dataSource: city,\\\\n    id: 'city',\\\\n    filter: (v, depsValues) => {\\\\n      const [province] = depsValues;\\\\n      return v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\\\n    },\\\\n  },\\\\n  {\\\\n    label: '区域',\\\\n    dataSource: area,\\\\n    id: 'area',\\\\n    filter: (v, depsValues) => {\\\\n      const [province, city] = depsValues;\\\\n      return city\\\\n        ? v.province === province && v.city === city\\\\n        : v.province === province;\\\\n    },\\\\n    formatter: (data) => {\\\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\\\n    },\\\\n  },\\\\n];\\\\nexport const 异步联动 = () => {\\\\n  const [state, setState] = useState({\\\\n    province: '',\\\\n    city: '',\\\\n    area: '',\\\\n  });\\\\n  return (\\\\n    <div>\\\\n      {data.map((row, index) => {\\\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\\\n        const newData = row.dataSource.filter((value) => {\\\\n          const bool = row.filter(value, depsValues);\\\\n          return bool;\\\\n        });\\\\n        const newDataSource = row.formatter(newData);\\\\n        return (\\\\n          <BaseSelect\\\\n            value={state[row.id]}\\\\n            depsValues={depsValues}\\\\n            onChange={(v) => {\\\\n              setState({\\\\n                ...state,\\\\n                [row.id]: v,\\\\n              });\\\\n            }}\\\\n            fetchDataSource={newDataSource}\\\\n            title={row.label}\\\\n          />\\\\n        );\\\\n      })}\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-联动-普通版本--异步联动\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":128},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":96},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":128}}}},\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = addSourceDecorator(() => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\",\"locationsMap\":{\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":118},\"endLoc\":{\"col\":139,\"line\":150},\"startBody\":{\"col\":20,\"line\":118},\"endBody\":{\"col\":139,\"line\":150}}}},\"storySource\":{\"source\":\"import React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = () => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":96},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":20,\"line\":96},\"endBody\":{\"col\":1,\"line\":128}}}},\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\ninterface IBaseSelect {\n  title: string;\n  value: string;\n  onChange: (v: string) => void;\n  depsValues: string[];\n  fetchDataSource: { label: string; value: string }[];\n}\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst BaseSelect = (props: IBaseSelect) => {\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\n  const [state, setState] = useState({\n    loading: false,\n    dataSource: [] as { label: string; value: string }[],\n  });\n  const countRef = useRef(0);\n  useEffect(() => {\n    console.log('title', title, depsValues);\n    setState({\n      ...state,\n      loading: true,\n    });\n    // countRef.current++;\n    let recordCount = countRef.current;\n    async function anyNameFunction() {\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\n      setState({\n        loading: false,\n        dataSource: fetchDataSource,\n      });\n    }\n    anyNameFunction();\n  }, depsValues);\n  return (\n    <div>\n      <strong>{title}</strong>\n      <Select\n        state={state.loading ? 'loading' : undefined}\n        dataSource={state.dataSource}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\nconst data = [\n  {\n    label: '国家',\n    id: 'province',\n    dataSource: province,\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.province }));\n    },\n    filter: (relyValues) => {\n      return true;\n    },\n  },\n  {\n    label: '城市',\n    dataSource: city,\n    id: 'city',\n    filter: (v, depsValues) => {\n      const [province] = depsValues;\n      return v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.city }));\n    },\n  },\n  {\n    label: '区域',\n    dataSource: area,\n    id: 'area',\n    filter: (v, depsValues) => {\n      const [province, city] = depsValues;\n      return city\n        ? v.province === province && v.city === city\n        : v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.area }));\n    },\n  },\n];\nexport const 异步联动 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = useState({\n    province: '',\n    city: '',\n    area: '',\n  });\n  return (\n    <div>\n      {data.map((row, index) => {\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\n        const newData = row.dataSource.filter((value) => {\n          const bool = row.filter(value, depsValues);\n          return bool;\n        });\n        const newDataSource = row.formatter(newData);\n        return (\n          <BaseSelect\n            value={state[row.id]}\n            depsValues={depsValues}\n            onChange={(v) => {\n              setState({\n                ...state,\n                [row.id]: v,\n              });\n            }}\n            fetchDataSource={newDataSource}\n            title={row.label}\n          />\n        );\n      })}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-联动-普通版本--异步联动":{startLoc:{col:20,line:140},endLoc:{col:277,line:172},startBody:{col:20,line:140},endBody:{col:277,line:172}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = () => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":96},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":20,\"line\":96},\"endBody\":{\"col\":1,\"line\":128}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/cascaderBase.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useState, useEffect } from 'react';\nimport '@alifd/next/dist/next.css';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '场景示例|联动|普通版本',\n  parameters: {\"storySource\":{\"source\":\"import React, { useState, useEffect } from 'react';\\nimport '@alifd/next/dist/next.css';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '场景示例|联动|普通版本',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\nimport { province, city, area } from 'province-city-china/data';\\nimport { useRef } from 'react';\\ninterface IBaseSelect {\\n  title: string;\\n  value: string;\\n  onChange: (v: string) => void;\\n  depsValues: string[];\\n  fetchDataSource: { label: string; value: string }[];\\n}\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst BaseSelect = (props: IBaseSelect) => {\\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\\n  const [state, setState] = useState({\\n    loading: false,\\n    dataSource: [] as { label: string; value: string }[],\\n  });\\n  const countRef = useRef(0);\\n  useEffect(() => {\\n    console.log('title', title, depsValues);\\n    setState({\\n      ...state,\\n      loading: true,\\n    });\\n    // countRef.current++;\\n    let recordCount = countRef.current;\\n    async function anyNameFunction() {\\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\\n      setState({\\n        loading: false,\\n        dataSource: fetchDataSource,\\n      });\\n    }\\n    anyNameFunction();\\n  }, depsValues);\\n  return (\\n    <div>\\n      <strong>{title}</strong>\\n      <Select\\n        state={state.loading ? 'loading' : undefined}\\n        dataSource={state.dataSource}\\n        value={value}\\n        onChange={onChange}\\n      />\\n    </div>\\n  );\\n};\\nconst data = [\\n  {\\n    label: '国家',\\n    id: 'province',\\n    dataSource: province,\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.province }));\\n    },\\n    filter: (relyValues) => {\\n      return true;\\n    },\\n  },\\n  {\\n    label: '城市',\\n    dataSource: city,\\n    id: 'city',\\n    filter: (v, depsValues) => {\\n      const [province] = depsValues;\\n      return v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.city }));\\n    },\\n  },\\n  {\\n    label: '区域',\\n    dataSource: area,\\n    id: 'area',\\n    filter: (v, depsValues) => {\\n      const [province, city] = depsValues;\\n      return city\\n        ? v.province === province && v.city === city\\n        : v.province === province;\\n    },\\n    formatter: (data) => {\\n      return data.map((item) => ({ label: item.name, value: item.area }));\\n    },\\n  },\\n];\\nexport const 异步联动 = () => {\\n  const [state, setState] = useState({\\n    province: '',\\n    city: '',\\n    area: '',\\n  });\\n  return (\\n    <div>\\n      {data.map((row, index) => {\\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\\n        const newData = row.dataSource.filter((value) => {\\n          const bool = row.filter(value, depsValues);\\n          return bool;\\n        });\\n        const newDataSource = row.formatter(newData);\\n        return (\\n          <BaseSelect\\n            value={state[row.id]}\\n            depsValues={depsValues}\\n            onChange={(v) => {\\n              setState({\\n                ...state,\\n                [row.id]: v,\\n              });\\n            }}\\n            fetchDataSource={newDataSource}\\n            title={row.label}\\n          />\\n        );\\n      })}\\n    </div>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-联动-普通版本--异步联动\":{\"startLoc\":{\"col\":20,\"line\":96},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":20,\"line\":96},\"endBody\":{\"col\":1,\"line\":128}}}},\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\ninterface IBaseSelect {\n  title: string;\n  value: string;\n  onChange: (v: string) => void;\n  depsValues: string[];\n  fetchDataSource: { label: string; value: string }[];\n}\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst BaseSelect = (props: IBaseSelect) => {\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\n  const [state, setState] = useState({\n    loading: false,\n    dataSource: [] as { label: string; value: string }[],\n  });\n  const countRef = useRef(0);\n  useEffect(() => {\n    console.log('title', title, depsValues);\n    setState({\n      ...state,\n      loading: true,\n    });\n    // countRef.current++;\n    let recordCount = countRef.current;\n    async function anyNameFunction() {\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\n      setState({\n        loading: false,\n        dataSource: fetchDataSource,\n      });\n    }\n    anyNameFunction();\n  }, depsValues);\n  return (\n    <div>\n      <strong>{title}</strong>\n      <Select\n        state={state.loading ? 'loading' : undefined}\n        dataSource={state.dataSource}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\nconst data = [\n  {\n    label: '国家',\n    id: 'province',\n    dataSource: province,\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.province }));\n    },\n    filter: (relyValues) => {\n      return true;\n    },\n  },\n  {\n    label: '城市',\n    dataSource: city,\n    id: 'city',\n    filter: (v, depsValues) => {\n      const [province] = depsValues;\n      return v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.city }));\n    },\n  },\n  {\n    label: '区域',\n    dataSource: area,\n    id: 'area',\n    filter: (v, depsValues) => {\n      const [province, city] = depsValues;\n      return city\n        ? v.province === province && v.city === city\n        : v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.area }));\n    },\n  },\n];\nexport const 异步联动 = addSourceDecorator(() => {\n  const [state, setState] = useState({\n    province: '',\n    city: '',\n    area: '',\n  });\n  return (\n    <div>\n      {data.map((row, index) => {\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\n        const newData = row.dataSource.filter((value) => {\n          const bool = row.filter(value, depsValues);\n          return bool;\n        });\n        const newDataSource = row.formatter(newData);\n        return (\n          <BaseSelect\n            value={state[row.id]}\n            depsValues={depsValues}\n            onChange={(v) => {\n              setState({\n                ...state,\n                [row.id]: v,\n              });\n            }}\n            fetchDataSource={newDataSource}\n            title={row.label}\n          />\n        );\n      })}\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-联动-普通版本--异步联动":{startLoc:{col:20,line:118},endLoc:{col:139,line:150},startBody:{col:20,line:118},endBody:{col:139,line:150}}}},storySource:{source:"import React, { useState, useEffect } from 'react';\nimport '@alifd/next/dist/next.css';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '场景示例|联动|普通版本',\n  parameters: {\n    info: { inline: true },\n  },\n};\nimport { province, city, area } from 'province-city-china/data';\nimport { useRef } from 'react';\ninterface IBaseSelect {\n  title: string;\n  value: string;\n  onChange: (v: string) => void;\n  depsValues: string[];\n  fetchDataSource: { label: string; value: string }[];\n}\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst BaseSelect = (props: IBaseSelect) => {\n  const { fetchDataSource, depsValues, title, value, onChange } = props;\n  const [state, setState] = useState({\n    loading: false,\n    dataSource: [] as { label: string; value: string }[],\n  });\n  const countRef = useRef(0);\n  useEffect(() => {\n    console.log('title', title, depsValues);\n    setState({\n      ...state,\n      loading: true,\n    });\n    // countRef.current++;\n    let recordCount = countRef.current;\n    async function anyNameFunction() {\n      title === '城市' ? await pause(5000) : await pause(Math.random() * 2000);\n      fetchDataSource[0] && onChange(fetchDataSource[0].value);\n      setState({\n        loading: false,\n        dataSource: fetchDataSource,\n      });\n    }\n    anyNameFunction();\n  }, depsValues);\n  return (\n    <div>\n      <strong>{title}</strong>\n      <Select\n        state={state.loading ? 'loading' : undefined}\n        dataSource={state.dataSource}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\nconst data = [\n  {\n    label: '国家',\n    id: 'province',\n    dataSource: province,\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.province }));\n    },\n    filter: (relyValues) => {\n      return true;\n    },\n  },\n  {\n    label: '城市',\n    dataSource: city,\n    id: 'city',\n    filter: (v, depsValues) => {\n      const [province] = depsValues;\n      return v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.city }));\n    },\n  },\n  {\n    label: '区域',\n    dataSource: area,\n    id: 'area',\n    filter: (v, depsValues) => {\n      const [province, city] = depsValues;\n      return city\n        ? v.province === province && v.city === city\n        : v.province === province;\n    },\n    formatter: (data) => {\n      return data.map((item) => ({ label: item.name, value: item.area }));\n    },\n  },\n];\nexport const 异步联动 = () => {\n  const [state, setState] = useState({\n    province: '',\n    city: '',\n    area: '',\n  });\n  return (\n    <div>\n      {data.map((row, index) => {\n        const depsValues = data.slice(0, index).map((item) => state[item.id]);\n        const newData = row.dataSource.filter((value) => {\n          const bool = row.filter(value, depsValues);\n          return bool;\n        });\n        const newDataSource = row.formatter(newData);\n        return (\n          <BaseSelect\n            value={state[row.id]}\n            depsValues={depsValues}\n            onChange={(v) => {\n              setState({\n                ...state,\n                [row.id]: v,\n              });\n            }}\n            fetchDataSource={newDataSource}\n            title={row.label}\n          />\n        );\n      })}\n    </div>\n  );\n};\n",locationsMap:{"场景示例-联动-普通版本--异步联动":{startLoc:{col:20,line:96},endLoc:{col:1,line:128},startBody:{col:20,line:96},endBody:{col:1,line:128}}}},info:{inline:!0}}};const pause=t=>new Promise(resolve=>setTimeout(resolve,t)),BaseSelect=props=>{const{fetchDataSource:fetchDataSource,depsValues:depsValues,title:title,value:value,onChange:onChange}=props,[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)({loading:!1,dataSource:[]}),countRef=Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);return Object(react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{console.log("title",title,depsValues),setState(Object.assign(Object.assign({},state),{loading:!0}));countRef.current;!function anyNameFunction(){return __awaiter(this,void 0,void 0,(function*(){"城市"===title?yield pause(5e3):yield pause(2e3*Math.random()),fetchDataSource[0]&&onChange(fetchDataSource[0].value),setState({loading:!1,dataSource:fetchDataSource})}))}()},depsValues),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,title),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_2__.a,{state:state.loading?"loading":void 0,dataSource:state.dataSource,value:value,onChange:onChange}))},data=[{label:"国家",id:"province",dataSource:province_city_china_data__WEBPACK_IMPORTED_MODULE_3__.province,formatter:data=>data.map(item=>({label:item.name,value:item.province})),filter:relyValues=>!0},{label:"城市",dataSource:province_city_china_data__WEBPACK_IMPORTED_MODULE_3__.city,id:"city",filter:(v,depsValues)=>{const[province]=depsValues;return v.province===province},formatter:data=>data.map(item=>({label:item.name,value:item.city}))},{label:"区域",dataSource:province_city_china_data__WEBPACK_IMPORTED_MODULE_3__.area,id:"area",filter:(v,depsValues)=>{const[province,city]=depsValues;return city?v.province===province&&v.city===city:v.province===province},formatter:data=>data.map(item=>({label:item.name,value:item.area}))}],异步联动=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)({province:"",city:"",area:""});return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,data.map((row,index)=>{const depsValues=data.slice(0,index).map(item=>state[item.id]),newData=row.dataSource.filter(value=>row.filter(value,depsValues)),newDataSource=row.formatter(newData);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(BaseSelect,{value:state[row.id],depsValues:depsValues,onChange:v=>{setState(Object.assign(Object.assign({},state),{[row.id]:v}))},fetchDataSource:newDataSource,title:row.label})}))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascaderBase.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascaderBase.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/cascaderBase.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2175:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"环联动",(function(){return 环联动}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(104),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(38),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(226),_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(358),_alifd_next__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(273),addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  ReactionContext,\n  ReactionType,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { NumberPicker } from '@alifd/next';\nexport default {\n  title: '场景示例|循环依赖',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst view = (context) => {\n  const { value, next } = context;\n  return (\n    <NumberPicker\n      value={value}\n      onChange={(v) => {\n        next(v);\n      }}\n    ></NumberPicker>\n  );\n};\n\nenum View {\n  Total = 'Total',\n  Unit = 'Unit',\n  Amount = 'Amount',\n}\nconst bigWeight = 100;\nconst smallWeight = 10;\nconst data = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        return updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\nconst defaultValue = 3;\n// 同步的情况有问题，没有获取到最新的状态，\nexport const 环联动 = () => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<number, any, any, any>\n              id={item.id}\n              reaction={item.reaction}\n              deps={item.deps}\n              reactionType={ReactionType.Sync}\n              defaultValue={defaultValue}\n              render={view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n\nconst data2 = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    view: (context: DataContext<any, any, any>) => {\n      const { value, depsValues, nextById } = context;\n      const [amount, unit] = depsValues;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            nextById(View.Amount, v / unit);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\n",__ADDS_MAP__={"场景示例-循环依赖--环联动":{startLoc:{col:19,line:90},endLoc:{col:1,line:111},startBody:{col:19,line:90},endBody:{col:1,line:111}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|循环依赖",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React, { useCallback } from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  ReactionContext,\\\\n  ReactionType,\\\\n  DataContext,\\\\n} from \'@czwcode/rdx\';\\\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport { NumberPicker } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'场景示例|循环依赖\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst view = (context) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <NumberPicker\\\\n      value={value}\\\\n      onChange={(v) => {\\\\n        next(v);\\\\n      }}\\\\n    ></NumberPicker>\\\\n  );\\\\n};\\\\n\\\\nenum View {\\\\n  Total = \'Total\',\\\\n  Unit = \'Unit\',\\\\n  Amount = \'Amount\',\\\\n}\\\\nconst bigWeight = 100;\\\\nconst smallWeight = 10;\\\\nconst data = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        return updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\nconst defaultValue = 3;\\\\n// 同步的情况有问题，没有获取到最新的状态，\\\\nexport const 环联动 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<number, any, any, any>\\\\n              id={item.id}\\\\n              reaction={item.reaction}\\\\n              deps={item.deps}\\\\n              reactionType={ReactionType.Sync}\\\\n              defaultValue={defaultValue}\\\\n              render={view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst data2 = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    view: (context: DataContext<any, any, any>) => {\\\\n      const { value, depsValues, nextById } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            nextById(View.Amount, v / unit);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景示例-循环依赖--环联动\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":111},\\"startBody\\":{\\"col\\":19,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":111}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/circleDeps.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from \'react\';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from \'@czwcode/rdx\';\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport { NumberPicker } from \'@alifd/next\';\\nexport default {\\n  title: \'场景示例|循环依赖\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React, { useCallback } from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  ReactionContext,\\\\n  ReactionType,\\\\n  DataContext,\\\\n} from \'@czwcode/rdx\';\\\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport { NumberPicker } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'场景示例|循环依赖\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst view = (context) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <NumberPicker\\\\n      value={value}\\\\n      onChange={(v) => {\\\\n        next(v);\\\\n      }}\\\\n    ></NumberPicker>\\\\n  );\\\\n};\\\\n\\\\nenum View {\\\\n  Total = \'Total\',\\\\n  Unit = \'Unit\',\\\\n  Amount = \'Amount\',\\\\n}\\\\nconst bigWeight = 100;\\\\nconst smallWeight = 10;\\\\nconst data = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        return updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\nconst defaultValue = 3;\\\\n// 同步的情况有问题，没有获取到最新的状态，\\\\nexport const 环联动 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<number, any, any, any>\\\\n              id={item.id}\\\\n              reaction={item.reaction}\\\\n              deps={item.deps}\\\\n              reactionType={ReactionType.Sync}\\\\n              defaultValue={defaultValue}\\\\n              render={view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst data2 = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    view: (context: DataContext<any, any, any>) => {\\\\n      const { value, depsValues, nextById } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            nextById(View.Amount, v / unit);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\n\\",\\"locationsMap\\":{\\"场景示例-循环依赖--环联动\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":111},\\"startBody\\":{\\"col\\":19,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":111}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = \'Total\',\\n  Unit = \'Unit\',\\n  Amount = \'Amount\',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景示例-循环依赖--环联动":{"startLoc":{"col":19,"line":112},"endLoc":{"col":139,"line":133},"startBody":{"col":19,"line":112},"endBody":{"col":139,"line":133}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/circleDeps.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos";\n// @ts-ignore\nvar __STORY__ = "import React, { useCallback } from \'react\';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from \'@czwcode/rdx\';\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport { NumberPicker } from \'@alifd/next\';\\nexport default {\\n  title: \'场景示例|循环依赖\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = \'Total\',\\n  Unit = \'Unit\',\\n  Amount = \'Amount\',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景示例-循环依赖--环联动":{"startLoc":{"col":19,"line":90},"endLoc":{"col":1,"line":111},"startBody":{"col":19,"line":90},"endBody":{"col":1,"line":111}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/circleDeps.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from \'react\';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  ReactionContext,\n  ReactionType,\n  DataContext,\n} from \'@czwcode/rdx\';\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\nimport { NumberPicker } from \'@alifd/next\';\nexport default {\n  title: \'场景示例|循环依赖\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React, { useCallback } from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  ReactionContext,\\\\n  ReactionType,\\\\n  DataContext,\\\\n} from \'@czwcode/rdx\';\\\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport { NumberPicker } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'场景示例|循环依赖\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst view = (context) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <NumberPicker\\\\n      value={value}\\\\n      onChange={(v) => {\\\\n        next(v);\\\\n      }}\\\\n    ></NumberPicker>\\\\n  );\\\\n};\\\\n\\\\nenum View {\\\\n  Total = \'Total\',\\\\n  Unit = \'Unit\',\\\\n  Amount = \'Amount\',\\\\n}\\\\nconst bigWeight = 100;\\\\nconst smallWeight = 10;\\\\nconst data = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        return updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\nconst defaultValue = 3;\\\\n// 同步的情况有问题，没有获取到最新的状态，\\\\nexport const 环联动 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<number, any, any, any>\\\\n              id={item.id}\\\\n              reaction={item.reaction}\\\\n              deps={item.deps}\\\\n              reactionType={ReactionType.Sync}\\\\n              defaultValue={defaultValue}\\\\n              render={view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst data2 = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    view: (context: DataContext<any, any, any>) => {\\\\n      const { value, depsValues, nextById } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            nextById(View.Amount, v / unit);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景示例-循环依赖--环联动\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":111},\\"startBody\\":{\\"col\\":19,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":111}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/circleDeps.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from \'react\';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from \'@czwcode/rdx\';\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport { NumberPicker } from \'@alifd/next\';\\nexport default {\\n  title: \'场景示例|循环依赖\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React, { useCallback } from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  ReactionContext,\\\\n  ReactionType,\\\\n  DataContext,\\\\n} from \'@czwcode/rdx\';\\\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport { NumberPicker } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'场景示例|循环依赖\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst view = (context) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <NumberPicker\\\\n      value={value}\\\\n      onChange={(v) => {\\\\n        next(v);\\\\n      }}\\\\n    ></NumberPicker>\\\\n  );\\\\n};\\\\n\\\\nenum View {\\\\n  Total = \'Total\',\\\\n  Unit = \'Unit\',\\\\n  Amount = \'Amount\',\\\\n}\\\\nconst bigWeight = 100;\\\\nconst smallWeight = 10;\\\\nconst data = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        return updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\nconst defaultValue = 3;\\\\n// 同步的情况有问题，没有获取到最新的状态，\\\\nexport const 环联动 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      {data.map((item, index) => {\\\\n        return (\\\\n          <span>\\\\n            <div>{item.label}</div>\\\\n            <RdxView<number, any, any, any>\\\\n              id={item.id}\\\\n              reaction={item.reaction}\\\\n              deps={item.deps}\\\\n              reactionType={ReactionType.Sync}\\\\n              defaultValue={defaultValue}\\\\n              render={view}\\\\n            ></RdxView>\\\\n          </span>\\\\n        );\\\\n      })}\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst data2 = [\\\\n  {\\\\n    id: View.Total,\\\\n    label: \'总价\',\\\\n    deps: [\\\\n      { id: View.Amount, weight: bigWeight },\\\\n      { id: View.Unit, weight: bigWeight },\\\\n    ],\\\\n    view: (context: DataContext<any, any, any>) => {\\\\n      const { value, depsValues, nextById } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            nextById(View.Amount, v / unit);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [amount, unit] = depsValues;\\\\n      if (!amount || !unit) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(amount * unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Amount,\\\\n    label: \'数量\',\\\\n    deps: [\\\\n      { id: View.Total, weight: bigWeight },\\\\n      { id: View.Unit, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState: udpateState, value, depsValues } = context;\\\\n      const [total, unit] = depsValues;\\\\n      if (!total || !unit) {\\\\n        udpateState(value);\\\\n      }\\\\n      udpateState(total / unit);\\\\n    },\\\\n  },\\\\n  {\\\\n    id: View.Unit,\\\\n    label: \'单价\',\\\\n    deps: [\\\\n      { id: View.Total, weight: smallWeight },\\\\n      { id: View.Amount, weight: smallWeight },\\\\n    ],\\\\n    view: (context) => {\\\\n      const { value, next } = context;\\\\n      return (\\\\n        <NumberPicker\\\\n          value={value}\\\\n          onChange={(v) => {\\\\n            next(v);\\\\n          }}\\\\n        ></NumberPicker>\\\\n      );\\\\n    },\\\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\\\n      const { updateState, value, depsValues } = context;\\\\n      const [total, amount] = depsValues;\\\\n      if (!total || !amount) {\\\\n        updateState(value);\\\\n      }\\\\n      updateState(total / amount);\\\\n    },\\\\n  },\\\\n];\\\\n\\",\\"locationsMap\\":{\\"场景示例-循环依赖--环联动\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":111},\\"startBody\\":{\\"col\\":19,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":111}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = \'Total\',\\n  Unit = \'Unit\',\\n  Amount = \'Amount\',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n","locationsMap":{"场景示例-循环依赖--环联动":{"startLoc":{"col":19,"line":112},"endLoc":{"col":139,"line":133},"startBody":{"col":19,"line":112},"endBody":{"col":139,"line":133}}}},"storySource":{"source":"import React, { useCallback } from \'react\';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from \'@czwcode/rdx\';\\nimport { DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport { NumberPicker } from \'@alifd/next\';\\nexport default {\\n  title: \'场景示例|循环依赖\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = \'Total\',\\n  Unit = \'Unit\',\\n  Amount = \'Amount\',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: \'总价\',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: \'数量\',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: \'单价\',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n","locationsMap":{"场景示例-循环依赖--环联动":{"startLoc":{"col":19,"line":90},"endLoc":{"col":1,"line":111},"startBody":{"col":19,"line":90},"endBody":{"col":1,"line":111}}}},\n    info: { inline: true },\n  },\n};\n\nconst view = (context) => {\n  const { value, next } = context;\n  return (\n    <NumberPicker\n      value={value}\n      onChange={(v) => {\n        next(v);\n      }}\n    ></NumberPicker>\n  );\n};\n\nenum View {\n  Total = \'Total\',\n  Unit = \'Unit\',\n  Amount = \'Amount\',\n}\nconst bigWeight = 100;\nconst smallWeight = 10;\nconst data = [\n  {\n    id: View.Total,\n    label: \'总价\',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        return updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: \'数量\',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: \'单价\',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\nconst defaultValue = 3;\n// 同步的情况有问题，没有获取到最新的状态，\nexport const 环联动 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<number, any, any, any>\n              id={item.id}\n              reaction={item.reaction}\n              deps={item.deps}\n              reactionType={ReactionType.Sync}\n              defaultValue={defaultValue}\n              render={view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nconst data2 = [\n  {\n    id: View.Total,\n    label: \'总价\',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    view: (context: DataContext<any, any, any>) => {\n      const { value, depsValues, nextById } = context;\n      const [amount, unit] = depsValues;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            nextById(View.Amount, v / unit);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: \'数量\',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: \'单价\',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\n',locationsMap:{"场景示例-循环依赖--环联动":{startLoc:{col:19,line:134},endLoc:{col:277,line:155},startBody:{col:19,line:134},endBody:{col:277,line:155}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport { NumberPicker } from '@alifd/next';\\nexport default {\\n  title: '场景示例|循环依赖',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = 'Total',\\n  Unit = 'Unit',\\n  Amount = 'Amount',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: '总价',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: '数量',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: '单价',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: '总价',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: '数量',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: '单价',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-循环依赖--环联动\":{\"startLoc\":{\"col\":19,\"line\":90},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":19,\"line\":90},\"endBody\":{\"col\":1,\"line\":111}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/circleDeps.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  ReactionContext,\n  ReactionType,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { NumberPicker } from '@alifd/next';\nexport default {\n  title: '场景示例|循环依赖',\n  parameters: {\"storySource\":{\"source\":\"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  ReactionContext,\\n  ReactionType,\\n  DataContext,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport { NumberPicker } from '@alifd/next';\\nexport default {\\n  title: '场景示例|循环依赖',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst view = (context) => {\\n  const { value, next } = context;\\n  return (\\n    <NumberPicker\\n      value={value}\\n      onChange={(v) => {\\n        next(v);\\n      }}\\n    ></NumberPicker>\\n  );\\n};\\n\\nenum View {\\n  Total = 'Total',\\n  Unit = 'Unit',\\n  Amount = 'Amount',\\n}\\nconst bigWeight = 100;\\nconst smallWeight = 10;\\nconst data = [\\n  {\\n    id: View.Total,\\n    label: '总价',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        return updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: '数量',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: '单价',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\nconst defaultValue = 3;\\n// 同步的情况有问题，没有获取到最新的状态，\\nexport const 环联动 = () => {\\n  return (\\n    <RdxContext>\\n      {data.map((item, index) => {\\n        return (\\n          <span>\\n            <div>{item.label}</div>\\n            <RdxView<number, any, any, any>\\n              id={item.id}\\n              reaction={item.reaction}\\n              deps={item.deps}\\n              reactionType={ReactionType.Sync}\\n              defaultValue={defaultValue}\\n              render={view}\\n            ></RdxView>\\n          </span>\\n        );\\n      })}\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\nconst data2 = [\\n  {\\n    id: View.Total,\\n    label: '总价',\\n    deps: [\\n      { id: View.Amount, weight: bigWeight },\\n      { id: View.Unit, weight: bigWeight },\\n    ],\\n    view: (context: DataContext<any, any, any>) => {\\n      const { value, depsValues, nextById } = context;\\n      const [amount, unit] = depsValues;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            nextById(View.Amount, v / unit);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [amount, unit] = depsValues;\\n      if (!amount || !unit) {\\n        updateState(value);\\n      }\\n      updateState(amount * unit);\\n    },\\n  },\\n  {\\n    id: View.Amount,\\n    label: '数量',\\n    deps: [\\n      { id: View.Total, weight: bigWeight },\\n      { id: View.Unit, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState: udpateState, value, depsValues } = context;\\n      const [total, unit] = depsValues;\\n      if (!total || !unit) {\\n        udpateState(value);\\n      }\\n      udpateState(total / unit);\\n    },\\n  },\\n  {\\n    id: View.Unit,\\n    label: '单价',\\n    deps: [\\n      { id: View.Total, weight: smallWeight },\\n      { id: View.Amount, weight: smallWeight },\\n    ],\\n    view: (context) => {\\n      const { value, next } = context;\\n      return (\\n        <NumberPicker\\n          value={value}\\n          onChange={(v) => {\\n            next(v);\\n          }}\\n        ></NumberPicker>\\n      );\\n    },\\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\\n      const { updateState, value, depsValues } = context;\\n      const [total, amount] = depsValues;\\n      if (!total || !amount) {\\n        updateState(value);\\n      }\\n      updateState(total / amount);\\n    },\\n  },\\n];\\n\",\"locationsMap\":{\"场景示例-循环依赖--环联动\":{\"startLoc\":{\"col\":19,\"line\":90},\"endLoc\":{\"col\":1,\"line\":111},\"startBody\":{\"col\":19,\"line\":90},\"endBody\":{\"col\":1,\"line\":111}}}},\n    info: { inline: true },\n  },\n};\n\nconst view = (context) => {\n  const { value, next } = context;\n  return (\n    <NumberPicker\n      value={value}\n      onChange={(v) => {\n        next(v);\n      }}\n    ></NumberPicker>\n  );\n};\n\nenum View {\n  Total = 'Total',\n  Unit = 'Unit',\n  Amount = 'Amount',\n}\nconst bigWeight = 100;\nconst smallWeight = 10;\nconst data = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        return updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\nconst defaultValue = 3;\n// 同步的情况有问题，没有获取到最新的状态，\nexport const 环联动 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<number, any, any, any>\n              id={item.id}\n              reaction={item.reaction}\n              deps={item.deps}\n              reactionType={ReactionType.Sync}\n              defaultValue={defaultValue}\n              render={view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nconst data2 = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    view: (context: DataContext<any, any, any>) => {\n      const { value, depsValues, nextById } = context;\n      const [amount, unit] = depsValues;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            nextById(View.Amount, v / unit);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\n",locationsMap:{"场景示例-循环依赖--环联动":{startLoc:{col:19,line:112},endLoc:{col:139,line:133},startBody:{col:19,line:112},endBody:{col:139,line:133}}}},storySource:{source:"import React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  ReactionContext,\n  ReactionType,\n  DataContext,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { NumberPicker } from '@alifd/next';\nexport default {\n  title: '场景示例|循环依赖',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst view = (context) => {\n  const { value, next } = context;\n  return (\n    <NumberPicker\n      value={value}\n      onChange={(v) => {\n        next(v);\n      }}\n    ></NumberPicker>\n  );\n};\n\nenum View {\n  Total = 'Total',\n  Unit = 'Unit',\n  Amount = 'Amount',\n}\nconst bigWeight = 100;\nconst smallWeight = 10;\nconst data = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        return updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\nconst defaultValue = 3;\n// 同步的情况有问题，没有获取到最新的状态，\nexport const 环联动 = () => {\n  return (\n    <RdxContext>\n      {data.map((item, index) => {\n        return (\n          <span>\n            <div>{item.label}</div>\n            <RdxView<number, any, any, any>\n              id={item.id}\n              reaction={item.reaction}\n              deps={item.deps}\n              reactionType={ReactionType.Sync}\n              defaultValue={defaultValue}\n              render={view}\n            ></RdxView>\n          </span>\n        );\n      })}\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n\nconst data2 = [\n  {\n    id: View.Total,\n    label: '总价',\n    deps: [\n      { id: View.Amount, weight: bigWeight },\n      { id: View.Unit, weight: bigWeight },\n    ],\n    view: (context: DataContext<any, any, any>) => {\n      const { value, depsValues, nextById } = context;\n      const [amount, unit] = depsValues;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            nextById(View.Amount, v / unit);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [amount, unit] = depsValues;\n      if (!amount || !unit) {\n        updateState(value);\n      }\n      updateState(amount * unit);\n    },\n  },\n  {\n    id: View.Amount,\n    label: '数量',\n    deps: [\n      { id: View.Total, weight: bigWeight },\n      { id: View.Unit, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState: udpateState, value, depsValues } = context;\n      const [total, unit] = depsValues;\n      if (!total || !unit) {\n        udpateState(value);\n      }\n      udpateState(total / unit);\n    },\n  },\n  {\n    id: View.Unit,\n    label: '单价',\n    deps: [\n      { id: View.Total, weight: smallWeight },\n      { id: View.Amount, weight: smallWeight },\n    ],\n    view: (context) => {\n      const { value, next } = context;\n      return (\n        <NumberPicker\n          value={value}\n          onChange={(v) => {\n            next(v);\n          }}\n        ></NumberPicker>\n      );\n    },\n    reaction: (context: ReactionContext<number, [number, number], any>) => {\n      const { updateState, value, depsValues } = context;\n      const [total, amount] = depsValues;\n      if (!total || !amount) {\n        updateState(value);\n      }\n      updateState(total / amount);\n    },\n  },\n];\n",locationsMap:{"场景示例-循环依赖--环联动":{startLoc:{col:19,line:90},endLoc:{col:1,line:111},startBody:{col:19,line:90},endBody:{col:1,line:111}}}},info:{inline:!0}}};const view=context=>{const{value:value,next:next}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_5__.a,{value:value,onChange:v=>{next(v)}})};var View;!function(View){View.Total="Total",View.Unit="Unit",View.Amount="Amount"}(View||(View={}));const data=[{id:View.Total,label:"总价",deps:[{id:View.Amount,weight:100},{id:View.Unit,weight:100}],reaction:context=>{const{updateState:updateState,value:value,depsValues:depsValues}=context,[amount,unit]=depsValues;if(!amount||!unit)return updateState(value);updateState(amount*unit)}},{id:View.Amount,label:"数量",deps:[{id:View.Total,weight:100},{id:View.Unit,weight:10}],reaction:context=>{const{updateState:udpateState,value:value,depsValues:depsValues}=context,[total,unit]=depsValues;total&&unit||udpateState(value),udpateState(total/unit)}},{id:View.Unit,label:"单价",deps:[{id:View.Total,weight:10},{id:View.Amount,weight:10}],reaction:context=>{const{updateState:updateState,value:value,depsValues:depsValues}=context,[total,amount]=depsValues;total&&amount||updateState(value),updateState(total/amount)}}],环联动=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,null,data.map((item,index)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,item.label),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:item.id,reaction:item.reaction,deps:item.deps,reactionType:_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a.Sync,defaultValue:3,render:view}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_plugins__WEBPACK_IMPORTED_MODULE_4__.a,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/circleDeps.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/circleDeps.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/circleDeps.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});View.Total,View.Amount,View.Unit,View.Amount,View.Total,View.Unit,View.Unit,View.Total,View.Amount},2176:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"可编辑表格_普通版本",(function(){return 可编辑表格_普通版本})),__webpack_require__.d(__webpack_exports__,"可编辑表格_Rdx版本",(function(){return 可编辑表格_Rdx版本}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(38),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(104),_alifd_next__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(357),_alifd_next__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(171),immer__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(350),addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React from 'react';\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\nimport { Table, Input, Select } from '@alifd/next';\nimport { produce } from 'immer';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nexport default {\n  title: '场景示例|点对点更新|可编辑的表格',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nfunction createResult() {\n  const size = 20;\n  let result = [];\n  for (let index = 0; index < size; index++) {\n    result.push({\n      title: '标题' + index,\n      time: index,\n      id: '名称' + index,\n      title1: '名称' + index,\n      title2: '名称' + index,\n      title3: '名称' + index,\n      title4: '名称' + index,\n      title5: '名称' + index,\n      title6: '名称' + index,\n      title7: '名称' + index,\n      title8: '名称' + index,\n      title9: '名称' + index,\n      title10: '名称' + index,\n    });\n  }\n  return result;\n}\nconst result = createResult();\nfunction createDataSource() {\n  let size = 100;\n  const data = [];\n  for (let index = 0; index < size; index++) {\n    data.push({\n      label: '测试文本' + index,\n      value: index + '',\n    });\n  }\n  return data;\n}\nconst dataSource = createDataSource();\nconst EditablePane = (props: { value: any; onChange: any }) => {\n  const { value, onChange } = props;\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\n};\n\nexport const 可编辑表格_普通版本 = () => {\n  const [state, setState] = useState(result);\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <EditablePane\n        value={value}\n        onChange={(value) => {\n          setState((state) =>\n            produce(state, (dataSource) => {\n              dataSource[index][dataIndex] = value;\n            })\n          );\n        }}\n      />\n    );\n  }, []);\n  return (\n    <div>\n      <Table dataSource={state}>\n        <Table.Column\n          cell={renderCell.bind(null, 'time')}\n          title='Time'\n          dataIndex='time'\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title'\n          cell={renderCell.bind(null, 'title')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title1'\n          cell={renderCell.bind(null, 'title1')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='titl2'\n          cell={renderCell.bind(null, 'titl2')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='tite3'\n          cell={renderCell.bind(null, 'tite3')}\n        />\n      </Table>\n    </div>\n  );\n};\nconst view = (context: DataContext<any, any, any>) => {\n  const { value, next } = context;\n  return (\n    <EditablePane\n      value={value}\n      onChange={(value) => {\n        next(value);\n      }}\n    />\n  );\n};\n\nconst getResult = () => {\n  const datas = {};\n  result.forEach((row, rowIndex) => {\n    columns.forEach((column) => {\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\n    });\n  });\n  return datas;\n};\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\nconst resultData = getResult();\nexport const 可编辑表格_Rdx版本 = () => {\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <RdxView\n        recordStatus={false}\n        id={`${dataIndex}-${index}`}\n        render={view}\n      ></RdxView>\n    );\n  }, []);\n  return (\n    <RdxContext state={resultData}>\n      <Table dataSource={result}>\n        {columns.map((column) => (\n          <Table.Column\n            cell={renderCell.bind(null, column)}\n            title={column}\n            dataIndex={column}\n          />\n        ))}\n      </Table>\n    </RdxContext>\n  );\n};\n",__ADDS_MAP__={"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本":{startLoc:{col:26,line:54},endLoc:{col:1,line:101},startBody:{col:26,line:54},endBody:{col:1,line:101}},"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本":{startLoc:{col:27,line:125},endLoc:{col:1,line:148},startBody:{col:27,line:125},endBody:{col:1,line:148}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|点对点更新|可编辑的表格",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { Table, Input, Select } from '@alifd/next';\\\\nimport { produce } from 'immer';\\\\nimport { useState } from 'react';\\\\nimport { useCallback } from 'react';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|可编辑的表格',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction createResult() {\\\\n  const size = 20;\\\\n  let result = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    result.push({\\\\n      title: '标题' + index,\\\\n      time: index,\\\\n      id: '名称' + index,\\\\n      title1: '名称' + index,\\\\n      title2: '名称' + index,\\\\n      title3: '名称' + index,\\\\n      title4: '名称' + index,\\\\n      title5: '名称' + index,\\\\n      title6: '名称' + index,\\\\n      title7: '名称' + index,\\\\n      title8: '名称' + index,\\\\n      title9: '名称' + index,\\\\n      title10: '名称' + index,\\\\n    });\\\\n  }\\\\n  return result;\\\\n}\\\\nconst result = createResult();\\\\nfunction createDataSource() {\\\\n  let size = 100;\\\\n  const data = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    data.push({\\\\n      label: '测试文本' + index,\\\\n      value: index + '',\\\\n    });\\\\n  }\\\\n  return data;\\\\n}\\\\nconst dataSource = createDataSource();\\\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\\\n  const { value, onChange } = props;\\\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\\\n};\\\\n\\\\nexport const 可编辑表格_普通版本 = () => {\\\\n  const [state, setState] = useState(result);\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <EditablePane\\\\n        value={value}\\\\n        onChange={(value) => {\\\\n          setState((state) =>\\\\n            produce(state, (dataSource) => {\\\\n              dataSource[index][dataIndex] = value;\\\\n            })\\\\n          );\\\\n        }}\\\\n      />\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      <Table dataSource={state}>\\\\n        <Table.Column\\\\n          cell={renderCell.bind(null, 'time')}\\\\n          title='Time'\\\\n          dataIndex='time'\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title'\\\\n          cell={renderCell.bind(null, 'title')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title1'\\\\n          cell={renderCell.bind(null, 'title1')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='titl2'\\\\n          cell={renderCell.bind(null, 'titl2')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='tite3'\\\\n          cell={renderCell.bind(null, 'tite3')}\\\\n        />\\\\n      </Table>\\\\n    </div>\\\\n  );\\\\n};\\\\nconst view = (context: DataContext<any, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <EditablePane\\\\n      value={value}\\\\n      onChange={(value) => {\\\\n        next(value);\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst getResult = () => {\\\\n  const datas = {};\\\\n  result.forEach((row, rowIndex) => {\\\\n    columns.forEach((column) => {\\\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\\\nconst resultData = getResult();\\\\nexport const 可编辑表格_Rdx版本 = () => {\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <RdxView\\\\n        recordStatus={false}\\\\n        id={`${dataIndex}-${index}`}\\\\n        render={view}\\\\n      ></RdxView>\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={resultData}>\\\\n      <Table dataSource={result}>\\\\n        {columns.map((column) => (\\\\n          <Table.Column\\\\n            cell={renderCell.bind(null, column)}\\\\n            title={column}\\\\n            dataIndex={column}\\\\n          />\\\\n        ))}\\\\n      </Table>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\\\":{\\\"startLoc\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":101},\\\"startBody\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":101}},\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/editTable.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { Table, Input, Select } from '@alifd/next';\\\\nimport { produce } from 'immer';\\\\nimport { useState } from 'react';\\\\nimport { useCallback } from 'react';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|可编辑的表格',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction createResult() {\\\\n  const size = 20;\\\\n  let result = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    result.push({\\\\n      title: '标题' + index,\\\\n      time: index,\\\\n      id: '名称' + index,\\\\n      title1: '名称' + index,\\\\n      title2: '名称' + index,\\\\n      title3: '名称' + index,\\\\n      title4: '名称' + index,\\\\n      title5: '名称' + index,\\\\n      title6: '名称' + index,\\\\n      title7: '名称' + index,\\\\n      title8: '名称' + index,\\\\n      title9: '名称' + index,\\\\n      title10: '名称' + index,\\\\n    });\\\\n  }\\\\n  return result;\\\\n}\\\\nconst result = createResult();\\\\nfunction createDataSource() {\\\\n  let size = 100;\\\\n  const data = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    data.push({\\\\n      label: '测试文本' + index,\\\\n      value: index + '',\\\\n    });\\\\n  }\\\\n  return data;\\\\n}\\\\nconst dataSource = createDataSource();\\\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\\\n  const { value, onChange } = props;\\\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\\\n};\\\\n\\\\nexport const 可编辑表格_普通版本 = () => {\\\\n  const [state, setState] = useState(result);\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <EditablePane\\\\n        value={value}\\\\n        onChange={(value) => {\\\\n          setState((state) =>\\\\n            produce(state, (dataSource) => {\\\\n              dataSource[index][dataIndex] = value;\\\\n            })\\\\n          );\\\\n        }}\\\\n      />\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      <Table dataSource={state}>\\\\n        <Table.Column\\\\n          cell={renderCell.bind(null, 'time')}\\\\n          title='Time'\\\\n          dataIndex='time'\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title'\\\\n          cell={renderCell.bind(null, 'title')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title1'\\\\n          cell={renderCell.bind(null, 'title1')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='titl2'\\\\n          cell={renderCell.bind(null, 'titl2')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='tite3'\\\\n          cell={renderCell.bind(null, 'tite3')}\\\\n        />\\\\n      </Table>\\\\n    </div>\\\\n  );\\\\n};\\\\nconst view = (context: DataContext<any, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <EditablePane\\\\n      value={value}\\\\n      onChange={(value) => {\\\\n        next(value);\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst getResult = () => {\\\\n  const datas = {};\\\\n  result.forEach((row, rowIndex) => {\\\\n    columns.forEach((column) => {\\\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\\\nconst resultData = getResult();\\\\nexport const 可编辑表格_Rdx版本 = () => {\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <RdxView\\\\n        recordStatus={false}\\\\n        id={`${dataIndex}-${index}`}\\\\n        render={view}\\\\n      ></RdxView>\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={resultData}>\\\\n      <Table dataSource={result}>\\\\n        {columns.map((column) => (\\\\n          <Table.Column\\\\n            cell={renderCell.bind(null, column)}\\\\n            title={column}\\\\n            dataIndex={column}\\\\n          />\\\\n        ))}\\\\n      </Table>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\\\":{\\\"startLoc\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":101},\\\"startBody\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":101}},\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = addSourceDecorator(() => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = addSourceDecorator(() => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":76},\"endLoc\":{\"col\":139,\"line\":123},\"startBody\":{\"col\":26,\"line\":76},\"endBody\":{\"col\":139,\"line\":123}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":147},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":27,\"line\":147},\"endBody\":{\"col\":139,\"line\":170}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/editTable.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = () => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n};\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = () => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":54},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":26,\"line\":54},\"endBody\":{\"col\":1,\"line\":101}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":125},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":27,\"line\":125},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/editTable.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\nimport { Table, Input, Select } from '@alifd/next';\nimport { produce } from 'immer';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nexport default {\n  title: '场景示例|点对点更新|可编辑的表格',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { Table, Input, Select } from '@alifd/next';\\\\nimport { produce } from 'immer';\\\\nimport { useState } from 'react';\\\\nimport { useCallback } from 'react';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|可编辑的表格',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction createResult() {\\\\n  const size = 20;\\\\n  let result = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    result.push({\\\\n      title: '标题' + index,\\\\n      time: index,\\\\n      id: '名称' + index,\\\\n      title1: '名称' + index,\\\\n      title2: '名称' + index,\\\\n      title3: '名称' + index,\\\\n      title4: '名称' + index,\\\\n      title5: '名称' + index,\\\\n      title6: '名称' + index,\\\\n      title7: '名称' + index,\\\\n      title8: '名称' + index,\\\\n      title9: '名称' + index,\\\\n      title10: '名称' + index,\\\\n    });\\\\n  }\\\\n  return result;\\\\n}\\\\nconst result = createResult();\\\\nfunction createDataSource() {\\\\n  let size = 100;\\\\n  const data = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    data.push({\\\\n      label: '测试文本' + index,\\\\n      value: index + '',\\\\n    });\\\\n  }\\\\n  return data;\\\\n}\\\\nconst dataSource = createDataSource();\\\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\\\n  const { value, onChange } = props;\\\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\\\n};\\\\n\\\\nexport const 可编辑表格_普通版本 = () => {\\\\n  const [state, setState] = useState(result);\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <EditablePane\\\\n        value={value}\\\\n        onChange={(value) => {\\\\n          setState((state) =>\\\\n            produce(state, (dataSource) => {\\\\n              dataSource[index][dataIndex] = value;\\\\n            })\\\\n          );\\\\n        }}\\\\n      />\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      <Table dataSource={state}>\\\\n        <Table.Column\\\\n          cell={renderCell.bind(null, 'time')}\\\\n          title='Time'\\\\n          dataIndex='time'\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title'\\\\n          cell={renderCell.bind(null, 'title')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title1'\\\\n          cell={renderCell.bind(null, 'title1')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='titl2'\\\\n          cell={renderCell.bind(null, 'titl2')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='tite3'\\\\n          cell={renderCell.bind(null, 'tite3')}\\\\n        />\\\\n      </Table>\\\\n    </div>\\\\n  );\\\\n};\\\\nconst view = (context: DataContext<any, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <EditablePane\\\\n      value={value}\\\\n      onChange={(value) => {\\\\n        next(value);\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst getResult = () => {\\\\n  const datas = {};\\\\n  result.forEach((row, rowIndex) => {\\\\n    columns.forEach((column) => {\\\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\\\nconst resultData = getResult();\\\\nexport const 可编辑表格_Rdx版本 = () => {\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <RdxView\\\\n        recordStatus={false}\\\\n        id={`${dataIndex}-${index}`}\\\\n        render={view}\\\\n      ></RdxView>\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={resultData}>\\\\n      <Table dataSource={result}>\\\\n        {columns.map((column) => (\\\\n          <Table.Column\\\\n            cell={renderCell.bind(null, column)}\\\\n            title={column}\\\\n            dataIndex={column}\\\\n          />\\\\n        ))}\\\\n      </Table>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\\\":{\\\"startLoc\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":101},\\\"startBody\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":101}},\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/editTable.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\\\nimport { Table, Input, Select } from '@alifd/next';\\\\nimport { produce } from 'immer';\\\\nimport { useState } from 'react';\\\\nimport { useCallback } from 'react';\\\\nexport default {\\\\n  title: '场景示例|点对点更新|可编辑的表格',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction createResult() {\\\\n  const size = 20;\\\\n  let result = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    result.push({\\\\n      title: '标题' + index,\\\\n      time: index,\\\\n      id: '名称' + index,\\\\n      title1: '名称' + index,\\\\n      title2: '名称' + index,\\\\n      title3: '名称' + index,\\\\n      title4: '名称' + index,\\\\n      title5: '名称' + index,\\\\n      title6: '名称' + index,\\\\n      title7: '名称' + index,\\\\n      title8: '名称' + index,\\\\n      title9: '名称' + index,\\\\n      title10: '名称' + index,\\\\n    });\\\\n  }\\\\n  return result;\\\\n}\\\\nconst result = createResult();\\\\nfunction createDataSource() {\\\\n  let size = 100;\\\\n  const data = [];\\\\n  for (let index = 0; index < size; index++) {\\\\n    data.push({\\\\n      label: '测试文本' + index,\\\\n      value: index + '',\\\\n    });\\\\n  }\\\\n  return data;\\\\n}\\\\nconst dataSource = createDataSource();\\\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\\\n  const { value, onChange } = props;\\\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\\\n};\\\\n\\\\nexport const 可编辑表格_普通版本 = () => {\\\\n  const [state, setState] = useState(result);\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <EditablePane\\\\n        value={value}\\\\n        onChange={(value) => {\\\\n          setState((state) =>\\\\n            produce(state, (dataSource) => {\\\\n              dataSource[index][dataIndex] = value;\\\\n            })\\\\n          );\\\\n        }}\\\\n      />\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <div>\\\\n      <Table dataSource={state}>\\\\n        <Table.Column\\\\n          cell={renderCell.bind(null, 'time')}\\\\n          title='Time'\\\\n          dataIndex='time'\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title'\\\\n          cell={renderCell.bind(null, 'title')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='title1'\\\\n          cell={renderCell.bind(null, 'title1')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='titl2'\\\\n          cell={renderCell.bind(null, 'titl2')}\\\\n        />\\\\n        <Table.Column\\\\n          title='Title'\\\\n          dataIndex='tite3'\\\\n          cell={renderCell.bind(null, 'tite3')}\\\\n        />\\\\n      </Table>\\\\n    </div>\\\\n  );\\\\n};\\\\nconst view = (context: DataContext<any, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return (\\\\n    <EditablePane\\\\n      value={value}\\\\n      onChange={(value) => {\\\\n        next(value);\\\\n      }}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nconst getResult = () => {\\\\n  const datas = {};\\\\n  result.forEach((row, rowIndex) => {\\\\n    columns.forEach((column) => {\\\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\\\n    });\\\\n  });\\\\n  return datas;\\\\n};\\\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\\\nconst resultData = getResult();\\\\nexport const 可编辑表格_Rdx版本 = () => {\\\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\\\n    return (\\\\n      <RdxView\\\\n        recordStatus={false}\\\\n        id={`${dataIndex}-${index}`}\\\\n        render={view}\\\\n      ></RdxView>\\\\n    );\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={resultData}>\\\\n      <Table dataSource={result}>\\\\n        {columns.map((column) => (\\\\n          <Table.Column\\\\n            cell={renderCell.bind(null, column)}\\\\n            title={column}\\\\n            dataIndex={column}\\\\n          />\\\\n        ))}\\\\n      </Table>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\\\":{\\\"startLoc\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":101},\\\"startBody\\\":{\\\"col\\\":26,\\\"line\\\":54},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":101}},\\\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":148},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":125},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":148}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = addSourceDecorator(() => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = addSourceDecorator(() => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\",\"locationsMap\":{\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":76},\"endLoc\":{\"col\":139,\"line\":123},\"startBody\":{\"col\":26,\"line\":76},\"endBody\":{\"col\":139,\"line\":123}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":147},\"endLoc\":{\"col\":139,\"line\":170},\"startBody\":{\"col\":27,\"line\":147},\"endBody\":{\"col\":139,\"line\":170}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = () => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n};\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = () => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":54},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":26,\"line\":54},\"endBody\":{\"col\":1,\"line\":101}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":125},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":27,\"line\":125},\"endBody\":{\"col\":1,\"line\":148}}}},\n    info: { inline: true },\n  },\n};\n\nfunction createResult() {\n  const size = 20;\n  let result = [];\n  for (let index = 0; index < size; index++) {\n    result.push({\n      title: '标题' + index,\n      time: index,\n      id: '名称' + index,\n      title1: '名称' + index,\n      title2: '名称' + index,\n      title3: '名称' + index,\n      title4: '名称' + index,\n      title5: '名称' + index,\n      title6: '名称' + index,\n      title7: '名称' + index,\n      title8: '名称' + index,\n      title9: '名称' + index,\n      title10: '名称' + index,\n    });\n  }\n  return result;\n}\nconst result = createResult();\nfunction createDataSource() {\n  let size = 100;\n  const data = [];\n  for (let index = 0; index < size; index++) {\n    data.push({\n      label: '测试文本' + index,\n      value: index + '',\n    });\n  }\n  return data;\n}\nconst dataSource = createDataSource();\nconst EditablePane = (props: { value: any; onChange: any }) => {\n  const { value, onChange } = props;\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\n};\n\nexport const 可编辑表格_普通版本 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = useState(result);\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <EditablePane\n        value={value}\n        onChange={(value) => {\n          setState((state) =>\n            produce(state, (dataSource) => {\n              dataSource[index][dataIndex] = value;\n            })\n          );\n        }}\n      />\n    );\n  }, []);\n  return (\n    <div>\n      <Table dataSource={state}>\n        <Table.Column\n          cell={renderCell.bind(null, 'time')}\n          title='Time'\n          dataIndex='time'\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title'\n          cell={renderCell.bind(null, 'title')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title1'\n          cell={renderCell.bind(null, 'title1')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='titl2'\n          cell={renderCell.bind(null, 'titl2')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='tite3'\n          cell={renderCell.bind(null, 'tite3')}\n        />\n      </Table>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nconst view = (context: DataContext<any, any, any>) => {\n  const { value, next } = context;\n  return (\n    <EditablePane\n      value={value}\n      onChange={(value) => {\n        next(value);\n      }}\n    />\n  );\n};\n\nconst getResult = () => {\n  const datas = {};\n  result.forEach((row, rowIndex) => {\n    columns.forEach((column) => {\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\n    });\n  });\n  return datas;\n};\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\nconst resultData = getResult();\nexport const 可编辑表格_Rdx版本 = addSourceDecorator(addSourceDecorator(() => {\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <RdxView\n        recordStatus={false}\n        id={`${dataIndex}-${index}`}\n        render={view}\n      ></RdxView>\n    );\n  }, []);\n  return (\n    <RdxContext state={resultData}>\n      <Table dataSource={result}>\n        {columns.map((column) => (\n          <Table.Column\n            cell={renderCell.bind(null, column)}\n            title={column}\n            dataIndex={column}\n          />\n        ))}\n      </Table>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本":{startLoc:{col:26,line:98},endLoc:{col:277,line:145},startBody:{col:26,line:98},endBody:{col:277,line:145}},"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本":{startLoc:{col:27,line:169},endLoc:{col:277,line:192},startBody:{col:27,line:169},endBody:{col:277,line:192}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = () => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n};\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = () => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":54},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":26,\"line\":54},\"endBody\":{\"col\":1,\"line\":101}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":125},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":27,\"line\":125},\"endBody\":{\"col\":1,\"line\":148}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/editTable.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\nimport { Table, Input, Select } from '@alifd/next';\nimport { produce } from 'immer';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nexport default {\n  title: '场景示例|点对点更新|可编辑的表格',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\\nimport { Table, Input, Select } from '@alifd/next';\\nimport { produce } from 'immer';\\nimport { useState } from 'react';\\nimport { useCallback } from 'react';\\nexport default {\\n  title: '场景示例|点对点更新|可编辑的表格',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction createResult() {\\n  const size = 20;\\n  let result = [];\\n  for (let index = 0; index < size; index++) {\\n    result.push({\\n      title: '标题' + index,\\n      time: index,\\n      id: '名称' + index,\\n      title1: '名称' + index,\\n      title2: '名称' + index,\\n      title3: '名称' + index,\\n      title4: '名称' + index,\\n      title5: '名称' + index,\\n      title6: '名称' + index,\\n      title7: '名称' + index,\\n      title8: '名称' + index,\\n      title9: '名称' + index,\\n      title10: '名称' + index,\\n    });\\n  }\\n  return result;\\n}\\nconst result = createResult();\\nfunction createDataSource() {\\n  let size = 100;\\n  const data = [];\\n  for (let index = 0; index < size; index++) {\\n    data.push({\\n      label: '测试文本' + index,\\n      value: index + '',\\n    });\\n  }\\n  return data;\\n}\\nconst dataSource = createDataSource();\\nconst EditablePane = (props: { value: any; onChange: any }) => {\\n  const { value, onChange } = props;\\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\\n};\\n\\nexport const 可编辑表格_普通版本 = () => {\\n  const [state, setState] = useState(result);\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <EditablePane\\n        value={value}\\n        onChange={(value) => {\\n          setState((state) =>\\n            produce(state, (dataSource) => {\\n              dataSource[index][dataIndex] = value;\\n            })\\n          );\\n        }}\\n      />\\n    );\\n  }, []);\\n  return (\\n    <div>\\n      <Table dataSource={state}>\\n        <Table.Column\\n          cell={renderCell.bind(null, 'time')}\\n          title='Time'\\n          dataIndex='time'\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title'\\n          cell={renderCell.bind(null, 'title')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='title1'\\n          cell={renderCell.bind(null, 'title1')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='titl2'\\n          cell={renderCell.bind(null, 'titl2')}\\n        />\\n        <Table.Column\\n          title='Title'\\n          dataIndex='tite3'\\n          cell={renderCell.bind(null, 'tite3')}\\n        />\\n      </Table>\\n    </div>\\n  );\\n};\\nconst view = (context: DataContext<any, any, any>) => {\\n  const { value, next } = context;\\n  return (\\n    <EditablePane\\n      value={value}\\n      onChange={(value) => {\\n        next(value);\\n      }}\\n    />\\n  );\\n};\\n\\nconst getResult = () => {\\n  const datas = {};\\n  result.forEach((row, rowIndex) => {\\n    columns.forEach((column) => {\\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\\n    });\\n  });\\n  return datas;\\n};\\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\\nconst resultData = getResult();\\nexport const 可编辑表格_Rdx版本 = () => {\\n  const renderCell = useCallback((dataIndex, value, index, record) => {\\n    return (\\n      <RdxView\\n        recordStatus={false}\\n        id={`${dataIndex}-${index}`}\\n        render={view}\\n      ></RdxView>\\n    );\\n  }, []);\\n  return (\\n    <RdxContext state={resultData}>\\n      <Table dataSource={result}>\\n        {columns.map((column) => (\\n          <Table.Column\\n            cell={renderCell.bind(null, column)}\\n            title={column}\\n            dataIndex={column}\\n          />\\n        ))}\\n      </Table>\\n    </RdxContext>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本\":{\"startLoc\":{\"col\":26,\"line\":54},\"endLoc\":{\"col\":1,\"line\":101},\"startBody\":{\"col\":26,\"line\":54},\"endBody\":{\"col\":1,\"line\":101}},\"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本\":{\"startLoc\":{\"col\":27,\"line\":125},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":27,\"line\":125},\"endBody\":{\"col\":1,\"line\":148}}}},\n    info: { inline: true },\n  },\n};\n\nfunction createResult() {\n  const size = 20;\n  let result = [];\n  for (let index = 0; index < size; index++) {\n    result.push({\n      title: '标题' + index,\n      time: index,\n      id: '名称' + index,\n      title1: '名称' + index,\n      title2: '名称' + index,\n      title3: '名称' + index,\n      title4: '名称' + index,\n      title5: '名称' + index,\n      title6: '名称' + index,\n      title7: '名称' + index,\n      title8: '名称' + index,\n      title9: '名称' + index,\n      title10: '名称' + index,\n    });\n  }\n  return result;\n}\nconst result = createResult();\nfunction createDataSource() {\n  let size = 100;\n  const data = [];\n  for (let index = 0; index < size; index++) {\n    data.push({\n      label: '测试文本' + index,\n      value: index + '',\n    });\n  }\n  return data;\n}\nconst dataSource = createDataSource();\nconst EditablePane = (props: { value: any; onChange: any }) => {\n  const { value, onChange } = props;\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\n};\n\nexport const 可编辑表格_普通版本 = addSourceDecorator(() => {\n  const [state, setState] = useState(result);\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <EditablePane\n        value={value}\n        onChange={(value) => {\n          setState((state) =>\n            produce(state, (dataSource) => {\n              dataSource[index][dataIndex] = value;\n            })\n          );\n        }}\n      />\n    );\n  }, []);\n  return (\n    <div>\n      <Table dataSource={state}>\n        <Table.Column\n          cell={renderCell.bind(null, 'time')}\n          title='Time'\n          dataIndex='time'\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title'\n          cell={renderCell.bind(null, 'title')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title1'\n          cell={renderCell.bind(null, 'title1')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='titl2'\n          cell={renderCell.bind(null, 'titl2')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='tite3'\n          cell={renderCell.bind(null, 'tite3')}\n        />\n      </Table>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\nconst view = (context: DataContext<any, any, any>) => {\n  const { value, next } = context;\n  return (\n    <EditablePane\n      value={value}\n      onChange={(value) => {\n        next(value);\n      }}\n    />\n  );\n};\n\nconst getResult = () => {\n  const datas = {};\n  result.forEach((row, rowIndex) => {\n    columns.forEach((column) => {\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\n    });\n  });\n  return datas;\n};\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\nconst resultData = getResult();\nexport const 可编辑表格_Rdx版本 = addSourceDecorator(() => {\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <RdxView\n        recordStatus={false}\n        id={`${dataIndex}-${index}`}\n        render={view}\n      ></RdxView>\n    );\n  }, []);\n  return (\n    <RdxContext state={resultData}>\n      <Table dataSource={result}>\n        {columns.map((column) => (\n          <Table.Column\n            cell={renderCell.bind(null, column)}\n            title={column}\n            dataIndex={column}\n          />\n        ))}\n      </Table>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本":{startLoc:{col:26,line:76},endLoc:{col:139,line:123},startBody:{col:26,line:76},endBody:{col:139,line:123}},"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本":{startLoc:{col:27,line:147},endLoc:{col:139,line:170},startBody:{col:27,line:147},endBody:{col:139,line:170}}}},storySource:{source:"import React from 'react';\nimport { RdxContext, RdxView, DataContext } from '@czwcode/rdx';\nimport { Table, Input, Select } from '@alifd/next';\nimport { produce } from 'immer';\nimport { useState } from 'react';\nimport { useCallback } from 'react';\nexport default {\n  title: '场景示例|点对点更新|可编辑的表格',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nfunction createResult() {\n  const size = 20;\n  let result = [];\n  for (let index = 0; index < size; index++) {\n    result.push({\n      title: '标题' + index,\n      time: index,\n      id: '名称' + index,\n      title1: '名称' + index,\n      title2: '名称' + index,\n      title3: '名称' + index,\n      title4: '名称' + index,\n      title5: '名称' + index,\n      title6: '名称' + index,\n      title7: '名称' + index,\n      title8: '名称' + index,\n      title9: '名称' + index,\n      title10: '名称' + index,\n    });\n  }\n  return result;\n}\nconst result = createResult();\nfunction createDataSource() {\n  let size = 100;\n  const data = [];\n  for (let index = 0; index < size; index++) {\n    data.push({\n      label: '测试文本' + index,\n      value: index + '',\n    });\n  }\n  return data;\n}\nconst dataSource = createDataSource();\nconst EditablePane = (props: { value: any; onChange: any }) => {\n  const { value, onChange } = props;\n  return <Select value={value} dataSource={dataSource} onChange={onChange} />;\n};\n\nexport const 可编辑表格_普通版本 = () => {\n  const [state, setState] = useState(result);\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <EditablePane\n        value={value}\n        onChange={(value) => {\n          setState((state) =>\n            produce(state, (dataSource) => {\n              dataSource[index][dataIndex] = value;\n            })\n          );\n        }}\n      />\n    );\n  }, []);\n  return (\n    <div>\n      <Table dataSource={state}>\n        <Table.Column\n          cell={renderCell.bind(null, 'time')}\n          title='Time'\n          dataIndex='time'\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title'\n          cell={renderCell.bind(null, 'title')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='title1'\n          cell={renderCell.bind(null, 'title1')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='titl2'\n          cell={renderCell.bind(null, 'titl2')}\n        />\n        <Table.Column\n          title='Title'\n          dataIndex='tite3'\n          cell={renderCell.bind(null, 'tite3')}\n        />\n      </Table>\n    </div>\n  );\n};\nconst view = (context: DataContext<any, any, any>) => {\n  const { value, next } = context;\n  return (\n    <EditablePane\n      value={value}\n      onChange={(value) => {\n        next(value);\n      }}\n    />\n  );\n};\n\nconst getResult = () => {\n  const datas = {};\n  result.forEach((row, rowIndex) => {\n    columns.forEach((column) => {\n      datas[`${column}-${rowIndex}`] = '名称' + rowIndex;\n    });\n  });\n  return datas;\n};\nconst columns = ['time', 'title', 'title1', 'title2', 'title3'];\nconst resultData = getResult();\nexport const 可编辑表格_Rdx版本 = () => {\n  const renderCell = useCallback((dataIndex, value, index, record) => {\n    return (\n      <RdxView\n        recordStatus={false}\n        id={`${dataIndex}-${index}`}\n        render={view}\n      ></RdxView>\n    );\n  }, []);\n  return (\n    <RdxContext state={resultData}>\n      <Table dataSource={result}>\n        {columns.map((column) => (\n          <Table.Column\n            cell={renderCell.bind(null, column)}\n            title={column}\n            dataIndex={column}\n          />\n        ))}\n      </Table>\n    </RdxContext>\n  );\n};\n",locationsMap:{"场景示例-点对点更新-可编辑的表格--可编辑表格-普通版本":{startLoc:{col:26,line:54},endLoc:{col:1,line:101},startBody:{col:26,line:54},endBody:{col:1,line:101}},"场景示例-点对点更新-可编辑的表格--可编辑表格-rdx版本":{startLoc:{col:27,line:125},endLoc:{col:1,line:148},startBody:{col:27,line:125},endBody:{col:1,line:148}}}},info:{inline:!0}}};const result=function createResult(){let result=[];for(let index=0;index<20;index++)result.push({title:"标题"+index,time:index,id:"名称"+index,title1:"名称"+index,title2:"名称"+index,title3:"名称"+index,title4:"名称"+index,title5:"名称"+index,title6:"名称"+index,title7:"名称"+index,title8:"名称"+index,title9:"名称"+index,title10:"名称"+index});return result}();const dataSource=function createDataSource(){const data=[];for(let index=0;index<100;index++)data.push({label:"测试文本"+index,value:index+""});return data}(),EditablePane=props=>{const{value:value,onChange:onChange}=props;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_3__.a,{value:value,dataSource:dataSource,onChange:onChange})},可编辑表格_普通版本=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(result),renderCell=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((dataIndex,value,index,record)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(EditablePane,{value:value,onChange:value=>{setState(state=>Object(immer__WEBPACK_IMPORTED_MODULE_5__.a)(state,dataSource=>{dataSource[index][dataIndex]=value}))}}),[]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{dataSource:state},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{cell:renderCell.bind(null,"time"),title:"Time",dataIndex:"time"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{title:"Title",dataIndex:"title",cell:renderCell.bind(null,"title")}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{title:"Title",dataIndex:"title1",cell:renderCell.bind(null,"title1")}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{title:"Title",dataIndex:"titl2",cell:renderCell.bind(null,"titl2")}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{title:"Title",dataIndex:"tite3",cell:renderCell.bind(null,"tite3")})))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),view=context=>{const{value:value,next:next}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(EditablePane,{value:value,onChange:value=>{next(value)}})},columns=["time","title","title1","title2","title3"],resultData=(()=>{const datas={};return result.forEach((row,rowIndex)=>{columns.forEach(column=>{datas[`${column}-${rowIndex}`]="名称"+rowIndex})}),datas})(),可编辑表格_Rdx版本=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const renderCell=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((dataIndex,value,index,record)=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,{recordStatus:!1,id:`${dataIndex}-${index}`,render:view}),[]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{state:resultData},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{dataSource:result},columns.map(column=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Column,{cell:renderCell.bind(null,column),title:column,dataIndex:column}))))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/editTable.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2178:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"RdxView状态展示",(function(){return RdxView状态展示})),__webpack_require__.d(__webpack_exports__,"自定义配置变更校验",(function(){return 自定义配置变更校验}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(33),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(104),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(38),_alifd_next__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(89),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__=(__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos"),__STORY__="import React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  DataContext,\n  ReactionContext,\n} from '@czwcode/rdx';\nimport { useRef } from 'react';\nimport { Button, Loading } from '@alifd/next';\nexport default {\n  title: '场景示例|组件的状态',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\n\nconst BaseView = (context: DataContext<any, any, any>) => {\n  const { status, id, deps = [], refresh, refreshView } = context;\n  let text = '';\n  let background = '';\n  console.log('status: ', status);\n  if (status === Status.FirstRender) {\n    text = '空白状态';\n  } else if (status === Status.Waiting) {\n    text = '依赖项加载中...';\n    background = 'rgb(0,157,248)';\n  } else if (status === Status.Running) {\n    text = '加载中...';\n    background = 'lightyellow';\n  } else if (status === Status.Error) {\n    text = '错误状态';\n    background = 'rgb(223,123,135)';\n  } else {\n    text = '理想状态';\n    background = 'lightgreen';\n  }\n  return (\n    <div\n      style={{\n        marginTop: 12,\n        marginLeft: 12,\n        fontSize: 16,\n        width: 150,\n        height: 76,\n        borderRadius: 4,\n        background: background,\n      }}\n    >\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          position: 'relative',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        组件Id: {id} <br />\n        组件依赖: {deps.map((item) => item.id)}\n        <br />\n        <Button onClick={refresh}>{text}</Button>\n      </div>\n    </div>\n  );\n};\nexport const RdxView状态展示 = () => {\n  const rdxViewProps = useRef({\n    reaction: async (context: ReactionContext<any, any, any>) => {\n      await pause(2000);\n      context.updateState(2);\n    },\n    reactionThrowError: async (context) => {\n      throw '错误啦';\n    },\n  });\n  return (\n    <RdxContext onChange={() => {}}>\n      <div>\n        <h2>Ui Stack</h2>\n        <p>\n          为了满足用户的个性化定制诉求，提供了\n          <strong>\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\n            Ideal(理想状态)\n          </strong>\n          ,而Partial状态交由用户自己来处理。\n        </p>\n        <img\n          width={600}\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <RdxView\n          id={'A'}\n          reaction={rdxViewProps.current.reaction}\n          render={BaseView}\n        />\n        <RdxView\n          id={'B'}\n          reaction={rdxViewProps.current.reaction}\n          deps={[{ id: 'A' }]}\n          render={BaseView}\n        />\n        <RdxView\n          id={'C'}\n          deps={[{ id: 'B' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'D'}\n          deps={[{ id: 'C' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'E'}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n      </div>\n    </RdxContext>\n  );\n};\n\n// export const 其他信息传入 = () => {\n//   const [state, setState] = React.useState({ a: 1 });\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n//   const produceModel1 = useCallback(async (context) => {\n//     await pause(2000);\n//     return 2;\n//   }, []);\n//   return (\n//     <RdxContext onChange={() => {}}>\n//       <Button\n//         onClick={() => {\n//           setState({ a: 2 });\n//         }}\n//       >\n//         修改组件相关配置信息\n//       </Button>\n//       <Button\n//         onClick={() => {\n//           setOtherStateChange({ a: 2 });\n//         }}\n//       >\n//         修改无关信息\n//       </Button>\n//       <RdxView\n//         id={'a'}\n//         moduleConfig={state}\n//         reaction={produceModel1}\n//         render={BaseView}\n//       />\n//     </RdxContext>\n//   );\n// };\n\n// const areEqualForTask =  (\n//   type: TaskCompareType,\n//   preConfig: any,\n//   nextConfig: any\n// ) => {\n//   if(type === TaskCompareType.UpdateTaskInfo)\n// };\nexport const 自定义配置变更校验 = () => {\n  const [state, setState] = React.useState({ a: 1 });\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n  const produceModel1 = useCallback(async (context) => {\n    await pause(2000);\n    context.updateState(context.value + 1);\n  }, []);\n  return (\n    <RdxContext state={{}} onChange={() => {}}>\n      <h2>严格组件渲染管控</h2>\n      <p>\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\n      </p>\n      <Button.Group>\n        <Button\n          type='primary'\n          onClick={() => {\n            setState({ a: 2 });\n          }}\n        >\n          修改相关信息\n        </Button>\n        <Button\n          type='secondary'\n          onClick={() => {\n            setOtherStateChange({ a: 2 });\n          }}\n        >\n          修改无关信息\n        </Button>\n      </Button.Group>\n\n      <RdxView\n        id={'a'}\n        moduleConfig={state}\n        reaction={produceModel1}\n        render={BaseView}\n      />\n    </RdxContext>\n  );\n};\n",__ADDS_MAP__={"场景示例-组件的状态--rdx-view状态展示":{startLoc:{col:27,line:71},endLoc:{col:1,line:130},startBody:{col:27,line:71},endBody:{col:1,line:130}},"场景示例-组件的状态--自定义配置变更校验":{startLoc:{col:25,line:172},endLoc:{col:1,line:212},startBody:{col:25,line:172},endBody:{col:1,line:212}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"场景示例|组件的状态",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useCallback } from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n} from '@czwcode/rdx';\\\\nimport { useRef } from 'react';\\\\nimport { Button, Loading } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|组件的状态',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\n\\\\nconst BaseView = (context: DataContext<any, any, any>) => {\\\\n  const { status, id, deps = [], refresh, refreshView } = context;\\\\n  let text = '';\\\\n  let background = '';\\\\n  console.log('status: ', status);\\\\n  if (status === Status.FirstRender) {\\\\n    text = '空白状态';\\\\n  } else if (status === Status.Waiting) {\\\\n    text = '依赖项加载中...';\\\\n    background = 'rgb(0,157,248)';\\\\n  } else if (status === Status.Running) {\\\\n    text = '加载中...';\\\\n    background = 'lightyellow';\\\\n  } else if (status === Status.Error) {\\\\n    text = '错误状态';\\\\n    background = 'rgb(223,123,135)';\\\\n  } else {\\\\n    text = '理想状态';\\\\n    background = 'lightgreen';\\\\n  }\\\\n  return (\\\\n    <div\\\\n      style={{\\\\n        marginTop: 12,\\\\n        marginLeft: 12,\\\\n        fontSize: 16,\\\\n        width: 150,\\\\n        height: 76,\\\\n        borderRadius: 4,\\\\n        background: background,\\\\n      }}\\\\n    >\\\\n      <div\\\\n        style={{\\\\n          width: '100%',\\\\n          height: '100%',\\\\n          display: 'flex',\\\\n          position: 'relative',\\\\n          flexDirection: 'column',\\\\n          alignItems: 'center',\\\\n          justifyContent: 'center',\\\\n        }}\\\\n      >\\\\n        组件Id: {id} <br />\\\\n        组件依赖: {deps.map((item) => item.id)}\\\\n        <br />\\\\n        <Button onClick={refresh}>{text}</Button>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\nexport const RdxView状态展示 = () => {\\\\n  const rdxViewProps = useRef({\\\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\\\n      await pause(2000);\\\\n      context.updateState(2);\\\\n    },\\\\n    reactionThrowError: async (context) => {\\\\n      throw '错误啦';\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <div>\\\\n        <h2>Ui Stack</h2>\\\\n        <p>\\\\n          为了满足用户的个性化定制诉求，提供了\\\\n          <strong>\\\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\\\n            Ideal(理想状态)\\\\n          </strong>\\\\n          ,而Partial状态交由用户自己来处理。\\\\n        </p>\\\\n        <img\\\\n          width={600}\\\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <RdxView\\\\n          id={'A'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'B'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          deps={[{ id: 'A' }]}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'C'}\\\\n          deps={[{ id: 'B' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'D'}\\\\n          deps={[{ id: 'C' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'E'}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n      </div>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\n// export const 其他信息传入 = () => {\\\\n//   const [state, setState] = React.useState({ a: 1 });\\\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n//   const produceModel1 = useCallback(async (context) => {\\\\n//     await pause(2000);\\\\n//     return 2;\\\\n//   }, []);\\\\n//   return (\\\\n//     <RdxContext onChange={() => {}}>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setState({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改组件相关配置信息\\\\n//       </Button>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setOtherStateChange({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改无关信息\\\\n//       </Button>\\\\n//       <RdxView\\\\n//         id={'a'}\\\\n//         moduleConfig={state}\\\\n//         reaction={produceModel1}\\\\n//         render={BaseView}\\\\n//       />\\\\n//     </RdxContext>\\\\n//   );\\\\n// };\\\\n\\\\n// const areEqualForTask =  (\\\\n//   type: TaskCompareType,\\\\n//   preConfig: any,\\\\n//   nextConfig: any\\\\n// ) => {\\\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\\\n// };\\\\nexport const 自定义配置变更校验 = () => {\\\\n  const [state, setState] = React.useState({ a: 1 });\\\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n  const produceModel1 = useCallback(async (context) => {\\\\n    await pause(2000);\\\\n    context.updateState(context.value + 1);\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={{}} onChange={() => {}}>\\\\n      <h2>严格组件渲染管控</h2>\\\\n      <p>\\\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\\\n      </p>\\\\n      <Button.Group>\\\\n        <Button\\\\n          type='primary'\\\\n          onClick={() => {\\\\n            setState({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改相关信息\\\\n        </Button>\\\\n        <Button\\\\n          type='secondary'\\\\n          onClick={() => {\\\\n            setOtherStateChange({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改无关信息\\\\n        </Button>\\\\n      </Button.Group>\\\\n\\\\n      <RdxView\\\\n        id={'a'}\\\\n        moduleConfig={state}\\\\n        reaction={produceModel1}\\\\n        render={BaseView}\\\\n      />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-组件的状态--rdx-view状态展示\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":130},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":130}},\\\"场景示例-组件的状态--自定义配置变更校验\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":212},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":212}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/status.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useCallback } from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n} from '@czwcode/rdx';\\\\nimport { useRef } from 'react';\\\\nimport { Button, Loading } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|组件的状态',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\n\\\\nconst BaseView = (context: DataContext<any, any, any>) => {\\\\n  const { status, id, deps = [], refresh, refreshView } = context;\\\\n  let text = '';\\\\n  let background = '';\\\\n  console.log('status: ', status);\\\\n  if (status === Status.FirstRender) {\\\\n    text = '空白状态';\\\\n  } else if (status === Status.Waiting) {\\\\n    text = '依赖项加载中...';\\\\n    background = 'rgb(0,157,248)';\\\\n  } else if (status === Status.Running) {\\\\n    text = '加载中...';\\\\n    background = 'lightyellow';\\\\n  } else if (status === Status.Error) {\\\\n    text = '错误状态';\\\\n    background = 'rgb(223,123,135)';\\\\n  } else {\\\\n    text = '理想状态';\\\\n    background = 'lightgreen';\\\\n  }\\\\n  return (\\\\n    <div\\\\n      style={{\\\\n        marginTop: 12,\\\\n        marginLeft: 12,\\\\n        fontSize: 16,\\\\n        width: 150,\\\\n        height: 76,\\\\n        borderRadius: 4,\\\\n        background: background,\\\\n      }}\\\\n    >\\\\n      <div\\\\n        style={{\\\\n          width: '100%',\\\\n          height: '100%',\\\\n          display: 'flex',\\\\n          position: 'relative',\\\\n          flexDirection: 'column',\\\\n          alignItems: 'center',\\\\n          justifyContent: 'center',\\\\n        }}\\\\n      >\\\\n        组件Id: {id} <br />\\\\n        组件依赖: {deps.map((item) => item.id)}\\\\n        <br />\\\\n        <Button onClick={refresh}>{text}</Button>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\nexport const RdxView状态展示 = () => {\\\\n  const rdxViewProps = useRef({\\\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\\\n      await pause(2000);\\\\n      context.updateState(2);\\\\n    },\\\\n    reactionThrowError: async (context) => {\\\\n      throw '错误啦';\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <div>\\\\n        <h2>Ui Stack</h2>\\\\n        <p>\\\\n          为了满足用户的个性化定制诉求，提供了\\\\n          <strong>\\\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\\\n            Ideal(理想状态)\\\\n          </strong>\\\\n          ,而Partial状态交由用户自己来处理。\\\\n        </p>\\\\n        <img\\\\n          width={600}\\\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <RdxView\\\\n          id={'A'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'B'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          deps={[{ id: 'A' }]}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'C'}\\\\n          deps={[{ id: 'B' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'D'}\\\\n          deps={[{ id: 'C' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'E'}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n      </div>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\n// export const 其他信息传入 = () => {\\\\n//   const [state, setState] = React.useState({ a: 1 });\\\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n//   const produceModel1 = useCallback(async (context) => {\\\\n//     await pause(2000);\\\\n//     return 2;\\\\n//   }, []);\\\\n//   return (\\\\n//     <RdxContext onChange={() => {}}>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setState({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改组件相关配置信息\\\\n//       </Button>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setOtherStateChange({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改无关信息\\\\n//       </Button>\\\\n//       <RdxView\\\\n//         id={'a'}\\\\n//         moduleConfig={state}\\\\n//         reaction={produceModel1}\\\\n//         render={BaseView}\\\\n//       />\\\\n//     </RdxContext>\\\\n//   );\\\\n// };\\\\n\\\\n// const areEqualForTask =  (\\\\n//   type: TaskCompareType,\\\\n//   preConfig: any,\\\\n//   nextConfig: any\\\\n// ) => {\\\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\\\n// };\\\\nexport const 自定义配置变更校验 = () => {\\\\n  const [state, setState] = React.useState({ a: 1 });\\\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n  const produceModel1 = useCallback(async (context) => {\\\\n    await pause(2000);\\\\n    context.updateState(context.value + 1);\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={{}} onChange={() => {}}>\\\\n      <h2>严格组件渲染管控</h2>\\\\n      <p>\\\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\\\n      </p>\\\\n      <Button.Group>\\\\n        <Button\\\\n          type='primary'\\\\n          onClick={() => {\\\\n            setState({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改相关信息\\\\n        </Button>\\\\n        <Button\\\\n          type='secondary'\\\\n          onClick={() => {\\\\n            setOtherStateChange({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改无关信息\\\\n        </Button>\\\\n      </Button.Group>\\\\n\\\\n      <RdxView\\\\n        id={'a'}\\\\n        moduleConfig={state}\\\\n        reaction={produceModel1}\\\\n        render={BaseView}\\\\n      />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-组件的状态--rdx-view状态展示\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":130},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":130}},\\\"场景示例-组件的状态--自定义配置变更校验\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":212},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":212}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = addSourceDecorator(() => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = addSourceDecorator(() => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":93},\"endLoc\":{\"col\":139,\"line\":152},\"startBody\":{\"col\":27,\"line\":93},\"endBody\":{\"col\":139,\"line\":152}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":194},\"endLoc\":{\"col\":139,\"line\":234},\"startBody\":{\"col\":25,\"line\":194},\"endBody\":{\"col\":139,\"line\":234}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/status.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = () => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n};\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = () => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":71},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":27,\"line\":71},\"endBody\":{\"col\":1,\"line\":130}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":172},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":25,\"line\":172},\"endBody\":{\"col\":1,\"line\":212}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/status.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  DataContext,\n  ReactionContext,\n} from '@czwcode/rdx';\nimport { useRef } from 'react';\nimport { Button, Loading } from '@alifd/next';\nexport default {\n  title: '场景示例|组件的状态',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React, { useCallback } from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n} from '@czwcode/rdx';\\\\nimport { useRef } from 'react';\\\\nimport { Button, Loading } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|组件的状态',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\n\\\\nconst BaseView = (context: DataContext<any, any, any>) => {\\\\n  const { status, id, deps = [], refresh, refreshView } = context;\\\\n  let text = '';\\\\n  let background = '';\\\\n  console.log('status: ', status);\\\\n  if (status === Status.FirstRender) {\\\\n    text = '空白状态';\\\\n  } else if (status === Status.Waiting) {\\\\n    text = '依赖项加载中...';\\\\n    background = 'rgb(0,157,248)';\\\\n  } else if (status === Status.Running) {\\\\n    text = '加载中...';\\\\n    background = 'lightyellow';\\\\n  } else if (status === Status.Error) {\\\\n    text = '错误状态';\\\\n    background = 'rgb(223,123,135)';\\\\n  } else {\\\\n    text = '理想状态';\\\\n    background = 'lightgreen';\\\\n  }\\\\n  return (\\\\n    <div\\\\n      style={{\\\\n        marginTop: 12,\\\\n        marginLeft: 12,\\\\n        fontSize: 16,\\\\n        width: 150,\\\\n        height: 76,\\\\n        borderRadius: 4,\\\\n        background: background,\\\\n      }}\\\\n    >\\\\n      <div\\\\n        style={{\\\\n          width: '100%',\\\\n          height: '100%',\\\\n          display: 'flex',\\\\n          position: 'relative',\\\\n          flexDirection: 'column',\\\\n          alignItems: 'center',\\\\n          justifyContent: 'center',\\\\n        }}\\\\n      >\\\\n        组件Id: {id} <br />\\\\n        组件依赖: {deps.map((item) => item.id)}\\\\n        <br />\\\\n        <Button onClick={refresh}>{text}</Button>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\nexport const RdxView状态展示 = () => {\\\\n  const rdxViewProps = useRef({\\\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\\\n      await pause(2000);\\\\n      context.updateState(2);\\\\n    },\\\\n    reactionThrowError: async (context) => {\\\\n      throw '错误啦';\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <div>\\\\n        <h2>Ui Stack</h2>\\\\n        <p>\\\\n          为了满足用户的个性化定制诉求，提供了\\\\n          <strong>\\\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\\\n            Ideal(理想状态)\\\\n          </strong>\\\\n          ,而Partial状态交由用户自己来处理。\\\\n        </p>\\\\n        <img\\\\n          width={600}\\\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <RdxView\\\\n          id={'A'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'B'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          deps={[{ id: 'A' }]}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'C'}\\\\n          deps={[{ id: 'B' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'D'}\\\\n          deps={[{ id: 'C' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'E'}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n      </div>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\n// export const 其他信息传入 = () => {\\\\n//   const [state, setState] = React.useState({ a: 1 });\\\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n//   const produceModel1 = useCallback(async (context) => {\\\\n//     await pause(2000);\\\\n//     return 2;\\\\n//   }, []);\\\\n//   return (\\\\n//     <RdxContext onChange={() => {}}>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setState({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改组件相关配置信息\\\\n//       </Button>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setOtherStateChange({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改无关信息\\\\n//       </Button>\\\\n//       <RdxView\\\\n//         id={'a'}\\\\n//         moduleConfig={state}\\\\n//         reaction={produceModel1}\\\\n//         render={BaseView}\\\\n//       />\\\\n//     </RdxContext>\\\\n//   );\\\\n// };\\\\n\\\\n// const areEqualForTask =  (\\\\n//   type: TaskCompareType,\\\\n//   preConfig: any,\\\\n//   nextConfig: any\\\\n// ) => {\\\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\\\n// };\\\\nexport const 自定义配置变更校验 = () => {\\\\n  const [state, setState] = React.useState({ a: 1 });\\\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n  const produceModel1 = useCallback(async (context) => {\\\\n    await pause(2000);\\\\n    context.updateState(context.value + 1);\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={{}} onChange={() => {}}>\\\\n      <h2>严格组件渲染管控</h2>\\\\n      <p>\\\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\\\n      </p>\\\\n      <Button.Group>\\\\n        <Button\\\\n          type='primary'\\\\n          onClick={() => {\\\\n            setState({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改相关信息\\\\n        </Button>\\\\n        <Button\\\\n          type='secondary'\\\\n          onClick={() => {\\\\n            setOtherStateChange({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改无关信息\\\\n        </Button>\\\\n      </Button.Group>\\\\n\\\\n      <RdxView\\\\n        id={'a'}\\\\n        moduleConfig={state}\\\\n        reaction={produceModel1}\\\\n        render={BaseView}\\\\n      />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"场景示例-组件的状态--rdx-view状态展示\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":130},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":130}},\\\"场景示例-组件的状态--自定义配置变更校验\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":212},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":212}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/status.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React, { useCallback } from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  Status,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n} from '@czwcode/rdx';\\\\nimport { useRef } from 'react';\\\\nimport { Button, Loading } from '@alifd/next';\\\\nexport default {\\\\n  title: '场景示例|组件的状态',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\n\\\\nconst BaseView = (context: DataContext<any, any, any>) => {\\\\n  const { status, id, deps = [], refresh, refreshView } = context;\\\\n  let text = '';\\\\n  let background = '';\\\\n  console.log('status: ', status);\\\\n  if (status === Status.FirstRender) {\\\\n    text = '空白状态';\\\\n  } else if (status === Status.Waiting) {\\\\n    text = '依赖项加载中...';\\\\n    background = 'rgb(0,157,248)';\\\\n  } else if (status === Status.Running) {\\\\n    text = '加载中...';\\\\n    background = 'lightyellow';\\\\n  } else if (status === Status.Error) {\\\\n    text = '错误状态';\\\\n    background = 'rgb(223,123,135)';\\\\n  } else {\\\\n    text = '理想状态';\\\\n    background = 'lightgreen';\\\\n  }\\\\n  return (\\\\n    <div\\\\n      style={{\\\\n        marginTop: 12,\\\\n        marginLeft: 12,\\\\n        fontSize: 16,\\\\n        width: 150,\\\\n        height: 76,\\\\n        borderRadius: 4,\\\\n        background: background,\\\\n      }}\\\\n    >\\\\n      <div\\\\n        style={{\\\\n          width: '100%',\\\\n          height: '100%',\\\\n          display: 'flex',\\\\n          position: 'relative',\\\\n          flexDirection: 'column',\\\\n          alignItems: 'center',\\\\n          justifyContent: 'center',\\\\n        }}\\\\n      >\\\\n        组件Id: {id} <br />\\\\n        组件依赖: {deps.map((item) => item.id)}\\\\n        <br />\\\\n        <Button onClick={refresh}>{text}</Button>\\\\n      </div>\\\\n    </div>\\\\n  );\\\\n};\\\\nexport const RdxView状态展示 = () => {\\\\n  const rdxViewProps = useRef({\\\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\\\n      await pause(2000);\\\\n      context.updateState(2);\\\\n    },\\\\n    reactionThrowError: async (context) => {\\\\n      throw '错误啦';\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext onChange={() => {}}>\\\\n      <div>\\\\n        <h2>Ui Stack</h2>\\\\n        <p>\\\\n          为了满足用户的个性化定制诉求，提供了\\\\n          <strong>\\\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\\\n            Ideal(理想状态)\\\\n          </strong>\\\\n          ,而Partial状态交由用户自己来处理。\\\\n        </p>\\\\n        <img\\\\n          width={600}\\\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\\\n        />\\\\n      </div>\\\\n      <div style={{ display: 'flex' }}>\\\\n        <RdxView\\\\n          id={'A'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'B'}\\\\n          reaction={rdxViewProps.current.reaction}\\\\n          deps={[{ id: 'A' }]}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'C'}\\\\n          deps={[{ id: 'B' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'D'}\\\\n          deps={[{ id: 'C' }]}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n        <RdxView\\\\n          id={'E'}\\\\n          reaction={rdxViewProps.current.reactionThrowError}\\\\n          render={BaseView}\\\\n        />\\\\n      </div>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\n// export const 其他信息传入 = () => {\\\\n//   const [state, setState] = React.useState({ a: 1 });\\\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n//   const produceModel1 = useCallback(async (context) => {\\\\n//     await pause(2000);\\\\n//     return 2;\\\\n//   }, []);\\\\n//   return (\\\\n//     <RdxContext onChange={() => {}}>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setState({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改组件相关配置信息\\\\n//       </Button>\\\\n//       <Button\\\\n//         onClick={() => {\\\\n//           setOtherStateChange({ a: 2 });\\\\n//         }}\\\\n//       >\\\\n//         修改无关信息\\\\n//       </Button>\\\\n//       <RdxView\\\\n//         id={'a'}\\\\n//         moduleConfig={state}\\\\n//         reaction={produceModel1}\\\\n//         render={BaseView}\\\\n//       />\\\\n//     </RdxContext>\\\\n//   );\\\\n// };\\\\n\\\\n// const areEqualForTask =  (\\\\n//   type: TaskCompareType,\\\\n//   preConfig: any,\\\\n//   nextConfig: any\\\\n// ) => {\\\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\\\n// };\\\\nexport const 自定义配置变更校验 = () => {\\\\n  const [state, setState] = React.useState({ a: 1 });\\\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\\\n  const produceModel1 = useCallback(async (context) => {\\\\n    await pause(2000);\\\\n    context.updateState(context.value + 1);\\\\n  }, []);\\\\n  return (\\\\n    <RdxContext state={{}} onChange={() => {}}>\\\\n      <h2>严格组件渲染管控</h2>\\\\n      <p>\\\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\\\n      </p>\\\\n      <Button.Group>\\\\n        <Button\\\\n          type='primary'\\\\n          onClick={() => {\\\\n            setState({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改相关信息\\\\n        </Button>\\\\n        <Button\\\\n          type='secondary'\\\\n          onClick={() => {\\\\n            setOtherStateChange({ a: 2 });\\\\n          }}\\\\n        >\\\\n          修改无关信息\\\\n        </Button>\\\\n      </Button.Group>\\\\n\\\\n      <RdxView\\\\n        id={'a'}\\\\n        moduleConfig={state}\\\\n        reaction={produceModel1}\\\\n        render={BaseView}\\\\n      />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"场景示例-组件的状态--rdx-view状态展示\\\":{\\\"startLoc\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":130},\\\"startBody\\\":{\\\"col\\\":27,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":130}},\\\"场景示例-组件的状态--自定义配置变更校验\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":212},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":172},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":212}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = addSourceDecorator(() => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = addSourceDecorator(() => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\",\"locationsMap\":{\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":93},\"endLoc\":{\"col\":139,\"line\":152},\"startBody\":{\"col\":27,\"line\":93},\"endBody\":{\"col\":139,\"line\":152}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":194},\"endLoc\":{\"col\":139,\"line\":234},\"startBody\":{\"col\":25,\"line\":194},\"endBody\":{\"col\":139,\"line\":234}}}},\"storySource\":{\"source\":\"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = () => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n};\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = () => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":71},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":27,\"line\":71},\"endBody\":{\"col\":1,\"line\":130}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":172},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":25,\"line\":172},\"endBody\":{\"col\":1,\"line\":212}}}},\n    info: { inline: true },\n  },\n};\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\n\nconst BaseView = (context: DataContext<any, any, any>) => {\n  const { status, id, deps = [], refresh, refreshView } = context;\n  let text = '';\n  let background = '';\n  console.log('status: ', status);\n  if (status === Status.FirstRender) {\n    text = '空白状态';\n  } else if (status === Status.Waiting) {\n    text = '依赖项加载中...';\n    background = 'rgb(0,157,248)';\n  } else if (status === Status.Running) {\n    text = '加载中...';\n    background = 'lightyellow';\n  } else if (status === Status.Error) {\n    text = '错误状态';\n    background = 'rgb(223,123,135)';\n  } else {\n    text = '理想状态';\n    background = 'lightgreen';\n  }\n  return (\n    <div\n      style={{\n        marginTop: 12,\n        marginLeft: 12,\n        fontSize: 16,\n        width: 150,\n        height: 76,\n        borderRadius: 4,\n        background: background,\n      }}\n    >\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          position: 'relative',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        组件Id: {id} <br />\n        组件依赖: {deps.map((item) => item.id)}\n        <br />\n        <Button onClick={refresh}>{text}</Button>\n      </div>\n    </div>\n  );\n};\nexport const RdxView状态展示 = addSourceDecorator(addSourceDecorator(() => {\n  const rdxViewProps = useRef({\n    reaction: async (context: ReactionContext<any, any, any>) => {\n      await pause(2000);\n      context.updateState(2);\n    },\n    reactionThrowError: async (context) => {\n      throw '错误啦';\n    },\n  });\n  return (\n    <RdxContext onChange={() => {}}>\n      <div>\n        <h2>Ui Stack</h2>\n        <p>\n          为了满足用户的个性化定制诉求，提供了\n          <strong>\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\n            Ideal(理想状态)\n          </strong>\n          ,而Partial状态交由用户自己来处理。\n        </p>\n        <img\n          width={600}\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <RdxView\n          id={'A'}\n          reaction={rdxViewProps.current.reaction}\n          render={BaseView}\n        />\n        <RdxView\n          id={'B'}\n          reaction={rdxViewProps.current.reaction}\n          deps={[{ id: 'A' }]}\n          render={BaseView}\n        />\n        <RdxView\n          id={'C'}\n          deps={[{ id: 'B' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'D'}\n          deps={[{ id: 'C' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'E'}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n      </div>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\n// export const 其他信息传入 = () => {\n//   const [state, setState] = React.useState({ a: 1 });\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n//   const produceModel1 = useCallback(async (context) => {\n//     await pause(2000);\n//     return 2;\n//   }, []);\n//   return (\n//     <RdxContext onChange={() => {}}>\n//       <Button\n//         onClick={() => {\n//           setState({ a: 2 });\n//         }}\n//       >\n//         修改组件相关配置信息\n//       </Button>\n//       <Button\n//         onClick={() => {\n//           setOtherStateChange({ a: 2 });\n//         }}\n//       >\n//         修改无关信息\n//       </Button>\n//       <RdxView\n//         id={'a'}\n//         moduleConfig={state}\n//         reaction={produceModel1}\n//         render={BaseView}\n//       />\n//     </RdxContext>\n//   );\n// };\n\n// const areEqualForTask =  (\n//   type: TaskCompareType,\n//   preConfig: any,\n//   nextConfig: any\n// ) => {\n//   if(type === TaskCompareType.UpdateTaskInfo)\n// };\nexport const 自定义配置变更校验 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = React.useState({ a: 1 });\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n  const produceModel1 = useCallback(async (context) => {\n    await pause(2000);\n    context.updateState(context.value + 1);\n  }, []);\n  return (\n    <RdxContext state={{}} onChange={() => {}}>\n      <h2>严格组件渲染管控</h2>\n      <p>\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\n      </p>\n      <Button.Group>\n        <Button\n          type='primary'\n          onClick={() => {\n            setState({ a: 2 });\n          }}\n        >\n          修改相关信息\n        </Button>\n        <Button\n          type='secondary'\n          onClick={() => {\n            setOtherStateChange({ a: 2 });\n          }}\n        >\n          修改无关信息\n        </Button>\n      </Button.Group>\n\n      <RdxView\n        id={'a'}\n        moduleConfig={state}\n        reaction={produceModel1}\n        render={BaseView}\n      />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-组件的状态--rdx-view状态展示":{startLoc:{col:27,line:115},endLoc:{col:277,line:174},startBody:{col:27,line:115},endBody:{col:277,line:174}},"场景示例-组件的状态--自定义配置变更校验":{startLoc:{col:25,line:216},endLoc:{col:277,line:256},startBody:{col:25,line:216},endBody:{col:277,line:256}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/advancedDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = () => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n};\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = () => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":71},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":27,\"line\":71},\"endBody\":{\"col\":1,\"line\":130}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":172},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":25,\"line\":172},\"endBody\":{\"col\":1,\"line\":212}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/status.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  DataContext,\n  ReactionContext,\n} from '@czwcode/rdx';\nimport { useRef } from 'react';\nimport { Button, Loading } from '@alifd/next';\nexport default {\n  title: '场景示例|组件的状态',\n  parameters: {\"storySource\":{\"source\":\"import React, { useCallback } from 'react';\\nimport {\\n  RdxContext,\\n  Status,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n} from '@czwcode/rdx';\\nimport { useRef } from 'react';\\nimport { Button, Loading } from '@alifd/next';\\nexport default {\\n  title: '场景示例|组件的状态',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\n\\nconst BaseView = (context: DataContext<any, any, any>) => {\\n  const { status, id, deps = [], refresh, refreshView } = context;\\n  let text = '';\\n  let background = '';\\n  console.log('status: ', status);\\n  if (status === Status.FirstRender) {\\n    text = '空白状态';\\n  } else if (status === Status.Waiting) {\\n    text = '依赖项加载中...';\\n    background = 'rgb(0,157,248)';\\n  } else if (status === Status.Running) {\\n    text = '加载中...';\\n    background = 'lightyellow';\\n  } else if (status === Status.Error) {\\n    text = '错误状态';\\n    background = 'rgb(223,123,135)';\\n  } else {\\n    text = '理想状态';\\n    background = 'lightgreen';\\n  }\\n  return (\\n    <div\\n      style={{\\n        marginTop: 12,\\n        marginLeft: 12,\\n        fontSize: 16,\\n        width: 150,\\n        height: 76,\\n        borderRadius: 4,\\n        background: background,\\n      }}\\n    >\\n      <div\\n        style={{\\n          width: '100%',\\n          height: '100%',\\n          display: 'flex',\\n          position: 'relative',\\n          flexDirection: 'column',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        组件Id: {id} <br />\\n        组件依赖: {deps.map((item) => item.id)}\\n        <br />\\n        <Button onClick={refresh}>{text}</Button>\\n      </div>\\n    </div>\\n  );\\n};\\nexport const RdxView状态展示 = () => {\\n  const rdxViewProps = useRef({\\n    reaction: async (context: ReactionContext<any, any, any>) => {\\n      await pause(2000);\\n      context.updateState(2);\\n    },\\n    reactionThrowError: async (context) => {\\n      throw '错误啦';\\n    },\\n  });\\n  return (\\n    <RdxContext onChange={() => {}}>\\n      <div>\\n        <h2>Ui Stack</h2>\\n        <p>\\n          为了满足用户的个性化定制诉求，提供了\\n          <strong>\\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\\n            Ideal(理想状态)\\n          </strong>\\n          ,而Partial状态交由用户自己来处理。\\n        </p>\\n        <img\\n          width={600}\\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\\n        />\\n      </div>\\n      <div style={{ display: 'flex' }}>\\n        <RdxView\\n          id={'A'}\\n          reaction={rdxViewProps.current.reaction}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'B'}\\n          reaction={rdxViewProps.current.reaction}\\n          deps={[{ id: 'A' }]}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'C'}\\n          deps={[{ id: 'B' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'D'}\\n          deps={[{ id: 'C' }]}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n        <RdxView\\n          id={'E'}\\n          reaction={rdxViewProps.current.reactionThrowError}\\n          render={BaseView}\\n        />\\n      </div>\\n    </RdxContext>\\n  );\\n};\\n\\n// export const 其他信息传入 = () => {\\n//   const [state, setState] = React.useState({ a: 1 });\\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n//   const produceModel1 = useCallback(async (context) => {\\n//     await pause(2000);\\n//     return 2;\\n//   }, []);\\n//   return (\\n//     <RdxContext onChange={() => {}}>\\n//       <Button\\n//         onClick={() => {\\n//           setState({ a: 2 });\\n//         }}\\n//       >\\n//         修改组件相关配置信息\\n//       </Button>\\n//       <Button\\n//         onClick={() => {\\n//           setOtherStateChange({ a: 2 });\\n//         }}\\n//       >\\n//         修改无关信息\\n//       </Button>\\n//       <RdxView\\n//         id={'a'}\\n//         moduleConfig={state}\\n//         reaction={produceModel1}\\n//         render={BaseView}\\n//       />\\n//     </RdxContext>\\n//   );\\n// };\\n\\n// const areEqualForTask =  (\\n//   type: TaskCompareType,\\n//   preConfig: any,\\n//   nextConfig: any\\n// ) => {\\n//   if(type === TaskCompareType.UpdateTaskInfo)\\n// };\\nexport const 自定义配置变更校验 = () => {\\n  const [state, setState] = React.useState({ a: 1 });\\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\\n  const produceModel1 = useCallback(async (context) => {\\n    await pause(2000);\\n    context.updateState(context.value + 1);\\n  }, []);\\n  return (\\n    <RdxContext state={{}} onChange={() => {}}>\\n      <h2>严格组件渲染管控</h2>\\n      <p>\\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\\n      </p>\\n      <Button.Group>\\n        <Button\\n          type='primary'\\n          onClick={() => {\\n            setState({ a: 2 });\\n          }}\\n        >\\n          修改相关信息\\n        </Button>\\n        <Button\\n          type='secondary'\\n          onClick={() => {\\n            setOtherStateChange({ a: 2 });\\n          }}\\n        >\\n          修改无关信息\\n        </Button>\\n      </Button.Group>\\n\\n      <RdxView\\n        id={'a'}\\n        moduleConfig={state}\\n        reaction={produceModel1}\\n        render={BaseView}\\n      />\\n    </RdxContext>\\n  );\\n};\\n\",\"locationsMap\":{\"场景示例-组件的状态--rdx-view状态展示\":{\"startLoc\":{\"col\":27,\"line\":71},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":27,\"line\":71},\"endBody\":{\"col\":1,\"line\":130}},\"场景示例-组件的状态--自定义配置变更校验\":{\"startLoc\":{\"col\":25,\"line\":172},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":25,\"line\":172},\"endBody\":{\"col\":1,\"line\":212}}}},\n    info: { inline: true },\n  },\n};\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\n\nconst BaseView = (context: DataContext<any, any, any>) => {\n  const { status, id, deps = [], refresh, refreshView } = context;\n  let text = '';\n  let background = '';\n  console.log('status: ', status);\n  if (status === Status.FirstRender) {\n    text = '空白状态';\n  } else if (status === Status.Waiting) {\n    text = '依赖项加载中...';\n    background = 'rgb(0,157,248)';\n  } else if (status === Status.Running) {\n    text = '加载中...';\n    background = 'lightyellow';\n  } else if (status === Status.Error) {\n    text = '错误状态';\n    background = 'rgb(223,123,135)';\n  } else {\n    text = '理想状态';\n    background = 'lightgreen';\n  }\n  return (\n    <div\n      style={{\n        marginTop: 12,\n        marginLeft: 12,\n        fontSize: 16,\n        width: 150,\n        height: 76,\n        borderRadius: 4,\n        background: background,\n      }}\n    >\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          position: 'relative',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        组件Id: {id} <br />\n        组件依赖: {deps.map((item) => item.id)}\n        <br />\n        <Button onClick={refresh}>{text}</Button>\n      </div>\n    </div>\n  );\n};\nexport const RdxView状态展示 = addSourceDecorator(() => {\n  const rdxViewProps = useRef({\n    reaction: async (context: ReactionContext<any, any, any>) => {\n      await pause(2000);\n      context.updateState(2);\n    },\n    reactionThrowError: async (context) => {\n      throw '错误啦';\n    },\n  });\n  return (\n    <RdxContext onChange={() => {}}>\n      <div>\n        <h2>Ui Stack</h2>\n        <p>\n          为了满足用户的个性化定制诉求，提供了\n          <strong>\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\n            Ideal(理想状态)\n          </strong>\n          ,而Partial状态交由用户自己来处理。\n        </p>\n        <img\n          width={600}\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <RdxView\n          id={'A'}\n          reaction={rdxViewProps.current.reaction}\n          render={BaseView}\n        />\n        <RdxView\n          id={'B'}\n          reaction={rdxViewProps.current.reaction}\n          deps={[{ id: 'A' }]}\n          render={BaseView}\n        />\n        <RdxView\n          id={'C'}\n          deps={[{ id: 'B' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'D'}\n          deps={[{ id: 'C' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'E'}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n      </div>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\n// export const 其他信息传入 = () => {\n//   const [state, setState] = React.useState({ a: 1 });\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n//   const produceModel1 = useCallback(async (context) => {\n//     await pause(2000);\n//     return 2;\n//   }, []);\n//   return (\n//     <RdxContext onChange={() => {}}>\n//       <Button\n//         onClick={() => {\n//           setState({ a: 2 });\n//         }}\n//       >\n//         修改组件相关配置信息\n//       </Button>\n//       <Button\n//         onClick={() => {\n//           setOtherStateChange({ a: 2 });\n//         }}\n//       >\n//         修改无关信息\n//       </Button>\n//       <RdxView\n//         id={'a'}\n//         moduleConfig={state}\n//         reaction={produceModel1}\n//         render={BaseView}\n//       />\n//     </RdxContext>\n//   );\n// };\n\n// const areEqualForTask =  (\n//   type: TaskCompareType,\n//   preConfig: any,\n//   nextConfig: any\n// ) => {\n//   if(type === TaskCompareType.UpdateTaskInfo)\n// };\nexport const 自定义配置变更校验 = addSourceDecorator(() => {\n  const [state, setState] = React.useState({ a: 1 });\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n  const produceModel1 = useCallback(async (context) => {\n    await pause(2000);\n    context.updateState(context.value + 1);\n  }, []);\n  return (\n    <RdxContext state={{}} onChange={() => {}}>\n      <h2>严格组件渲染管控</h2>\n      <p>\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\n      </p>\n      <Button.Group>\n        <Button\n          type='primary'\n          onClick={() => {\n            setState({ a: 2 });\n          }}\n        >\n          修改相关信息\n        </Button>\n        <Button\n          type='secondary'\n          onClick={() => {\n            setOtherStateChange({ a: 2 });\n          }}\n        >\n          修改无关信息\n        </Button>\n      </Button.Group>\n\n      <RdxView\n        id={'a'}\n        moduleConfig={state}\n        reaction={produceModel1}\n        render={BaseView}\n      />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"场景示例-组件的状态--rdx-view状态展示":{startLoc:{col:27,line:93},endLoc:{col:139,line:152},startBody:{col:27,line:93},endBody:{col:139,line:152}},"场景示例-组件的状态--自定义配置变更校验":{startLoc:{col:25,line:194},endLoc:{col:139,line:234},startBody:{col:25,line:194},endBody:{col:139,line:234}}}},storySource:{source:"import React, { useCallback } from 'react';\nimport {\n  RdxContext,\n  Status,\n  RdxView,\n  DataContext,\n  ReactionContext,\n} from '@czwcode/rdx';\nimport { useRef } from 'react';\nimport { Button, Loading } from '@alifd/next';\nexport default {\n  title: '场景示例|组件的状态',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\n\nconst BaseView = (context: DataContext<any, any, any>) => {\n  const { status, id, deps = [], refresh, refreshView } = context;\n  let text = '';\n  let background = '';\n  console.log('status: ', status);\n  if (status === Status.FirstRender) {\n    text = '空白状态';\n  } else if (status === Status.Waiting) {\n    text = '依赖项加载中...';\n    background = 'rgb(0,157,248)';\n  } else if (status === Status.Running) {\n    text = '加载中...';\n    background = 'lightyellow';\n  } else if (status === Status.Error) {\n    text = '错误状态';\n    background = 'rgb(223,123,135)';\n  } else {\n    text = '理想状态';\n    background = 'lightgreen';\n  }\n  return (\n    <div\n      style={{\n        marginTop: 12,\n        marginLeft: 12,\n        fontSize: 16,\n        width: 150,\n        height: 76,\n        borderRadius: 4,\n        background: background,\n      }}\n    >\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          position: 'relative',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        组件Id: {id} <br />\n        组件依赖: {deps.map((item) => item.id)}\n        <br />\n        <Button onClick={refresh}>{text}</Button>\n      </div>\n    </div>\n  );\n};\nexport const RdxView状态展示 = () => {\n  const rdxViewProps = useRef({\n    reaction: async (context: ReactionContext<any, any, any>) => {\n      await pause(2000);\n      context.updateState(2);\n    },\n    reactionThrowError: async (context) => {\n      throw '错误啦';\n    },\n  });\n  return (\n    <RdxContext onChange={() => {}}>\n      <div>\n        <h2>Ui Stack</h2>\n        <p>\n          为了满足用户的个性化定制诉求，提供了\n          <strong>\n            Pending（加载中）、 Waiting（等待状态）、Error(错误状态)\n            Ideal(理想状态)\n          </strong>\n          ,而Partial状态交由用户自己来处理。\n        </p>\n        <img\n          width={600}\n          src='https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png'\n        />\n      </div>\n      <div style={{ display: 'flex' }}>\n        <RdxView\n          id={'A'}\n          reaction={rdxViewProps.current.reaction}\n          render={BaseView}\n        />\n        <RdxView\n          id={'B'}\n          reaction={rdxViewProps.current.reaction}\n          deps={[{ id: 'A' }]}\n          render={BaseView}\n        />\n        <RdxView\n          id={'C'}\n          deps={[{ id: 'B' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'D'}\n          deps={[{ id: 'C' }]}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n        <RdxView\n          id={'E'}\n          reaction={rdxViewProps.current.reactionThrowError}\n          render={BaseView}\n        />\n      </div>\n    </RdxContext>\n  );\n};\n\n// export const 其他信息传入 = () => {\n//   const [state, setState] = React.useState({ a: 1 });\n//   const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n//   const produceModel1 = useCallback(async (context) => {\n//     await pause(2000);\n//     return 2;\n//   }, []);\n//   return (\n//     <RdxContext onChange={() => {}}>\n//       <Button\n//         onClick={() => {\n//           setState({ a: 2 });\n//         }}\n//       >\n//         修改组件相关配置信息\n//       </Button>\n//       <Button\n//         onClick={() => {\n//           setOtherStateChange({ a: 2 });\n//         }}\n//       >\n//         修改无关信息\n//       </Button>\n//       <RdxView\n//         id={'a'}\n//         moduleConfig={state}\n//         reaction={produceModel1}\n//         render={BaseView}\n//       />\n//     </RdxContext>\n//   );\n// };\n\n// const areEqualForTask =  (\n//   type: TaskCompareType,\n//   preConfig: any,\n//   nextConfig: any\n// ) => {\n//   if(type === TaskCompareType.UpdateTaskInfo)\n// };\nexport const 自定义配置变更校验 = () => {\n  const [state, setState] = React.useState({ a: 1 });\n  const [otherStateChange, setOtherStateChange] = React.useState({ a: 1 });\n  const produceModel1 = useCallback(async (context) => {\n    await pause(2000);\n    context.updateState(context.value + 1);\n  }, []);\n  return (\n    <RdxContext state={{}} onChange={() => {}}>\n      <h2>严格组件渲染管控</h2>\n      <p>\n        Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。\n      </p>\n      <Button.Group>\n        <Button\n          type='primary'\n          onClick={() => {\n            setState({ a: 2 });\n          }}\n        >\n          修改相关信息\n        </Button>\n        <Button\n          type='secondary'\n          onClick={() => {\n            setOtherStateChange({ a: 2 });\n          }}\n        >\n          修改无关信息\n        </Button>\n      </Button.Group>\n\n      <RdxView\n        id={'a'}\n        moduleConfig={state}\n        reaction={produceModel1}\n        render={BaseView}\n      />\n    </RdxContext>\n  );\n};\n",locationsMap:{"场景示例-组件的状态--rdx-view状态展示":{startLoc:{col:27,line:71},endLoc:{col:1,line:130},startBody:{col:27,line:71},endBody:{col:1,line:130}},"场景示例-组件的状态--自定义配置变更校验":{startLoc:{col:25,line:172},endLoc:{col:1,line:212},startBody:{col:25,line:172},endBody:{col:1,line:212}}}},info:{inline:!0}}};const pause=t=>new Promise(resolve=>setTimeout(resolve,t)),BaseView=context=>{const{status:status,id:id,deps:deps=[],refresh:refresh,refreshView:refreshView}=context;let text="",background="";return console.log("status: ",status),status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.FirstRender?text="空白状态":status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Waiting?(text="依赖项加载中...",background="rgb(0,157,248)"):status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Running?(text="加载中...",background="lightyellow"):status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.c.Error?(text="错误状态",background="rgb(223,123,135)"):(text="理想状态",background="lightgreen"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{marginTop:12,marginLeft:12,fontSize:16,width:150,height:76,borderRadius:4,background:background}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{width:"100%",height:"100%",display:"flex",position:"relative",flexDirection:"column",alignItems:"center",justifyContent:"center"}},"组件Id: ",id," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),"组件依赖: ",deps.map(item=>item.id),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{onClick:refresh},text)))},RdxView状态展示=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const rdxViewProps=Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)({reaction:context=>__awaiter(void 0,void 0,void 0,(function*(){yield pause(2e3),context.updateState(2)})),reactionThrowError:context=>__awaiter(void 0,void 0,void 0,(function*(){throw"错误啦"}))});return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{onChange:()=>{}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2",null,"Ui Stack"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"为了满足用户的个性化定制诉求，提供了",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"Pending（加载中）、 Waiting（等待状态）、Error(错误状态) Ideal(理想状态)"),",而Partial状态交由用户自己来处理。"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("img",{width:600,src:"https://img.alicdn.com/tfs/TB1aHuzKqL7gK0jSZFBXXXZZpXa-1235-611.png"})),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{style:{display:"flex"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"A",reaction:rdxViewProps.current.reaction,render:BaseView}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"B",reaction:rdxViewProps.current.reaction,deps:[{id:"A"}],render:BaseView}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"C",deps:[{id:"B"}],reaction:rdxViewProps.current.reactionThrowError,render:BaseView}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"D",deps:[{id:"C"}],reaction:rdxViewProps.current.reactionThrowError,render:BaseView}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"E",reaction:rdxViewProps.current.reactionThrowError,render:BaseView})))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),自定义配置变更校验=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=react__WEBPACK_IMPORTED_MODULE_0___default.a.useState({a:1}),[otherStateChange,setOtherStateChange]=react__WEBPACK_IMPORTED_MODULE_0___default.a.useState({a:1}),produceModel1=Object(react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(context=>__awaiter(void 0,void 0,void 0,(function*(){yield pause(2e3),context.updateState(context.value+1)})),[]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{state:{},onChange:()=>{}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h2",null,"严格组件渲染管控"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p",null,"Rdx通过memo的方式，强行管控了组件的渲染状态，想要修改组件的渲染状态，只能通过Rdx提供的内置方法进行修改。"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a.Group,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{type:"primary",onClick:()=>{setState({a:2})}},"修改相关信息"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{type:"secondary",onClick:()=>{setOtherStateChange({a:2})}},"修改无关信息")),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.a,{id:"a",moduleConfig:state,reaction:produceModel1,render:BaseView}))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/status.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2179:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"总价计算",(function(){return 总价计算})),__webpack_require__.d(__webpack_exports__,"总价计算_响应函数",(function(){return 总价计算_响应函数})),__webpack_require__.d(__webpack_exports__,"总价计算_请求取消",(function(){return 总价计算_请求取消}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(104),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(38),_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(33),_alifd_next__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(273),_alifd_next__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(89),_alifd_next__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(2195),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":43},"endLoc":{"col":139,"line":63},"startBody":{"col":20,"line":43},"endBody":{"col":139,"line":63}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":102},"endLoc":{"col":139,"line":124},"startBody":{"col":25,"line":102},"endBody":{"col":139,"line":124}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":126},"endLoc":{"col":139,"line":171},"startBody":{"col":25,"line":126},"endBody":{"col":139,"line":171}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from \'@czwcode/rdx\';\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\nimport { useRef } from \'react\';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={\'数量\'}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = \'loading...\';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{\' \'}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw \'单价未输入\';\n  } else if (!amount) {\n    throw \'数量未输入\';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 总价计算_请求取消 = addSourceDecorator(addSourceDecorator(() => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: \'请求取消\',\n          content: \'请求被取消啦\',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw \'单价未输入\';\n      } else if (!amount) {\n        throw \'数量未输入\';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={ref.current.reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|简单用法\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":43},"endLoc":{"col":139,"line":63},"startBody":{"col":20,"line":43},"endBody":{"col":139,"line":63}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":102},"endLoc":{"col":139,"line":124},"startBody":{"col":25,"line":102},"endBody":{"col":139,"line":124}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":126},"endLoc":{"col":139,"line":171},"startBody":{"col":25,"line":126},"endBody":{"col":139,"line":171}}}},"storySource":{"source":"import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}}},\n    info: { inline: true },\n  },\n};\n',__ADDS_MAP__={"基本示例-简单用法--总价计算":{startLoc:{col:20,line:65},endLoc:{col:277,line:85},startBody:{col:20,line:65},endBody:{col:277,line:85}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:124},endLoc:{col:277,line:146},startBody:{col:25,line:124},endBody:{col:277,line:146}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:148},endLoc:{col:277,line:193},startBody:{col:25,line:148},endBody:{col:277,line:193}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from \'@czwcode/rdx\';\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\nimport { useRef } from \'react\';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={\'数量\'}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = \'loading...\';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{\' \'}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw \'单价未输入\';\n  } else if (!amount) {\n    throw \'数量未输入\';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: \'请求取消\',\n          content: \'请求被取消啦\',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw \'单价未输入\';\n      } else if (!amount) {\n        throw \'数量未输入\';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={ref.current.reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|简单用法\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}}},\n    info: { inline: true },\n  },\n};\n',__ADDS_MAP__={"基本示例-简单用法--总价计算":{startLoc:{col:20,line:43},endLoc:{col:139,line:63},startBody:{col:20,line:43},endBody:{col:139,line:63}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:102},endLoc:{col:139,line:124},startBody:{col:25,line:102},endBody:{col:139,line:124}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:126},endLoc:{col:139,line:171},startBody:{col:25,line:126},endBody:{col:139,line:171}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource;const View=context=>{const{value:value,next:next}=context;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,{value:value,onChange:next})},TotalView=context=>{const{depsValues:depsValues}=context,[unit=0,amount=0]=depsValues;return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,unit*amount)},总价计算=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",{style:{fontSize:16}},"展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view 和 reaction函数中获取到依赖的数据"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"单价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"单价",component:View,defaultValue:10}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"数量:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"数量",render:View,defaultValue:10}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"总价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"数量",deps:[{id:"单价"},{id:"数量"}],render:TotalView})),{__STORY__:__STORY__="import React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from '@czwcode/rdx';\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\nimport { useRef } from 'react';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = () => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={'数量'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = 'loading...';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{' '}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw '单价未输入';\n  } else if (!amount) {\n    throw '数量未输入';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = () => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={'总价'}\n        reaction={reaction}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nexport const 总价计算_请求取消 = () => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: '请求取消',\n          content: '请求被取消啦',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw '单价未输入';\n      } else if (!amount) {\n        throw '数量未输入';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={'总价'}\n        reaction={ref.current.reaction}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nexport default {\n  title: '基本示例|简单用法',\n  parameters: {\n    info: { inline: true },\n  },\n};\n",__ADDS_MAP__:__ADDS_MAP__={"基本示例-简单用法--总价计算":{startLoc:{col:20,line:21},endLoc:{col:1,line:41},startBody:{col:20,line:21},endBody:{col:1,line:41}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:80},endLoc:{col:1,line:102},startBody:{col:25,line:80},endBody:{col:1,line:102}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:104},endLoc:{col:1,line:149},startBody:{col:25,line:104},endBody:{col:1,line:149}}},__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),TotalViewFromNet=context=>{const{errorMsg:errorMsg,value:value,status:status,refresh:refresh}=context;let text=value;return status!==_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.c.Running&&status!==_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.c.Waiting||(text="loading..."),status===_czwcode_rdx__WEBPACK_IMPORTED_MODULE_3__.c.Error&&(text=errorMsg),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span",null,text," ",react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_5__.a,{onClick:()=>{refresh(value)}},"刷新"))},pause=t=>new Promise(resolve=>setTimeout(resolve,t)),reaction=context=>__awaiter(void 0,void 0,void 0,(function*(){const{updateState:updateState,depsValues:depsValues}=context,[unit,amount]=depsValues;if(!unit)throw"单价未输入";if(!amount)throw"数量未输入";yield pause(2e3),updateState(unit*amount)})),总价计算_响应函数=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",{style:{fontSize:16}},"响应式仅当当前模块的依赖项发生了改变的时候才会调用， 比如总价依赖单价和数量，当单价或数量改变的时候， reaction函数将会被调用。"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"单价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"单价",render:View}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"数量:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"数量",render:View}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"总价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"总价",reaction:reaction,deps:[{id:"单价"},{id:"数量"}],render:TotalViewFromNet})),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),总价计算_请求取消=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const ref=Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)({reaction:context=>__awaiter(void 0,void 0,void 0,(function*(){const{updateState:updateState,depsValues:depsValues,callbackMapWhenConflict:callbackMapWhenConflict}=context,[unit,amount]=depsValues;if(callbackMapWhenConflict(()=>{_alifd_next__WEBPACK_IMPORTED_MODULE_6__.a.notice({title:"请求取消",content:"请求被取消啦"})}),!unit)throw"单价未输入";if(!amount)throw"数量未输入";yield pause(2e3),updateState(unit*amount)}))});return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_1__.a,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",{style:{fontSize:16}},"响应式的方法中， 你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。 响应式的方法中， 可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常， 或者进行校验。"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("br",null),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"单价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"单价",render:View}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"数量:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"数量",render:View}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("strong",null,"总价:"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx__WEBPACK_IMPORTED_MODULE_2__.a,{id:"总价",reaction:ref.current.reaction,deps:[{id:"单价"},{id:"数量"}],render:TotalViewFromNet}))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});__webpack_exports__.default={title:"基本示例|简单用法",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":43},"endLoc":{"col":139,"line":63},"startBody":{"col":20,"line":43},"endBody":{"col":139,"line":63}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":102},"endLoc":{"col":139,"line":124},"startBody":{"col":25,"line":102},"endBody":{"col":139,"line":124}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":126},"endLoc":{"col":139,"line":171},"startBody":{"col":25,"line":126},"endBody":{"col":139,"line":171}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from \'@czwcode/rdx\';\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\nimport { useRef } from \'react\';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={\'数量\'}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = \'loading...\';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{\' \'}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw \'单价未输入\';\n  } else if (!amount) {\n    throw \'数量未输入\';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 总价计算_请求取消 = addSourceDecorator(addSourceDecorator(() => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: \'请求取消\',\n          content: \'请求被取消啦\',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw \'单价未输入\';\n      } else if (!amount) {\n        throw \'数量未输入\';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={ref.current.reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|简单用法\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from \'@czwcode/rdx\';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\\\nimport { useRef } from \'react\';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        id={\'数量\'}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\\\n  const { errorMsg, value, status, refresh } = context;\\\\n  let text = value as any;\\\\n  if (status === Status.Running || status === Status.Waiting) {\\\\n    text = \'loading...\';\\\\n  }\\\\n  if (status === Status.Error) {\\\\n    text = errorMsg;\\\\n  }\\\\n  return (\\\\n    <span>\\\\n      {text}{\' \'}\\\\n      <Button\\\\n        onClick={() => {\\\\n          refresh(value);\\\\n        }}\\\\n      >\\\\n        刷新\\\\n      </Button>\\\\n    </span>\\\\n  );\\\\n};\\\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\\\nconst reaction = async (\\\\n  context: ReactionContext<any, [number, number], any>\\\\n) => {\\\\n  const { updateState, depsValues } = context;\\\\n  const [unit, amount] = depsValues;\\\\n  // 模拟网络请求\\\\n  if (!unit) {\\\\n    throw \'单价未输入\';\\\\n  } else if (!amount) {\\\\n    throw \'数量未输入\';\\\\n  }\\\\n  await pause(2000);\\\\n  updateState(unit * amount);\\\\n};\\\\nexport const 总价计算_响应函数 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\\\n        reaction函数将会被调用。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 总价计算_请求取消 = () => {\\\\n  const ref = useRef({\\\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\\\n      const [unit, amount] = depsValues;\\\\n      callbackMapWhenConflict(() => {\\\\n        Notification.notice({\\\\n          title: \'请求取消\',\\\\n          content: \'请求被取消啦\',\\\\n        });\\\\n      });\\\\n      // 校验模块\\\\n      if (!unit) {\\\\n        throw \'单价未输入\';\\\\n      } else if (!amount) {\\\\n        throw \'数量未输入\';\\\\n      }\\\\n      // 模拟网络请求\\\\n      await pause(2000);\\\\n      updateState(unit * amount);\\\\n    },\\\\n  });\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        响应式的方法中，\\\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\\\n        响应式的方法中，\\\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\\\n        或者进行校验。\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\\\n      <strong>数量:</strong>\\\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\\\n      <strong>总价:</strong>\\\\n      <RdxView<any, [number, number], any, any>\\\\n        id={\'总价\'}\\\\n        reaction={ref.current.reaction}\\\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n        render={TotalViewFromNet}\\\\n      ></RdxView>\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|简单用法\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-简单用法--总价计算\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":21},\\"endLoc\\":{\\"col\\":1,\\"line\\":41},\\"startBody\\":{\\"col\\":20,\\"line\\":21},\\"endBody\\":{\\"col\\":1,\\"line\\":41}},\\"基本示例-简单用法--总价计算-响应函数\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":80},\\"endLoc\\":{\\"col\\":1,\\"line\\":102},\\"startBody\\":{\\"col\\":25,\\"line\\":80},\\"endBody\\":{\\"col\\":1,\\"line\\":102}},\\"基本示例-简单用法--总价计算-请求取消\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":104},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":25,\\"line\\":104},\\"endBody\\":{\\"col\\":1,\\"line\\":149}}}},\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":43},"endLoc":{"col":139,"line":63},"startBody":{"col":20,"line":43},"endBody":{"col":139,"line":63}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":102},"endLoc":{"col":139,"line":124},"startBody":{"col":25,"line":102},"endBody":{"col":139,"line":124}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":126},"endLoc":{"col":139,"line":171},"startBody":{"col":25,"line":126},"endBody":{"col":139,"line":171}}}},"storySource":{"source":"import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}}},\n    info: { inline: true },\n  },\n};\n',locationsMap:{"基本示例-简单用法--总价计算":{startLoc:{col:20,line:65},endLoc:{col:277,line:85},startBody:{col:20,line:65},endBody:{col:277,line:85}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:124},endLoc:{col:277,line:146},startBody:{col:25,line:124},endBody:{col:277,line:146}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:148},endLoc:{col:277,line:193},startBody:{col:25,line:148},endBody:{col:277,line:193}}}},storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from \'@czwcode/rdx\';\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\nimport { useRef } from \'react\';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={\'数量\'}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = \'loading...\';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{\' \'}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw \'单价未输入\';\n  } else if (!amount) {\n    throw \'数量未输入\';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 总价计算_请求取消 = addSourceDecorator(() => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: \'请求取消\',\n          content: \'请求被取消啦\',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw \'单价未输入\';\n      } else if (!amount) {\n        throw \'数量未输入\';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={\'单价\'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={\'数量\'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={\'总价\'}\n        reaction={ref.current.reaction}\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|简单用法\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from \'@czwcode/rdx\';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from \'@alifd/next\';\\nimport { useRef } from \'react\';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  return <span>{unit * amount}</span>;\\n};\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} component={View} defaultValue={10}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View} defaultValue={10}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView\\n        id={\'数量\'}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalView}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\\n  const { errorMsg, value, status, refresh } = context;\\n  let text = value as any;\\n  if (status === Status.Running || status === Status.Waiting) {\\n    text = \'loading...\';\\n  }\\n  if (status === Status.Error) {\\n    text = errorMsg;\\n  }\\n  return (\\n    <span>\\n      {text}{\' \'}\\n      <Button\\n        onClick={() => {\\n          refresh(value);\\n        }}\\n      >\\n        刷新\\n      </Button>\\n    </span>\\n  );\\n};\\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\\nconst reaction = async (\\n  context: ReactionContext<any, [number, number], any>\\n) => {\\n  const { updateState, depsValues } = context;\\n  const [unit, amount] = depsValues;\\n  // 模拟网络请求\\n  if (!unit) {\\n    throw \'单价未输入\';\\n  } else if (!amount) {\\n    throw \'数量未输入\';\\n  }\\n  await pause(2000);\\n  updateState(unit * amount);\\n};\\nexport const 总价计算_响应函数 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\\n        比如总价依赖单价和数量，当单价或数量改变的时候，\\n        reaction函数将会被调用。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport const 总价计算_请求取消 = () => {\\n  const ref = useRef({\\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\\n      const [unit, amount] = depsValues;\\n      callbackMapWhenConflict(() => {\\n        Notification.notice({\\n          title: \'请求取消\',\\n          content: \'请求被取消啦\',\\n        });\\n      });\\n      // 校验模块\\n      if (!unit) {\\n        throw \'单价未输入\';\\n      } else if (!amount) {\\n        throw \'数量未输入\';\\n      }\\n      // 模拟网络请求\\n      await pause(2000);\\n      updateState(unit * amount);\\n    },\\n  });\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        响应式的方法中，\\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\\n        响应式的方法中，\\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\\n        或者进行校验。\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <RdxView id={\'单价\'} render={View}></RdxView>\\n      <strong>数量:</strong>\\n      <RdxView id={\'数量\'} render={View}></RdxView>\\n      <strong>总价:</strong>\\n      <RdxView<any, [number, number], any, any>\\n        id={\'总价\'}\\n        reaction={ref.current.reaction}\\n        deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n        render={TotalViewFromNet}\\n      ></RdxView>\\n    </RdxContext>\\n  );\\n};\\n\\nexport default {\\n  title: \'基本示例|简单用法\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-简单用法--总价计算":{"startLoc":{"col":20,"line":21},"endLoc":{"col":1,"line":41},"startBody":{"col":20,"line":21},"endBody":{"col":1,"line":41}},"基本示例-简单用法--总价计算-响应函数":{"startLoc":{"col":25,"line":80},"endLoc":{"col":1,"line":102},"startBody":{"col":25,"line":80},"endBody":{"col":1,"line":102}},"基本示例-简单用法--总价计算-请求取消":{"startLoc":{"col":25,"line":104},"endLoc":{"col":1,"line":149},"startBody":{"col":25,"line":104},"endBody":{"col":1,"line":149}}}},\n    info: { inline: true },\n  },\n};\n',locationsMap:{"基本示例-简单用法--总价计算":{startLoc:{col:20,line:43},endLoc:{col:139,line:63},startBody:{col:20,line:43},endBody:{col:139,line:63}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:102},endLoc:{col:139,line:124},startBody:{col:25,line:102},endBody:{col:139,line:124}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:126},endLoc:{col:139,line:171},startBody:{col:25,line:126},endBody:{col:139,line:171}}}},storySource:{source:"import React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  DataContext,\n  ReactionContext,\n  Status,\n} from '@czwcode/rdx';\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\nimport { useRef } from 'react';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = () => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={'数量'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nconst TotalViewFromNet = (context: DataContext<number, any, any>) => {\n  const { errorMsg, value, status, refresh } = context;\n  let text = value as any;\n  if (status === Status.Running || status === Status.Waiting) {\n    text = 'loading...';\n  }\n  if (status === Status.Error) {\n    text = errorMsg;\n  }\n  return (\n    <span>\n      {text}{' '}\n      <Button\n        onClick={() => {\n          refresh(value);\n        }}\n      >\n        刷新\n      </Button>\n    </span>\n  );\n};\nconst pause = (t: number) => new Promise((resolve) => setTimeout(resolve, t));\nconst reaction = async (\n  context: ReactionContext<any, [number, number], any>\n) => {\n  const { updateState, depsValues } = context;\n  const [unit, amount] = depsValues;\n  // 模拟网络请求\n  if (!unit) {\n    throw '单价未输入';\n  } else if (!amount) {\n    throw '数量未输入';\n  }\n  await pause(2000);\n  updateState(unit * amount);\n};\nexport const 总价计算_响应函数 = () => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式仅当当前模块的依赖项发生了改变的时候才会调用，\n        比如总价依赖单价和数量，当单价或数量改变的时候，\n        reaction函数将会被调用。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={'总价'}\n        reaction={reaction}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nexport const 总价计算_请求取消 = () => {\n  const ref = useRef({\n    reaction: async (context: ReactionContext<any, [number, number], any>) => {\n      const { updateState, depsValues, callbackMapWhenConflict } = context;\n      const [unit, amount] = depsValues;\n      callbackMapWhenConflict(() => {\n        Notification.notice({\n          title: '请求取消',\n          content: '请求被取消啦',\n        });\n      });\n      // 校验模块\n      if (!unit) {\n        throw '单价未输入';\n      } else if (!amount) {\n        throw '数量未输入';\n      }\n      // 模拟网络请求\n      await pause(2000);\n      updateState(unit * amount);\n    },\n  });\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        响应式的方法中，\n        你可以向callbackMapWhenConflict方法中进行你清楚副作用的工作。例如请求的取消。\n        响应式的方法中，\n        可以通过updateState的方法更更新当前模块的数据，通过throw方法直接抛出异常，\n        或者进行校验。\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} render={View}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View}></RdxView>\n      <strong>总价:</strong>\n      <RdxView<any, [number, number], any, any>\n        id={'总价'}\n        reaction={ref.current.reaction}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalViewFromNet}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n\nexport default {\n  title: '基本示例|简单用法',\n  parameters: {\n    info: { inline: true },\n  },\n};\n",locationsMap:{"基本示例-简单用法--总价计算":{startLoc:{col:20,line:21},endLoc:{col:1,line:41},startBody:{col:20,line:21},endBody:{col:1,line:41}},"基本示例-简单用法--总价计算-响应函数":{startLoc:{col:25,line:80},endLoc:{col:1,line:102},startBody:{col:25,line:80},endBody:{col:1,line:102}},"基本示例-简单用法--总价计算-请求取消":{startLoc:{col:25,line:104},endLoc:{col:1,line:149},startBody:{col:25,line:104},endBody:{col:1,line:149}}}},info:{inline:!0}}}},2180:function(module,exports,__webpack_require__){},2181:function(module,exports,__webpack_require__){var map={"./api/RdxContext.stories.mdx":2182,"./api/RdxView.stories.mdx":2183,"./hooks/RdxReaction.stories.mdx":2184,"./hooks/RdxState.stories.mdx":2185,"./introduces/coreConcepts.stories.mdx":2186,"./introduces/installation.stories.mdx":2187,"./introduces/motivation.stories.mdx":2188};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=2181},2182:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"Api| RdxContext",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"给子组件提供上下文，必须是 RdxView 的父级组件。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"initializeState?: { ","[key: string]",": any }\n设置初始化的的值到Provider中。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"value?: { ","[key: string]",": any }\n受控的方式，设置值到Provider中，当值改变的的时候，当前context的所有组件将被重新执行。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"onChange?: (state: {","[key: string]",": any}) => void\n当内部任务流状态全部执行结束的时候，onChange将被调用。"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"props"},"Props"),_ref4)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Api| RdxContext",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref5}}),__webpack_exports__.default=componentMeta},2183:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"Api| RdxView",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"RdxView, 定义一个模块视图"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("br",null),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"props<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",{parentName:"li"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"id: stirng"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的唯一 id。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"depsIds?: string | { id: string, weight?: number}[]"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"当前模块依赖的的模块的 id,配置了依赖模块的 id，可以在 reaction 和 view 中获取到依赖模块的数据，并且当依赖模块发生改变时，当前模块的 reaction 将重新执行。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"scope?: string"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的作用域，当前模块的值修改的时候，只会通知相同作用域的模块。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"areEqualForTask?: (\ntype: CompareType,\npreConfig: IModuleConfig,\nnextConfig: IModuleConfig\n) => boolean;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"当模块的配置变更的时候，是否要更新视图或者触发响应式函数，返回 true 时，怎么不会更新，返回 false 则更新。通过 type 来区分当前是视图校验还是响应式函数的执行校验。\n默认情况下，会通过 shallowequal 方法来进行比较")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"moduleConfig?: IModuleConfig;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的配置，可以在 reaction 和 view 获取到模块的配置信息。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"defaultValue?: IModel;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的默认状态，当模块状态为 undefined 时，会以该状态作为默认值。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"reaction?: MixedTask<IModel, IRelyModel, IModuleConfig>;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"响应式函数")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"reactionType?: { ","[key: string]",": any }"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"响应式函数的类型， 可选值 ReactionType.Async(异步) 和 ReactionType.Sync(同步)")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"recordStatus?: boolean;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块是否记录状态，开启会则模块将会增加 Waiting Loading，默认状态为开启")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"render?: (\ncontext: DataContext<IModel, IRelyModel, IModuleConfig>\n) => React.ReactNode;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的视图渲染。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"component?: (\ncontext: React.ComponentType<DataContext<IModel, IRelyModel, IModuleConfig>>;;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"模块的视图渲染。")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"reducer?: (\nstate: IModel,\naction: IAction,\ncontext: ShareContextClass<IModel, IRelyModel, IModuleConfig>\n) => IModel;"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"li"},"reducer 定义了当前模块接受到 action 的时候，状态如何改变。"))))),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"用户可以根据直觉写代码，单价模块， 数量模块，总价模块依赖单价和数量。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Story,{id:"基本示例-简单用法--总价计算",mdxType:"Story"});function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"rdxview-props"},"RdxView Props"),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"mixedtaskimodel-irelymodel-imoduleconfig"},"MixedTask<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"type MixedTask<IModel, IRelyModel, IModuleConfig> =\n  | ASYNC_TASK<IModel, IRelyModel, IModuleConfig>\n  | SYNC_TASK<IModel, IRelyModel, IModuleConfig>;\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"async_taskimodel-irelymodel-imoduleconfig"},"ASYNC_TASK<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"type ASYNC_TASK<IModel, IRelyModel, IModuleConfig> = (\n  taskInfo: ReactionContext<IModel, IRelyModel, IModuleConfig>\n) => Promise<void>;\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"sync_taskimodel-irelymodel-imoduleconfig"},"SYNC_TASK<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"type SYNC_TASK<IModel, IRelyModel, IModuleConfig> = (taskInfo: ReactionContext<IModel, IRelyModel, IModuleConfig>) => void>\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"reactioncontextimodel-irelymodel-imoduleconfig"},"ReactionContext<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"export interface ReactionContext<IModel, IRelyModel, IModuleConfig>\n  extends BaseTaskInfo {\n  /**\n   * 模块唯一id\n   */\n  id: string;\n  value: IModel;\n  /**\n   * 当事件冲突时触发时候的回调\n   *\n   * @memberof ReactionContext\n   */\n  callbackMapWhenConflict: (callback: () => void) => void;\n  /**\n   * 依赖的模块的值\n   */\n  depsValues: IRelyModel;\n  /**\n   * 更新数据的方法\n   */\n  updateState: (v: IModel) => void;\n  /**\n   * 模块的其他配置\n   */\n  moduleConfig?: IModuleConfig;\n  /**\n   * 依赖的模块配置\n   */\n  depsModuleConfig?: IModuleConfig[];\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"datacontextimodel-irelymodel-imoduleconfig"},"DataContext<IModel, IRelyModel, IModuleConfig>"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"export interface DataContext<IModel, IRelyModel, IModuleConfig> {\n  /**\n   * 模块唯一id\n   */\n  id: string;\n  /**\n   * 模块配置\n   */\n  moduleConfig?: IModuleConfig;\n  /**\n   * 派发action后通过reducer进行状态更新\n   */\n  dispatch: (action: any) => void;\n  /**\n   * 派发action后，触发其他模块的reducer进行状态更新\n   */\n  dispatchById: (id: string, action: any) => void;\n  /**\n   * 当模块的状态为Status.Running 或者 Status.Waiting的时候，loading为true\n   */\n  loading: boolean;\n  /**\n   * 当前模块的状态\n   */\n  status: Status;\n  /**\n   * 当前模块的错误信息\n   */\n  errorMsg?: string;\n  /**\n   * 当前模块的数据\n   */\n  value: IModel;\n  /**\n   * 当前模块依赖的模块id\n   */\n  depsIds?: (string | { id: string; weight?: number })[];\n  /**\n   * 当前模块依赖的模块数据\n   */\n  depsValues: IRelyModel;\n  /**\n   * 更新当前模块的数据，并调用当前模块以及下游模块的响应函数\n   */\n  refresh: (value?: IModel) => void;\n  /**\n   * 更新当前模块的数据，并调用下游模块的响应函数\n   */\n  next: (value: IModel) => void;\n  /**\n   * 如果当前模块配置有scope，可以合并当前scope的数据到全局\n   */\n  mergeScopeState2Global: () => void;\n}\n")),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"简单示例"},"简单示例:"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h4",{id:"总价--数量--单价"},"总价 = 数量 ","*"," 单价"),_ref6,_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("pre",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("code",_extends({parentName:"pre"},{className:"language-tsx"}),"const View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  return <span>{unit * amount}</span>;\n};\nexport const 总价计算 = () => {\n  return (\n    <RdxContext>\n      <br />\n      <strong>单价:</strong>\n      <RdxView id={'单价'} component={View} defaultValue={10}></RdxView>\n      <strong>数量:</strong>\n      <RdxView id={'数量'} render={View} defaultValue={10}></RdxView>\n      <strong>总价:</strong>\n      <RdxView\n        id={'数量'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n    </RdxContext>\n  );\n};\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Api| RdxView",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref8}}),__webpack_exports__.default=componentMeta},2184:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"hooks | RdxReaction",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"为当前组件设置一个响应式函数，响应式函数中可以更新当前节点数据，或者选择触发其他的响应式函数。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"initializeState?: { ","[key: string]",": any }\n设置初始化的的值到Provider中。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"value?: { ","[key: string]",": any }\n受控的方式，设置值到Provider中，当值改变的的时候，当前context的所有组件将被重新执行。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"onChange?: (state: {","[key: string]",": any}) => void\n当内部任务流状态全部执行结束的时候，onChange将被调用。"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"props"},"Props"),_ref4)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"hooks | RdxReaction",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref5}}),__webpack_exports__.default=componentMeta},2185:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"hooks | RdxState",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"为当前组件设置一个响应式函数，响应式函数中可以更新当前节点数据，或者选择触发其他的响应式函数。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"initializeState?: { ","[key: string]",": any }\n设置初始化的的值到Provider中。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"value?: { ","[key: string]",": any }\n受控的方式，设置值到Provider中，当值改变的的时候，当前context的所有组件将被重新执行。"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"onChange?: (state: {","[key: string]",": any}) => void\n当内部任务流状态全部执行结束的时候，onChange将被调用。"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"props"},"Props"),_ref4)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"hooks | RdxState",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref5}}),__webpack_exports__.default=componentMeta},2186:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"介绍|核心概念",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"用户的交互行为是不可预期的，每个行为都会触发引发一些响应，响应有同步的，也有异步的, 根据响应的速度来更新视图。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"这样带来了的几个问题： "),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"多余的状态被误触发，组件树连锁rerender --- 需要通过scu 或者 memo来避免"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"用户需要通过书写代码来确保页面上展示正确的数据"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"模块的状态维护成本  --- 多模块之间重复度相当高的代码，每次都要重复写？"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"响应的代码重复触发，响应代码中常常包含着数据请求的代码，导致请求触发多次，又需要通过代码来保证展示的正确性。")),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("strong",{parentName:"p"},"期望的样子"),"\n国家 -> 城市 -> 区域 顺序发起请求，并按照顺序返回更新页面。"),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"通过组件通过声明式的方式，显性的对当前模块进行定义，RdxContext 容器将会收集所有子组件的依赖信息。"),_ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"通过依赖收集后，我们会有一个完整定义模块间关系的图。\n我们希望通过图来控制组件的响应函数的执行，以及组件的渲染。\n我们期望的模块的开发状态，应该是每个模块都只应该只关心其他模块的数据。"),_ref9=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不不用去关心其他模块的加载状态"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不用关心当前模块的被重复触发"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"不用关系找不到合理的")),_ref10=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"RdxView 组件维护着一套完整的状态，"),_ref11=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的初次渲染 Status.FirstRender"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的等待状态 Status.Waiting"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的响应函数运行的状态 Status.Loading"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的运行结束的状态 Status.None"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的响应函数执行异常的状态 Status.Error"));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"为什么需要收集依赖？"},"为什么需要收集依赖？"),_ref3,_ref4,_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("img",_extends({parentName:"p"},{src:"https://img.alicdn.com/tfs/TB1vtaHLeL2gK0jSZPhXXahvXXa-263-145.gif",alt:null}))),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"依赖收集"},"依赖收集"),_ref7,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"依赖图的维护"},"依赖图的维护"),_ref8,_ref9,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"强关联模块的去边和去节点的逻辑"},"强关联模块的去边和去节点的逻辑"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"组件的状态"},"组件的状态"),_ref10,_ref11,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"组件间依赖的关系的可视化分析"},"组件间依赖的关系的可视化分析"))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"介绍|核心概念",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref12=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref12}}),__webpack_exports__.default=componentMeta},2187:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"介绍|基本信息",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"状态管理框架, 通过控制数据流图的方式来控制组件的渲染，协同同步和异步事件流。"),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("inlineCode",{parentName:"p"},"npm install @czwcode/rdx")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"@czw"),_ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"分解复杂交互"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"统一处理组件渲染前置依赖"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"统一维护模块加载状态"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"合适的取消前置依赖执行的实际"),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"数据状态可视化工具")),_ref7=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"表格用到了大量较新的浏览器 API，目前阶段只兼容较新版本的 Chrome/Firefox/Safari");function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h2",{id:"czwcoderdx"},"@czwcode/rdx"),_ref3,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"安装"},"安装"),_ref4,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"维护人员"},"维护人员"),_ref5,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"特点"},"特点"),_ref6,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"兼容性说明"},"兼容性说明"),_ref7)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"介绍|基本信息",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref8=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref8}}),__webpack_exports__.default=componentMeta},2188:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(17),__webpack_require__(73),__webpack_require__(56),__webpack_require__(29),__webpack_require__(20),__webpack_require__(84),__webpack_require__(69),__webpack_require__(196),__webpack_require__(197),__webpack_require__(22),__webpack_require__(61),__webpack_require__(1);var _mdx_js_react__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(8),_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(35);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.Meta,{title:"介绍|动机",mdxType:"Meta"}),_ref3=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",null,"出于兼容性和简便性的考虑，最好使用React的内置状态管理功能，但是React有一定的局限性："),_ref4=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("blockquote",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("p",{parentName:"blockquote"},"模块之间共享数据，通常通过状态提升或者context的方式，这样会导致许多交叉渲染，并且这两种方式都很难从渲染树的叶子节点进行模块拆分，对于顶部上层状态存在依赖。")),_ref5=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("ul",null,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"状态的定义是分布式的， 从而可以更好进行code-splitting."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"统一的流管理，可以避免组件的re-render."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"声明式的定义，可以借助可视化的方式，更好的进行协作开发."),Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("li",{parentName:"ul"},"组件的定义范式，协助更好的管理组件的状态."));function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)("h3",{id:"核心动机"},"核心动机"),_ref3,_ref4,_ref5)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"介绍|动机",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref6=Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_13__.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(_mdx_js_react__WEBPACK_IMPORTED_MODULE_12__.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref6}}),__webpack_exports__.default=componentMeta},2191:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"sample",(function(){return sample}));var DISPLAY_STATE,react=__webpack_require__(1),react_default=__webpack_require__.n(react),global=__webpack_require__(33),RdxContext=__webpack_require__(104),View=__webpack_require__(38),grid=__webpack_require__(2196),es_radio=__webpack_require__(354),es_select=__webpack_require__(357),typings_global=__webpack_require__(116),shareContext=__webpack_require__(86),src_typings_global=__webpack_require__(226);!function(DISPLAY_STATE){DISPLAY_STATE.CANCEL="CANCEL",DISPLAY_STATE.CONFLICT="CONFLICT"}(DISPLAY_STATE||(DISPLAY_STATE={}));typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,typings_global.a.IDeal,DISPLAY_STATE.CANCEL,DISPLAY_STATE.CONFLICT,typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,DISPLAY_STATE.CANCEL,DISPLAY_STATE.CONFLICT;var GraphType;!function(GraphType){GraphType.Global="Global",GraphType.PreRunning="PreRunning",GraphType.Trigger="Trigger",GraphType.EffectPoints="EffectPoints",GraphType.ConflictPoints="ConflictPoints",GraphType.AllPointsNow="AllPointsNow",GraphType.RunnningPointsNotCut="RunnningPointsNotCut",GraphType.BuildDAG="BuildDAG",GraphType.RunnningPointsCut="RunnningPointsCut"}(GraphType||(GraphType={}));var DataPersistence=()=>{const context=react.useContext(shareContext.c),[state,setState]=react.useState({snapShots:[],temporarySnapShots:null}),setStateProxy=callback=>{setState(state=>Object.assign(Object.assign({},state),callback(state)))},initSnapShot=react.useCallback(type=>{setStateProxy(state=>{return{snapShots:[...state.snapShots,state.temporarySnapShots],temporarySnapShots:(eventType=type,{type:eventType,graph:[],preRunningPoints:[],triggerPoints:[],effectPoints:[],conflictPoints:[],currentAllPoints:[],edgeCutFlow:[],currentRunningPoints:[],status:[],states:[]})};var eventType})},[]);return react.useEffect(()=>(context.subject.on(src_typings_global.b.Init,process=>{initSnapShot(src_typings_global.b.Init)}),context.subject.on(src_typings_global.b.RdxContextInit,process=>{initSnapShot(src_typings_global.b.RdxContextInit)}),context.subject.on(src_typings_global.b.EventTrigger,process=>{initSnapShot(src_typings_global.b.EventTrigger)}),context.subject.on(src_typings_global.b.BatchEventTrigger,process=>{initSnapShot(src_typings_global.b.BatchEventTrigger)}),context.subject.on(src_typings_global.b.TaskChange,process=>{initSnapShot(src_typings_global.b.TaskChange)}),context.subject.on(src_typings_global.b.ProcessRunningGraph,process=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),process)}))}),context.subject.on(src_typings_global.b.StateChange,stateInfo=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),{states:[...state.temporarySnapShots?state.temporarySnapShots.states:[],stateInfo]})}))}),context.subject.on(src_typings_global.b.StatusChange,process=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),{status:[...state.temporarySnapShots.status,process]})}))}),()=>{const ee=context.subject;ee.removeAllListeners(src_typings_global.b.Init),ee.removeAllListeners(src_typings_global.b.RdxContextInit),ee.removeAllListeners(src_typings_global.b.EventTrigger),ee.removeAllListeners(src_typings_global.b.ProcessRunningGraph),ee.removeAllListeners(src_typings_global.b.StatusChange),ee.removeAllListeners(src_typings_global.b.TaskChange)}),[]),Object.assign(Object.assign({},state),{realTimeState:context.taskState.getAll(),allSnapShots:[...state.snapShots,state.temporarySnapShots].filter(Boolean)})},table=__webpack_require__(171),tab=__webpack_require__(2199),balloon=__webpack_require__(2200),utils=__webpack_require__(115),main=__webpack_require__(199),main_default=__webpack_require__.n(main);const{Column:Column}=table.a;var visualState=()=>{const state=DataPersistence(),{allSnapShots:allSnapShots=[],realTimeState:realTimeState}=state,[activeIndex,setActiveIndex]=react.useState(0),[filterParams,setFilterParams]=react.useState({});react.useEffect(()=>{setActiveIndex(Math.max(allSnapShots.length-1,0))},[allSnapShots.length]);const stateDataSource=activeIndex?allSnapShots[activeIndex].states:[],targetTypeDataSource=Object(utils.e)(stateDataSource.map(item=>item.targetType).map(item=>({label:item,value:item})));return console.log("table"),react.createElement("div",{style:{position:"fixed",width:400,height:"100%",top:0,right:0,overflow:"auto"}},react.createElement(tab.a,null,react.createElement(tab.a.Item,{title:"事件状态"},react.createElement(table.a,{dataSource:allSnapShots,maxBodyHeight:300,onRowClick:(record,index)=>{setActiveIndex(index)}},react.createElement(Column,{title:"事件类型",dataIndex:"type"}),react.createElement(Column,{title:"原来运行的点",dataIndex:"preRunningPoints",cell:(value=[])=>react.createElement("div",{style:{maxWidth:100,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},value.map(item=>item.key).join(","))}),react.createElement(Column,{title:"当前运行的点",dataIndex:"currentRunningPoints",cell:(value=[])=>react.createElement("div",{title:value.map(item=>item.key).join(","),style:{maxWidth:100,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},value.map(item=>item.key).join(","))})),react.createElement(table.a,{maxBodyHeight:500,isZebra:!0,dataSource:filterDataSource(stateDataSource,filterParams),onFilter:filterParams=>{setFilterParams(filterParams)}},react.createElement(Column,{title:"action类型",dataIndex:"actionType"}),react.createElement(Column,{title:"目标id",dataIndex:"key"}),react.createElement(Column,{title:"目标类型",dataIndex:"targetType",filters:targetTypeDataSource}),react.createElement(Column,{title:"当前变化数据",dataIndex:"value",cell:value=>react.createElement(balloon.a,{popupStyle:{minWidth:500,height:300,overflow:"auto"},trigger:react.createElement("div",{style:{maxWidth:"200px",maxHeight:"100px",overflow:"hidden"}},JSON.stringify(value,getCircularReplacer())),triggerType:"click"},react.createElement("div",null,value))}))),react.createElement(tab.a.Item,{title:"当前状态"},react.createElement(main_default.a,{style:{height:300,overflow:"auto"},src:realTimeState}))))};function filterDataSource(ds,filterParams){return Object.keys(filterParams).forEach(key=>{const selectedKeys=filterParams[key].selectedKeys;selectedKeys.length&&(ds=ds.filter(record=>selectedKeys.some(value=>record[key].indexOf(value)>-1)))}),ds}const getCircularReplacer=()=>{const seen=new WeakSet;return(key,value)=>{if("object"==typeof value&&null!==value){if(seen.has(value))return;seen.add(value)}return value}};var EchartsGraph=__webpack_require__(358),input=__webpack_require__(131),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};const{Row:Row,Col:Col}=grid.a;var ChooseValueType,LinkedDataType,LinkedValueChooseType;!function(ChooseValueType){ChooseValueType.Value="Value",ChooseValueType.Date="Date",ChooseValueType.OnlyChooseType="OnlyChooseType",ChooseValueType.OnlyChooseDefaultValue="OnlyChooseDefaultValue"}(ChooseValueType||(ChooseValueType={})),function(LinkedDataType){LinkedDataType.DimensionMember="dimensionMember",LinkedDataType.MeasureMember="measureMember"}(LinkedDataType||(LinkedDataType={})),function(LinkedValueChooseType){LinkedValueChooseType.Single="Single",LinkedValueChooseType.Multiple="Multiple"}(LinkedValueChooseType||(LinkedValueChooseType={}));const LinkedValueChooseData=[{label:"单选",value:LinkedValueChooseType.Single},{label:"多选",value:LinkedValueChooseType.Multiple}];var BaseLinkedDefaultValueTypeEnum,DimensionDataDefaultValueTypeEnum,MeasureDataDefaultValueTypeEnum,OtherDefaultValueTypeEnum,DateDefaultValueTypeEnum;!function(BaseLinkedDefaultValueTypeEnum){BaseLinkedDefaultValueTypeEnum.SelectAll="selectAll",BaseLinkedDefaultValueTypeEnum.None="None",BaseLinkedDefaultValueTypeEnum.SelectFirst="selectFirst"}(BaseLinkedDefaultValueTypeEnum||(BaseLinkedDefaultValueTypeEnum={})),function(DimensionDataDefaultValueTypeEnum){DimensionDataDefaultValueTypeEnum.Custom="custom"}(DimensionDataDefaultValueTypeEnum||(DimensionDataDefaultValueTypeEnum={})),function(MeasureDataDefaultValueTypeEnum){MeasureDataDefaultValueTypeEnum.CustomIndicator="customIndicator"}(MeasureDataDefaultValueTypeEnum||(MeasureDataDefaultValueTypeEnum={})),function(OtherDefaultValueTypeEnum){OtherDefaultValueTypeEnum.UrlParams="urlParams",OtherDefaultValueTypeEnum.LocalStorageInfo="localStorageInfo"}(OtherDefaultValueTypeEnum||(OtherDefaultValueTypeEnum={})),function(DateDefaultValueTypeEnum){DateDefaultValueTypeEnum.TodayDiff="todayDiff",DateDefaultValueTypeEnum.YesterdayDiff="lastDayDiff",DateDefaultValueTypeEnum.CustomDate="customDate"}(DateDefaultValueTypeEnum||(DateDefaultValueTypeEnum={}));const defaultValueTypes=[{label:"空值",value:BaseLinkedDefaultValueTypeEnum.None},{label:"全选",value:BaseLinkedDefaultValueTypeEnum.SelectAll,tag:LinkedValueChooseType.Multiple},{label:"选中第一个",value:BaseLinkedDefaultValueTypeEnum.SelectFirst},{label:"自定义维度成员",value:DimensionDataDefaultValueTypeEnum.Custom},{label:"自定义指标选择",value:MeasureDataDefaultValueTypeEnum.CustomIndicator},{label:"用户信息存储",value:OtherDefaultValueTypeEnum.LocalStorageInfo},{label:"链接参数",value:OtherDefaultValueTypeEnum.UrlParams}];var StateEnum;!function(StateEnum){StateEnum.chooseType="chooseType",StateEnum.valueType="valueType",StateEnum.relationValue="relationValue"}(StateEnum||(StateEnum={}));const TypeView=context=>{const{value:value,next:next}=context;return react.createElement(es_radio.a.Group,{value:value.value,onChange:v=>{console.log("v: ",v),next(Object.assign(Object.assign({},value),{value:v}))},dataSource:value.dataSource})},basicComponentMap={string:input.a},otherComponentMap={select:es_select.a},FromItem=props=>{const{title:title,xType:xType,xComponent:xComponent,value:value,dataSource:dataSource,onChange:onChange,xProps:xProps={}}=props,Cmp=otherComponentMap[xComponent]||basicComponentMap[xType];return react.createElement("div",null,react.createElement("div",null,title),react.createElement("div",null,react.createElement(Cmp,Object.assign({value:value,dataSource:dataSource,onChange:onChange},xProps))))},RelationView=context=>{const{value:value,next:next,status:status,depsValues:depsValues,moduleConfig:moduleConfig}=context;if(status===global.c.FirstRender)return"";const{linkedDataType:linkedDataType,measures:measures,fields:fields}=moduleConfig,[chooseTypeInfo,valueTypeInfo]=depsValues,chooseType=chooseTypeInfo.value,valueType=valueTypeInfo.value;if(linkedDataType===LinkedDataType.DimensionMember&&valueType===BaseLinkedDefaultValueTypeEnum.SelectAll||valueType===BaseLinkedDefaultValueTypeEnum.SelectFirst)return react.createElement(FromItem,{title:"111",value:value,onChange:value=>{},dataSource:fields,xType:"string",xComponent:"select"});if(valueType===MeasureDataDefaultValueTypeEnum.CustomIndicator)return react.createElement(es_select.a,{mode:chooseType===LinkedValueChooseType.Multiple?"multiple":"single",value:value,dataSource:measures});return[DimensionDataDefaultValueTypeEnum.Custom,OtherDefaultValueTypeEnum.LocalStorageInfo,OtherDefaultValueTypeEnum.UrlParams].includes(valueType)?react.createElement(input.a,null):react.createElement("div",null)},ValueReaction=context=>__awaiter(void 0,void 0,void 0,(function*(){const{value:value,updateState:updateState,moduleConfig:moduleConfig,lastDepsValue:lastDepsValue,depsValues:depsValues}=context,[type]=depsValues,[preType]=lastDepsValue,{hasDataSource:hasDataSource,linkedDataType:linkedDataType}=moduleConfig,newDataSource=value.dataSource.filter(item=>{const isBaseLinkedValueType=[BaseLinkedDefaultValueTypeEnum.SelectFirst,BaseLinkedDefaultValueTypeEnum.SelectAll].includes(item.value);return!(!hasDataSource&&isBaseLinkedValueType)}).filter(item=>(linkedDataType!==LinkedDataType.DimensionMember||item.value!==DimensionDataDefaultValueTypeEnum.Custom)&&(linkedDataType!==LinkedDataType.MeasureMember||item.value!=MeasureDataDefaultValueTypeEnum.CustomIndicator));updateState({value:type===preType?value.value:BaseLinkedDefaultValueTypeEnum.None,dataSource:newDataSource})}));var selector=props=>{const{chooseType:chooseType,hasDataSource:hasDataSource,linkedDataType:linkedDataType,measures:measures,fields:fields}=props,showChooseType=chooseType!==ChooseValueType.OnlyChooseDefaultValue;return react.createElement(RdxContext.a,null,showChooseType&&react.createElement(Row,null,react.createElement(Col,null,react.createElement(View.a,{render:TypeView,defaultValue:{value:LinkedValueChooseType.Single,dataSource:LinkedValueChooseData},id:StateEnum.chooseType}))),react.createElement(Row,null,react.createElement(Col,null,react.createElement(View.a,{render:TypeView,deps:[{id:StateEnum.chooseType}],moduleConfig:{linkedDataType:linkedDataType,hasDataSource:hasDataSource,measures:measures,fields:fields},reaction:ValueReaction,defaultValue:{value:BaseLinkedDefaultValueTypeEnum.None,dataSource:defaultValueTypes},id:StateEnum.valueType}))),react.createElement(Row,null,react.createElement(Col,null,react.createElement(View.a,{render:RelationView,deps:[{id:StateEnum.chooseType},{id:StateEnum.valueType}],moduleConfig:{linkedDataType:linkedDataType,hasDataSource:hasDataSource,measures:measures,fields:fields},id:StateEnum.relationValue}))),react.createElement(visualState,null),react.createElement(EchartsGraph.a,null))},addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple2.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = addSourceDecorator(() => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}}},\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":25},"endLoc":{"col":139,"line":27},"startBody":{"col":22,"line":25},"endBody":{"col":139,"line":27}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\nexport const sample = addSourceDecorator(addSourceDecorator(() => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|默认值配置\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple2.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = addSourceDecorator(() => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}}},\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":25},"endLoc":{"col":139,"line":27},"startBody":{"col":22,"line":25},"endBody":{"col":139,"line":27}}}},"storySource":{"source":"import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}}},\n    info: { inline: true },\n  },\n};\n',__ADDS_MAP__={"基本示例-默认值配置--sample":{startLoc:{col:22,line:47},endLoc:{col:277,line:49},startBody:{col:22,line:47},endBody:{col:277,line:49}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__STORY__='\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\nexport const sample = addSourceDecorator(() => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|默认值配置\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}}},\n    info: { inline: true },\n  },\n};\n',__ADDS_MAP__={"基本示例-默认值配置--sample":{startLoc:{col:22,line:25},endLoc:{col:139,line:27},startBody:{col:22,line:25},endBody:{col:139,line:27}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(16).withSource;const sample=(addSourceDecorator=__webpack_require__(16).addSource)(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(selector,{fields:[],chooseType:ChooseValueType.Value,hasDataSource:!0,measures:[],linkedDataType:LinkedDataType.DimensionMember}),{__STORY__:__STORY__="import React from 'react';\nimport Selector, { ChooseValueType, LinkedDataType } from './selector'\nexport const sample = () => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n};\n\nexport default {\n  title: '基本示例|默认值配置',\n  parameters: {\n    info: { inline: true },\n  },\n};\n",__ADDS_MAP__:__ADDS_MAP__={"基本示例-默认值配置--sample":{startLoc:{col:22,line:3},endLoc:{col:1,line:5},startBody:{col:22,line:3},endBody:{col:1,line:5}}},__MAIN_FILE_LOCATION__:"/simple2.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple2.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple2.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});__webpack_exports__.default={title:"基本示例|默认值配置",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple2.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = addSourceDecorator(() => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}}},\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":25},"endLoc":{"col":139,"line":27},"startBody":{"col":22,"line":25},"endBody":{"col":139,"line":27}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\nexport const sample = addSourceDecorator(addSourceDecorator(() => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|默认值配置\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/simple2.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = addSourceDecorator(() => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\\\nexport const sample = () => {\\\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\\\n};\\\\n\\\\nexport default {\\\\n  title: \'基本示例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-默认值配置--sample\\":{\\"startLoc\\":{\\"col\\":22,\\"line\\":3},\\"endLoc\\":{\\"col\\":1,\\"line\\":5},\\"startBody\\":{\\"col\\":22,\\"line\\":3},\\"endBody\\":{\\"col\\":1,\\"line\\":5}}}},\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":25},"endLoc":{"col":139,"line":27},"startBody":{"col":22,"line":25},"endBody":{"col":139,"line":27}}}},"storySource":{"source":"import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}}},\n    info: { inline: true },\n  },\n};\n',locationsMap:{"基本示例-默认值配置--sample":{startLoc:{col:22,line:47},endLoc:{col:277,line:49},startBody:{col:22,line:47},endBody:{col:277,line:49}}}},storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/basicDemos";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/simple2.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\nexport const sample = addSourceDecorator(() => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\nexport default {\n  title: \'基本示例|默认值配置\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport Selector, { ChooseValueType, LinkedDataType } from \'./selector\'\\nexport const sample = () => {\\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\\n};\\n\\nexport default {\\n  title: \'基本示例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n","locationsMap":{"基本示例-默认值配置--sample":{"startLoc":{"col":22,"line":3},"endLoc":{"col":1,"line":5},"startBody":{"col":22,"line":3},"endBody":{"col":1,"line":5}}}},\n    info: { inline: true },\n  },\n};\n',locationsMap:{"基本示例-默认值配置--sample":{startLoc:{col:22,line:25},endLoc:{col:139,line:27},startBody:{col:22,line:25},endBody:{col:139,line:27}}}},storySource:{source:"import React from 'react';\nimport Selector, { ChooseValueType, LinkedDataType } from './selector'\nexport const sample = () => {\n  return <Selector fields={[]} chooseType={ChooseValueType.Value} hasDataSource={true} measures={[]} linkedDataType={LinkedDataType.DimensionMember} />\n};\n\nexport default {\n  title: '基本示例|默认值配置',\n  parameters: {\n    info: { inline: true },\n  },\n};\n",locationsMap:{"基本示例-默认值配置--sample":{startLoc:{col:22,line:3},endLoc:{col:1,line:5},startBody:{col:22,line:3},endBody:{col:1,line:5}}}},info:{inline:!0}}}},2193:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"总价计算",(function(){return 总价计算}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),shareContext=__webpack_require__(86),global=__webpack_require__(33),useTaskHooks=__webpack_require__(133);let reactionId=0;var RdxContext=__webpack_require__(104),View=__webpack_require__(38),EchartsGraph=__webpack_require__(358),number_picker=__webpack_require__(273),addSourceDecorator=(__webpack_require__(16).withSource,__webpack_require__(16).addSource),__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport {\\\\n  RdxContext,\\\\n  RdxView,\\\\n  useRdxReaction,\\\\n  useRdxState,\\\\n  DataContext,\\\\n  ReactionContext,\\\\n  Status,\\\\n} from '@czwcode/rdx';\\\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\\\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\\\\nimport { useRef } from 'react';\\\\n\\\\nconst View = (context: DataContext<number, any, any>) => {\\\\n  const { value, next } = context;\\\\n  return <NumberPicker value={value} onChange={next} />;\\\\n};\\\\nconst TotalView = (context: DataContext<number, any, any>) => {\\\\n  const [_] = useRdxReaction({\\\\n    deps: [{ id: '单价' }, { id: '数量' }],\\\\n  });\\\\n  const { depsValues } = context;\\\\n  const [unit = 0, amount = 0] = depsValues;\\\\n  console.log('----' + 'total render');\\\\n  return <span>{unit * amount}</span>;\\\\n};\\\\nconst BaseView = ({ id }) => {\\\\n  const [state, setState] = useRdxState({\\\\n    id: id,\\\\n    defaultValue: 0,\\\\n  });\\\\n  console.log(id + '----' + 'render');\\\\n  return <NumberPicker value={state} onChange={setState} />;\\\\n};\\\\n\\\\nexport const 总价计算 = () => {\\\\n  return (\\\\n    <RdxContext>\\\\n      <strong style={{ fontSize: 16 }}>\\\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\\\n        和 reaction函数中获取到依赖的数据\\\\n      </strong>\\\\n      <br />\\\\n      <strong>单价:</strong>\\\\n      <BaseView id={'单价'} />\\\\n      <strong>数量:</strong>\\\\n      <BaseView id={'数量'} />\\\\n      <strong>总价:</strong>\\\\n      <RdxView\\\\n        recordStatus={false}\\\\n        id={'总价'}\\\\n        deps={[{ id: '单价' }, { id: '数量' }]}\\\\n        render={TotalView}\\\\n      ></RdxView>\\\\n      <DevVisualGraphTool />\\\\n    </RdxContext>\\\\n  );\\\\n};\\\\n\\\\n// export default {\\\\n//   title: '基本示例|hooks简单用法',\\\\n//   parameters: {\\\\n//     info: { inline: true },\\\\n//   },\\\\n// };\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/simple.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  useRdxReaction,\\n  useRdxState,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\\nimport { useRef } from 'react';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const [_] = useRdxReaction({\\n    deps: [{ id: '单价' }, { id: '数量' }],\\n  });\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  console.log('----' + 'total render');\\n  return <span>{unit * amount}</span>;\\n};\\nconst BaseView = ({ id }) => {\\n  const [state, setState] = useRdxState({\\n    id: id,\\n    defaultValue: 0,\\n  });\\n  console.log(id + '----' + 'render');\\n  return <NumberPicker value={state} onChange={setState} />;\\n};\\n\\nexport const 总价计算 = addSourceDecorator(() => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <BaseView id={'单价'} />\\n      <strong>数量:</strong>\\n      <BaseView id={'数量'} />\\n      <strong>总价:</strong>\\n      <RdxView\\n        recordStatus={false}\\n        id={'总价'}\\n        deps={[{ id: '单价' }, { id: '数量' }]}\\n        render={TotalView}\\n      ></RdxView>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export default {\\n//   title: '基本示例|hooks简单用法',\\n//   parameters: {\\n//     info: { inline: true },\\n//   },\\n// };\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/simple.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  useRdxReaction,\\n  useRdxState,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\\nimport { useRef } from 'react';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const [_] = useRdxReaction({\\n    deps: [{ id: '单价' }, { id: '数量' }],\\n  });\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  console.log('----' + 'total render');\\n  return <span>{unit * amount}</span>;\\n};\\nconst BaseView = ({ id }) => {\\n  const [state, setState] = useRdxState({\\n    id: id,\\n    defaultValue: 0,\\n  });\\n  console.log(id + '----' + 'render');\\n  return <NumberPicker value={state} onChange={setState} />;\\n};\\n\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <BaseView id={'单价'} />\\n      <strong>数量:</strong>\\n      <BaseView id={'数量'} />\\n      <strong>总价:</strong>\\n      <RdxView\\n        recordStatus={false}\\n        id={'总价'}\\n        deps={[{ id: '单价' }, { id: '数量' }]}\\n        render={TotalView}\\n      ></RdxView>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\n// export default {\\n//   title: '基本示例|hooks简单用法',\\n//   parameters: {\\n//     info: { inline: true },\\n//   },\\n// };\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/simple.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  useRdxReaction,\n  useRdxState,\n  DataContext,\n  ReactionContext,\n  Status,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\nimport { useRef } from 'react';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const [_] = useRdxReaction({\n    deps: [{ id: '单价' }, { id: '数量' }],\n  });\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  console.log('----' + 'total render');\n  return <span>{unit * amount}</span>;\n};\nconst BaseView = ({ id }) => {\n  const [state, setState] = useRdxState({\n    id: id,\n    defaultValue: 0,\n  });\n  console.log(id + '----' + 'render');\n  return <NumberPicker value={state} onChange={setState} />;\n};\n\nexport const 总价计算 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <BaseView id={'单价'} />\n      <strong>数量:</strong>\n      <BaseView id={'数量'} />\n      <strong>总价:</strong>\n      <RdxView\n        recordStatus={false}\n        id={'总价'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export default {\n//   title: '基本示例|hooks简单用法',\n//   parameters: {\n//     info: { inline: true },\n//   },\n// };\n",__ADDS_MAP__={},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource,__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos",__STORY__="\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxContext,\\n  RdxView,\\n  useRdxReaction,\\n  useRdxState,\\n  DataContext,\\n  ReactionContext,\\n  Status,\\n} from '@czwcode/rdx';\\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\\nimport { useRef } from 'react';\\n\\nconst View = (context: DataContext<number, any, any>) => {\\n  const { value, next } = context;\\n  return <NumberPicker value={value} onChange={next} />;\\n};\\nconst TotalView = (context: DataContext<number, any, any>) => {\\n  const [_] = useRdxReaction({\\n    deps: [{ id: '单价' }, { id: '数量' }],\\n  });\\n  const { depsValues } = context;\\n  const [unit = 0, amount = 0] = depsValues;\\n  console.log('----' + 'total render');\\n  return <span>{unit * amount}</span>;\\n};\\nconst BaseView = ({ id }) => {\\n  const [state, setState] = useRdxState({\\n    id: id,\\n    defaultValue: 0,\\n  });\\n  console.log(id + '----' + 'render');\\n  return <NumberPicker value={state} onChange={setState} />;\\n};\\n\\nexport const 总价计算 = () => {\\n  return (\\n    <RdxContext>\\n      <strong style={{ fontSize: 16 }}>\\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\\n        和 reaction函数中获取到依赖的数据\\n      </strong>\\n      <br />\\n      <strong>单价:</strong>\\n      <BaseView id={'单价'} />\\n      <strong>数量:</strong>\\n      <BaseView id={'数量'} />\\n      <strong>总价:</strong>\\n      <RdxView\\n        recordStatus={false}\\n        id={'总价'}\\n        deps={[{ id: '单价' }, { id: '数量' }]}\\n        render={TotalView}\\n      ></RdxView>\\n      <DevVisualGraphTool />\\n    </RdxContext>\\n  );\\n};\\n\\n// export default {\\n//   title: '基本示例|hooks简单用法',\\n//   parameters: {\\n//     info: { inline: true },\\n//   },\\n// };\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/simple.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  useRdxReaction,\n  useRdxState,\n  DataContext,\n  ReactionContext,\n  Status,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\nimport { useRef } from 'react';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const [_] = useRdxReaction({\n    deps: [{ id: '单价' }, { id: '数量' }],\n  });\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  console.log('----' + 'total render');\n  return <span>{unit * amount}</span>;\n};\nconst BaseView = ({ id }) => {\n  const [state, setState] = useRdxState({\n    id: id,\n    defaultValue: 0,\n  });\n  console.log(id + '----' + 'render');\n  return <NumberPicker value={state} onChange={setState} />;\n};\n\nexport const 总价计算 = addSourceDecorator(() => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <BaseView id={'单价'} />\n      <strong>数量:</strong>\n      <BaseView id={'数量'} />\n      <strong>总价:</strong>\n      <RdxView\n        recordStatus={false}\n        id={'总价'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export default {\n//   title: '基本示例|hooks简单用法',\n//   parameters: {\n//     info: { inline: true },\n//   },\n// };\n",__ADDS_MAP__={},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},__webpack_require__(16).withSource,addSourceDecorator=__webpack_require__(16).addSource;const TotalView=context=>{const[_]=function useRdxReaction(props){const uniqueId=Object(react.useRef)("reaction-"+reactionId++),context=Object(react.useContext)(shareContext.c),{deps:deps,reaction:reaction,recordStatus:recordStatus,reactionType:reactionType}=props;return Object(react.useEffect)(()=>{context.addOrUpdateTask(uniqueId.current,{id:uniqueId.current,deps:deps,reaction:reaction,recordStatus:recordStatus,reactionType:reactionType},{notifyTask:!1,notifyView:!0})}),[context.taskStatus.get(uniqueId.current)]}({deps:[{id:"单价"},{id:"数量"}]}),{depsValues:depsValues}=context,[unit=0,amount=0]=depsValues;return console.log("----total render"),react_default.a.createElement("span",null,unit*amount)},BaseView=({id:id})=>{const[state,setState]=function useRdxState(props){const context=Object(react.useContext)(shareContext.c),{id:id,defaultValue:defaultValue,reducer:reducer}=props;return Object(useTaskHooks.c)({context:context,id:id,defaultValue:defaultValue,reducer:reducer}),Object(useTaskHooks.d)({context:context,id:id,defaultValue:defaultValue,reducer:reducer}),Object(useTaskHooks.b)(id,context,global.b.State),[context.taskState.get(id),state=>{let newState=state;"function"==typeof state&&(newState=state(context.getTaskState(id,void 0))),context.next(id,newState)},action=>{context.dispatchAction(id,action)}]}({id:id,defaultValue:0});return console.log(id+"----render"),react_default.a.createElement(number_picker.a,{value:state,onChange:setState})},总价计算=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxContext.a,null,react_default.a.createElement("strong",{style:{fontSize:16}},"展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view 和 reaction函数中获取到依赖的数据"),react_default.a.createElement("br",null),react_default.a.createElement("strong",null,"单价:"),react_default.a.createElement(BaseView,{id:"单价"}),react_default.a.createElement("strong",null,"数量:"),react_default.a.createElement(BaseView,{id:"数量"}),react_default.a.createElement("strong",null,"总价:"),react_default.a.createElement(View.a,{recordStatus:!1,id:"总价",deps:[{id:"单价"},{id:"数量"}],render:TotalView}),react_default.a.createElement(EchartsGraph.a,null)),{__STORY__:__STORY__="import React from 'react';\nimport {\n  RdxContext,\n  RdxView,\n  useRdxReaction,\n  useRdxState,\n  DataContext,\n  ReactionContext,\n  Status,\n} from '@czwcode/rdx';\nimport { DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport { Input, NumberPicker, Dialog, Notification, Button } from '@alifd/next';\nimport { useRef } from 'react';\n\nconst View = (context: DataContext<number, any, any>) => {\n  const { value, next } = context;\n  return <NumberPicker value={value} onChange={next} />;\n};\nconst TotalView = (context: DataContext<number, any, any>) => {\n  const [_] = useRdxReaction({\n    deps: [{ id: '单价' }, { id: '数量' }],\n  });\n  const { depsValues } = context;\n  const [unit = 0, amount = 0] = depsValues;\n  console.log('----' + 'total render');\n  return <span>{unit * amount}</span>;\n};\nconst BaseView = ({ id }) => {\n  const [state, setState] = useRdxState({\n    id: id,\n    defaultValue: 0,\n  });\n  console.log(id + '----' + 'render');\n  return <NumberPicker value={state} onChange={setState} />;\n};\n\nexport const 总价计算 = () => {\n  return (\n    <RdxContext>\n      <strong style={{ fontSize: 16 }}>\n        展示了rdx框架的基本用法，申明式的指定当前模块的id，和依赖模块的id，并且可以从view\n        和 reaction函数中获取到依赖的数据\n      </strong>\n      <br />\n      <strong>单价:</strong>\n      <BaseView id={'单价'} />\n      <strong>数量:</strong>\n      <BaseView id={'数量'} />\n      <strong>总价:</strong>\n      <RdxView\n        recordStatus={false}\n        id={'总价'}\n        deps={[{ id: '单价' }, { id: '数量' }]}\n        render={TotalView}\n      ></RdxView>\n      <DevVisualGraphTool />\n    </RdxContext>\n  );\n};\n\n// export default {\n//   title: '基本示例|hooks简单用法',\n//   parameters: {\n//     info: { inline: true },\n//   },\n// };\n",__ADDS_MAP__:__ADDS_MAP__={},__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__={},__SOURCE_PREFIX__:__SOURCE_PREFIX__="/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-demo/stories/hooks/basicDemos",__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__={}}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/simple.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},226:function(module,__webpack_exports__,__webpack_require__){"use strict";var ReactionType,TASK_PROCESS_TYPE,TaskEventType;__webpack_require__.d(__webpack_exports__,"a",(function(){return ReactionType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return TaskEventType})),function(ReactionType){ReactionType[ReactionType.Sync=1]="Sync",ReactionType[ReactionType.Async=2]="Async"}(ReactionType||(ReactionType={})),function(TASK_PROCESS_TYPE){TASK_PROCESS_TYPE[TASK_PROCESS_TYPE.UPDATE_RUNNING_GRAPH=1]="UPDATE_RUNNING_GRAPH",TASK_PROCESS_TYPE[TASK_PROCESS_TYPE.STATUS_CHANGE=2]="STATUS_CHANGE"}(TASK_PROCESS_TYPE||(TASK_PROCESS_TYPE={})),function(TaskEventType){TaskEventType.ProcessRunningGraph="ProcessRunningGraph",TaskEventType.TaskChange="TaskChange",TaskEventType.Init="Init",TaskEventType.RdxContextInit="RdxContextInit",TaskEventType.EventTrigger="EventTrigger",TaskEventType.BatchEventTrigger="BatchEventTrigger",TaskEventType.StatusChange="StatusChange",TaskEventType.StateChange="StateChange"}(TaskEventType||(TaskEventType={}))},28:function(module,__webpack_exports__,__webpack_require__){"use strict";var PROCESS_GRAPH_TYPE,ActionType,TargetType;__webpack_require__.d(__webpack_exports__,"a",(function(){return ActionType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return TargetType})),function(PROCESS_GRAPH_TYPE){PROCESS_GRAPH_TYPE.INIT="INIT",PROCESS_GRAPH_TYPE.TASK_CHANGE="TASK_CHANGE"}(PROCESS_GRAPH_TYPE||(PROCESS_GRAPH_TYPE={})),function(ActionType){ActionType.Update="update",ActionType.Remove="remove",ActionType.Merge="merge"}(ActionType||(ActionType={})),function(TargetType){TargetType.TasksMap="tasksMap",TargetType.TaskState="taskState",TargetType.Trigger="trigger",TargetType.CustomAction="customAction",TargetType.TaskStatus="taskStatus",TargetType.CancelMap="cancelMap"}(TargetType||(TargetType={}))},33:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return RENDER_STATUS})),__webpack_require__.d(__webpack_exports__,"c",(function(){return Status})),__webpack_require__.d(__webpack_exports__,"b",(function(){return StateUpdateType}));var STATUS_TYPE,TASK_INIT_TYPE,RENDER_STATUS,_czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(116);!function(STATUS_TYPE){STATUS_TYPE.BEFORE_TASK_EXECUTE="1",STATUS_TYPE.BEFORE_TASK_GROUP_EXECUTE="2"}(STATUS_TYPE||(STATUS_TYPE={})),function(TASK_INIT_TYPE){TASK_INIT_TYPE.FROM_PROPS="1",TASK_INIT_TYPE.FROM_CHILDREN="2"}(TASK_INIT_TYPE||(TASK_INIT_TYPE={})),function(RENDER_STATUS){RENDER_STATUS.FirstRender="FIRST_RENDER"}(RENDER_STATUS||(RENDER_STATUS={}));const Status=Object.assign(Object.assign({},_czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a),RENDER_STATUS);var StateUpdateType;!function(StateUpdateType){StateUpdateType.ReactionStatus="ReactionStatus",StateUpdateType.State="State"}(StateUpdateType||(StateUpdateType={}))},358:function(module,__webpack_exports__,__webpack_require__){"use strict";var react=__webpack_require__(1),react_default=__webpack_require__.n(react),es=__webpack_require__(504),global=(__webpack_require__(2172),__webpack_require__(226)),typings_global=__webpack_require__(116);const baseTabItemStyle={background:"#eee",border:"none",cursor:"pointer",padding:"14px 16px",fontSize:17,color:"rgb(170,170,170)"},activeStyle={background:"rgb(33, 150, 243)",color:"white"};var graph_Tab=props=>{const{onChange:onChange,defaultActive:defaultActive,dataSource:dataSource,children:children}=props,[realActive,setRealActive]=react.useState(defaultActive);return react.createElement("div",{style:{width:"100%",overflowX:"hidden"}},react.createElement("div",{style:{display:"flex",justifyContent:"center"}},dataSource.map(row=>{const isActive=row.value===realActive;return react.createElement("button",{style:Object.assign(Object.assign({},baseTabItemStyle),isActive?activeStyle:{}),onClick:()=>{onChange(),setRealActive(row.value)}},row.label)})),react.createElement("div",{style:{display:"flex",justifyContent:"center"}},dataSource.map(item=>{const isActive=item.value===realActive;return react.createElement("div",null,children&&isActive&&children(item.value,item))})))};const NewSlider=Object(es.a)(es.b);var DISPLAY_STATE;!function(DISPLAY_STATE){DISPLAY_STATE.CANCEL="CANCEL",DISPLAY_STATE.CONFLICT="CONFLICT"}(DISPLAY_STATE||(DISPLAY_STATE={}));const stateColors={[typings_global.a.Error]:"red",[typings_global.a.Waiting]:"rgb(230,189,45)",[typings_global.a.Finish]:"grey",[typings_global.a.IDeal]:"grey",[DISPLAY_STATE.CANCEL]:"pink",[DISPLAY_STATE.CONFLICT]:"purple",init:"rgb(165, 189,249)"};typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,DISPLAY_STATE.CANCEL,DISPLAY_STATE.CONFLICT;var GraphType;!function(GraphType){GraphType.Global="Global",GraphType.PreRunning="PreRunning",GraphType.Trigger="Trigger",GraphType.EffectPoints="EffectPoints",GraphType.ConflictPoints="ConflictPoints",GraphType.AllPointsNow="AllPointsNow",GraphType.RunnningPointsNotCut="RunnningPointsNotCut",GraphType.BuildDAG="BuildDAG",GraphType.RunnningPointsCut="RunnningPointsCut"}(GraphType||(GraphType={}));class Graph_Graph extends react.Component{constructor(props){super(props),this.snapShots=[],this.state={version:0,visible:!1,statusVersion:0}}getDefaultSnapShot(eventType){return{type:eventType,graph:[],preRunningPoints:[],triggerPoints:[],effectPoints:[],conflictPoints:[],currentAllPoints:[],edgeCutFlow:[],currentRunningPoints:[],status:[]}}initSnapShot(type){this.temporarySnapShots&&this.snapShots.push(this.temporarySnapShots),this.temporarySnapShots=Object.assign({},this.getDefaultSnapShot(type))}componentDidMount(){this.props.context.subject.on(global.b.Init,process=>{this.initSnapShot(global.b.Init)}),this.props.context.subject.on(global.b.EventTrigger,process=>{this.initSnapShot(global.b.EventTrigger)}),this.props.context.subject.on(global.b.BatchEventTrigger,process=>{this.initSnapShot(global.b.BatchEventTrigger)}),this.props.context.subject.on(global.b.TaskChange,process=>{this.initSnapShot(global.b.TaskChange)}),this.props.context.subject.on(global.b.ProcessRunningGraph,process=>{this.temporarySnapShots=Object.assign(Object.assign({},this.temporarySnapShots),process);const{currentRunningPoints:currentRunningPoints}=process;0===currentRunningPoints.length&&this.setState({version:this.snapShots.length,statusVersion:0})}),this.props.context.subject.on(global.b.StatusChange,process=>{this.temporarySnapShots.status.push(process);const currentVersion=this.snapShots.length;this.setState({version:currentVersion,statusVersion:0}),this.initRunningDeliverGraph(this.getSnapShot(currentVersion))})}getSnapShot(version){return version===this.snapShots.length?this.temporarySnapShots||this.getDefaultSnapShot(""):this.snapShots[version]||this.getDefaultSnapShot("")}componentWillUnmount(){const ee=this.props.context.subject;ee.removeAllListeners(global.b.Init),ee.removeAllListeners(global.b.EventTrigger),ee.removeAllListeners(global.b.ProcessRunningGraph),ee.removeAllListeners(global.b.StatusChange),ee.removeAllListeners(global.b.TaskChange)}resetStatus(version,statusVersion){const current=this.getSnapShot(version);this.initRunningDeliverGraph(current)}getMarks(){let marks={};for(let index=0;index<this.snapShots.length+1;index++){const type=`(${this.getSnapShot(index).type})`;this.snapShots.length===index?marks[index]="最新版本"+type:marks[index]=`v-${index}${type}`}return marks}getStatusMarks(){let marks={};for(let index=0;index<this.getSnapShot(this.state.version).status.length+1;index++)this.getSnapShot(this.state.version).status.length===index?marks[index]="最新状态":marks[index]="s-"+index;return marks}render(){const tabs=[{label:"全局关系图",value:GraphType.Global},{label:"新的节点构建过程",value:"ProcessPoint",children:[{label:"运行时图(旧)",value:GraphType.PreRunning},{label:"触发节点",value:GraphType.Trigger},{label:"触发新的点",value:GraphType.EffectPoints},{label:"冲突的点",value:GraphType.ConflictPoints}]},{label:"边的构建过程",value:"ProcessEdges",children:[{label:"运行图(去边前依赖关系)",value:GraphType.RunnningPointsNotCut},{label:"构建DAG",value:GraphType.BuildDAG}]},{label:"运行时图",value:GraphType.RunnningPointsCut}];return react.createElement("div",null,react.createElement("div",{style:{display:"inline-block",textDecoration:"none",background:"#87befd",color:"#FFF",width:"120px",position:"fixed",top:50,right:30,height:"120px",lineHeight:"120px",borderRadius:"50%",textAlign:"center",cursor:"pointer",verticalAlign:"middle",overflow:"hidden",transition:".4s"},onClick:()=>{this.setState({visible:!this.state.visible})}},"查看链路"),this.state.visible&&react.createElement("div",{style:{position:"fixed",bottom:0,zIndex:1e3,height:"50%",width:"100%",right:0,display:"flex",padding:"24px 12px 40px 12px",borderRadius:10,background:"white",boxShadow:"rgba(0,0,0,0.10) 0 1px 3px 0",border:"1px solid rgba(0,0,0,.1)",overflow:"auto",whiteSpace:"nowrap"}},react.createElement("div",{style:{width:"100%",display:"flex",alignItems:"center",flexDirection:"column"}},react.createElement("div",{style:{width:"100%"}},react.createElement(NewSlider,{min:0,max:this.snapShots.length,value:this.state.version,dots:!0,marks:this.getMarks(),onChange:value=>{this.setState({version:value},()=>{this.resetStatus(value,0)})},tipFormatter:value=>"版本V"+value})),react.createElement("div",{style:{marginTop:30,width:"100%"}},"状态选则"," ",react.createElement(NewSlider,{min:0,max:this.getSnapShot(this.state.version).status.length,value:this.state.statusVersion,dots:!0,marks:this.getStatusMarks(),onChange:value=>{this.setState({statusVersion:value},()=>{this.resetStatus(this.state.version,value)})},tipFormatter:value=>"状态V-"+value})),react.createElement("div",{style:{marginTop:30}},react.createElement(graph_Tab,{onChange:()=>{setTimeout(()=>{this.initRunningDeliverGraph(this.getSnapShot(this.state.version))},500)},defaultActive:GraphType.RunnningPointsCut,dataSource:tabs},(key,row)=>react.createElement("div",{style:{display:"flex",width:"100%"}},row.children?row.children.map(item=>react.createElement("div",null,react.createElement("strong",null,item.label),react.createElement("div",{ref:g=>{this[item.value]=g},style:{width:100/row.children.length+"vw",height:200,border:"2px dashed lightgrey"}}))):react.createElement("div",{ref:g=>{this[key]=g},style:{width:500,height:200,border:"2px dashed lightgrey"}})))))))}}var echarts=__webpack_require__(923),echarts_default=__webpack_require__.n(echarts),shareContext=__webpack_require__(86),utils=__webpack_require__(117),src_utils=__webpack_require__(115);__webpack_exports__.a=()=>react_default.a.createElement(shareContext.b,null,context=>react_default.a.createElement(EchartsGraph_ChartsRenderer,{context:context}));class EchartsGraph_ChartsRenderer extends Graph_Graph{getRef(type){return this[type]}drawGraphCommon(type,points){!function drawGraph(ref,data,edges=[]){if(ref){const echartsInstance=echarts_default.a.init(ref);echartsInstance.resize(),echartsInstance.setOption({series:[{type:"graph",roam:!0,layout:"force",animation:!1,edgeSymbol:["circle","arrow"],symbolSize:50,edgeSymbolSize:[4,10],data:data,force:{initLayout:"circular",repulsion:100,edgeLength:100},links:edges}]})}}(this.getRef(type),points.map(item=>({id:item.key,name:item.key,itemStyle:{color:stateColors[item.status]||stateColors[typings_global.a.IDeal]},label:{formatter:params=>{const name=params.name;return name.length>10?name.slice(0,10)+"...":name},show:!0}})),Object(utils.d)(points).reduce((arr,item)=>arr.concat((item.deps||[]).map(dep=>{const label=dep.label;return{source:dep.id,target:item.id,label:{formatter:()=>label,show:label},lineStyle:{color:label&&"red",type:label?"dashed":"solid",curveness:.2}}})),[]))}drawGlobal(info){const{graph:graph}=info;this.drawGraphCommon(GraphType.Global,graph)}drawPreRunning(info){const{preRunningPoints:preRunningPoints}=info;this.drawGraphCommon(GraphType.PreRunning,preRunningPoints)}drawRunning(info){const{currentRunningPoints:currentRunningPoints,status:status}=info,statusMap=Object(src_utils.a)(status.slice(0,this.state.statusVersion),item=>item.id);this.drawGraphCommon(GraphType.RunnningPointsCut,currentRunningPoints.map(item=>Object.assign(Object.assign({},item),{status:statusMap.has(item.key)&&stateColors[statusMap.get(item.key).status]?stateColors[statusMap.get(item.key).status]:typings_global.a.Waiting})))}drawTriggerPoints(info){const{triggerPoints:triggerPoints}=info;this.drawGraphCommon(GraphType.Trigger,triggerPoints)}drawRunnningPointsNotCut(info){const{currentAllPoints:currentAllPoints}=info;this.drawGraphCommon(GraphType.RunnningPointsNotCut,currentAllPoints)}drawEffectPoints(info){const{effectPoints:effectPoints}=info;this.drawGraphCommon(GraphType.EffectPoints,effectPoints.map(item=>({key:item,status:typings_global.a.IDeal})))}drawConflictPoints(info){const{conflictPoints:conflictPoints}=info;this.drawGraphCommon(GraphType.ConflictPoints,conflictPoints.map(item=>({key:item,status:DISPLAY_STATE.CONFLICT})))}drawBuildDAG(info){const{currentAllPoints:currentAllPoints,edgeCutFlow:edgeCutFlow}=info,edgeMap=Object(src_utils.a)(edgeCutFlow.reduce((arr,item)=>arr.concat(item.edges),[]),item=>`${item.source}---${item.target}`),points=currentAllPoints.map(point=>{const{key:key,deps:deps=[]}=point;return Object.assign(Object.assign({},point),{deps:deps.map(item=>{let normalizeItem="string"==typeof item?{id:item,weight:1}:item;const edgeInfo=edgeMap.get(`${normalizeItem.id}---${key}`)||{};return Object.assign(Object.assign({},normalizeItem),{label:edgeInfo.reasonType&&"原因："+edgeInfo.reasonType})})})});this.drawGraphCommon(GraphType.BuildDAG,points)}initRunningDeliverGraph(info){this.drawGlobal(info),this.drawPreRunning(info),this.drawRunning(info),this.drawTriggerPoints(info),this.drawEffectPoints(info),this.drawConflictPoints(info),this.drawRunnningPointsNotCut(info),this.drawBuildDAG(info)}}},38:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return useForceUpdate}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_global__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(116),_global__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(33),_RdxContext_shareContext__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(86),_RdxContext_interface__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(28),_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(133),_utils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(149),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function Module(props){const{id:id,scope:scope,defaultValue:defaultValue}=props;return Object(_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__.a)().current||void 0===defaultValue||void 0!==props.context.getTaskState(id,scope)||props.context.udpateState(id,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_4__.a.Update,_RdxContext_interface__WEBPACK_IMPORTED_MODULE_4__.b.TaskState,defaultValue),Object(_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__.c)(props),Object(_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__.d)(props),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(MomeAtomComponent,Object.assign({},props))}__webpack_exports__.a=props=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_RdxContext_shareContext__WEBPACK_IMPORTED_MODULE_3__.b,null,context=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Module,Object.assign({},props,{context:context})));const isLoading=props=>{var _a;return(null===(_a=props.context.taskStatus.get(props.id))||void 0===_a?void 0:_a.value)===_global__WEBPACK_IMPORTED_MODULE_1__.a.Waiting};function AtomComponent(props){const{id:id,context:context}=props,taskInfo=context.tasksMap.get(id),{render:render,moduleConfig:moduleConfig,deps:deps,component:component,scope:scope}=taskInfo||props;Object(_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__.b)(id,context,_global__WEBPACK_IMPORTED_MODULE_2__.b.State),Object(_hooks_useTaskHooks__WEBPACK_IMPORTED_MODULE_5__.b)(id,context,_global__WEBPACK_IMPORTED_MODULE_2__.b.ReactionStatus);const data=Object.assign(Object.assign({},Object(_utils__WEBPACK_IMPORTED_MODULE_6__.c)(id,context,props)),{next:(selfValue,options)=>{context.next(id,selfValue,options)},dispatchById:(id,action,options)=>{context.dispatchAction(id,action,options)},dispatch:(action,options)=>{context.dispatchAction(id,action,options)},refreshView:()=>{context.notifyModule(id)},nextById:(id,selfValue,options)=>{context.next(id,selfValue,options)},loading:isLoading(props),mergeScopeState2Global:()=>{context.mergeScopeState2Global(id)},value:context.taskState.get(id,scope),status:context.taskStatus.get(id)&&context.taskStatus.get(id).value?context.taskStatus.get(id).value:_global__WEBPACK_IMPORTED_MODULE_2__.a.FirstRender,errorMsg:(context.taskStatus.get(id)||{}).errorMsg,refresh:context.refresh.bind(null,id)}),Component=component;return component?react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Component,Object.assign({},data)):react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment,null,render?render(data):null)}class MomeAtomComponent extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component{shouldComponentUpdate(nextProps){return this.props.id!==nextProps.id}render(){const _a=this.props,{context:context}=_a,rest=__rest(_a,["context"]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(AtomComponent,Object.assign({context:context},rest))}}const useForceUpdate=()=>{const[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);return()=>{setState(state=>state+1)}}},86:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return shareContext_ShareContextClass})),__webpack_require__.d(__webpack_exports__,"e",(function(){return initValue})),__webpack_require__.d(__webpack_exports__,"c",(function(){return ShareContextInstance})),__webpack_require__.d(__webpack_exports__,"d",(function(){return ShareContextProvider})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ShareContextConsumer}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),global=__webpack_require__(116),src_global=__webpack_require__(33),core=__webpack_require__(148),RdxContext_interface=__webpack_require__(28),eventemitter3=__webpack_require__(342),eventemitter3_default=__webpack_require__.n(eventemitter3),utils=__webpack_require__(115),Graph=__webpack_require__(926),BaseGraph=__webpack_require__(919),src_utils=__webpack_require__(117);var typings_global=__webpack_require__(226);class ScheduledCore{constructor(dataSource){this.inDegree=new Map,this.deliverMap=new Map,this.taskQueue=[],this.update(dataSource)}update(dataSource){this.dataSource=dataSource,this.inDegree=this.createInDegree(),this.deliverMap=this.createDeliverMap()}createDeliverMap(){const deliversMap=new Map;for(const item of this.dataSource)for(const dep of item.deps||[]){const currentRelations=deliversMap.get(dep);currentRelations?currentRelations.push(item.id):deliversMap.set(dep,[item.id])}return deliversMap}createInDegree(){const m=new Map;return this.dataSource.forEach(row=>{const{id:id,deps:deps}=row;m.set(id,(deps||[]).length)}),m}stop(){this.taskQueue.forEach(task=>task.stop()),this.taskQueue=[]}canExecute(id){return 0===this.inDegree.get(id)}start(callback){const inDegreeZero=[];Array.from(this.inDegree.keys()).forEach(key=>{this.canExecute(key)&&inDegreeZero.push(key)}),this.batchExecute(inDegreeZero,callback)}batchExecute(ids,callback){ids.forEach(item=>{this.execute(item,callback)})}execute(id,callback){const task=new ScheduledTask(id,()=>{const deliverIds=this.deliverMap.get(id);deliverIds.forEach(deliverId=>{const currentInDegree=this.inDegree.get(deliverId);this.inDegree.set(deliverId,currentInDegree-1)});const willExcuteIds=deliverIds.filter(item=>this.canExecute(item));this.batchExecute(willExcuteIds,callback)},callback);this.taskQueue.push(task),task.execute()}}class ScheduledTask{constructor(id,next,callback){this.stopSingnal=!1,this.id=id,this.next=next,this.callback=callback}isStop(){return this.stopSingnal}stop(){this.stopSingnal=!0}execute(){this.callback(this.id,{next:()=>{this.isStop()||this.next()},scheduledTask:this})}}class PreDefinedTaskQueue_CommonQueue extends class DeliverByPreDefinedTask_DeliverByCallback extends class base_BaseQueue{constructor(config){this.config=[],this.configMap=new Map,this.running=!1,this.runningId="none",this.runtimeGraph=new Graph.a([]),this.updateTasks(config)}updateTasks(config){this.graph?this.graph.updateConfig(Object(src_utils.c)(config)):this.graph=new Graph.a(Object(src_utils.c)(config)),this.config=config.map(item=>Object.assign(Object.assign({},item),{scope:item.scope?item.scope:BaseGraph.a})),this.configMap=Object(utils.b)(config)}getFirstAllPoints(scope){const firstPoints=this.getFirstPoints(scope);return this.graph.getAllPointsByPoints(firstPoints.map(point=>({key:point,scope:scope})))}getFirstPoints(scope){const startPoints=[],config=this.graph.getConfigByScope(scope);if(0===config.length)return[];const{points:newPendingPoints}=Object(src_utils.b)(config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).map(k=>({id:k.id}))})),config[0].key,!1);for(const item of newPendingPoints){0===(item.deps||[]).length&&startPoints.push(item.key)}return startPoints}getAllPointFired(points){const newPoints=Object(utils.d)(points);return this.graph.getAllPointsByPoints(newPoints)}isRunning(){return this.graph.isRunning()}getIntersectPoints(downStreamPoints){const runningPoints=this.graph.getNotFinishPoints();return downStreamPoints.filter(p=>runningPoints.some(rp=>rp&&rp.key===p))}getNotFinishPoints(){return this.graph.getNotFinishPoints()}getPendingPoints(executeTasks){return this.graph.isRunning()?this.graph.getCurrentPoints(executeTasks):this.graph.getAllPointsByPoints(executeTasks)}beforeDeliver(executeTasks){const normalizeExecuteTasks=Object(utils.d)(executeTasks);let pendingPoints=this.getPendingPoints(normalizeExecuteTasks),downStreamPoints=this.graph.getAllPointsByPoints(normalizeExecuteTasks);const intersectPoints=this.getIntersectPoints(downStreamPoints),pendingConfig=this.config.filter(rowConfig=>pendingPoints.includes(rowConfig.key));return this.graph.udpateRunningGraph(Object(src_utils.c)(pendingConfig)),{downStreamPoints:downStreamPoints,intersectPoints:intersectPoints,pendingConfig:pendingConfig,pendingPoints:pendingPoints}}}{constructor(config,preCallback=(()=>{}),callback=(()=>{}),errorCallback=(()=>{}),processChange=(()=>{})){super(config),this.callback=callback,this.preCallback=preCallback,this.errorCallback=errorCallback,this.processChange=processChange}getTaskByPoints(p){const newPs=Object(utils.d)(p).map(currentP=>this.configMap.get(currentP));return this.cleanInVaildDeps(newPs)}cleanInVaildDeps(config){const configMap=Object(utils.a)(config,a=>a&&a.key);return config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>configMap.get(dep.id))}))}deliver(executeTasks){if(0===executeTasks.length)return;const notFinish=this.graph.getNotFinishPoints(),runningPointsMap=Object(utils.a)(notFinish,item=>item.key);let{intersectPoints:intersectPoints,pendingPoints:pendingPoints,downStreamPoints:downStreamPoints}=this.beforeDeliver(executeTasks);const triggerPoint=executeTasks[executeTasks.length-1];pendingPoints.includes(triggerPoint.key)||pendingPoints.push(triggerPoint.key);const{points:newPendingPoints,edgeCuts:edgeCuts}=Object(src_utils.b)(this.getTaskByPoints(pendingPoints),triggerPoint.key,triggerPoint.downStreamOnly);this.processChange(typings_global.b.ProcessRunningGraph,{graph:this.config,preRunningPoints:this.getTaskByPoints(notFinish.map(item=>item.key)).map(item=>Object.assign(Object.assign({},item),{status:runningPointsMap[item.key]})),triggerPoints:Object(src_utils.e)(executeTasks),effectPoints:downStreamPoints,conflictPoints:intersectPoints,currentAllPoints:this.getTaskByPoints(pendingPoints),edgeCutFlow:edgeCuts,currentRunningPoints:Object(src_utils.e)(newPendingPoints)});const endPoint={id:src_utils.a,deps:newPendingPoints.map(item=>item.key)};if(0===newPendingPoints.length)return;this.graph.setPending(newPendingPoints.map(item=>item.key));const runningPointsWithEndPoint=[endPoint,...newPendingPoints.map(item=>({id:item.key,deps:(item.deps||[]).map(dep=>dep.id)}))];this.scheduledCore||(this.scheduledCore=new ScheduledCore(runningPointsWithEndPoint)),this.scheduledCore.stop(),this.scheduledCore.update(runningPointsWithEndPoint),this.scheduledCore.start(this.callbackFunction.bind(this,new Graph.a(newPendingPoints)))}callbackFunction(runningGraph,currentKey,options){currentKey===src_utils.a?this.callback({isEnd:!0}):this.preCallback(currentKey);const{next:next,scheduledTask:scheduledTask}=options,curConfig=this.graph.configMap.get(currentKey),baseTaskInfo={key:currentKey,deps:(curConfig&&curConfig.deps||[]).map(item=>({id:item.id}))};if(null!==currentKey){const curConfig=this.graph.configMap.get(currentKey),onSuccessProcess=()=>{scheduledTask.isStop()||(this.graph.setFinish(currentKey),this.processChange(typings_global.b.StatusChange,{id:currentKey,status:global.a.Finish}),this.callback({currentKey:currentKey,isEnd:!1}),next())},onErrorProcess=error=>{if(!scheduledTask.isStop()){const relationPoints=runningGraph.getAllPointsByPoints({key:currentKey,downStreamOnly:!1}),runningPoints=this.getNotFinishPoints(),runningPointsMap=Object(utils.a)(runningPoints,a=>a.key),notFinishPoint=relationPoints.filter(item=>runningPointsMap.has(item));notFinishPoint.forEach(p=>{this.graph.setFinish(p)}),this.processChange(typings_global.b.StatusChange,{id:currentKey,status:global.a.Error}),this.errorCallback(currentKey,notFinishPoint,error?error.toString():"运行错误",{currentKey:currentKey,isEnd:!0}),console.error(`${currentKey}任务执行失败, depsKeys:${curConfig&&curConfig.deps} errorMsg: ${error&&error.stack&&error.stack.toString()}`)}};if(curConfig)if(curConfig.taskType===typings_global.a.Sync)try{curConfig.task(Object.assign(Object.assign({},baseTaskInfo),{isCancel:()=>scheduledTask.isStop(),next:next})),onSuccessProcess()}catch(error){onErrorProcess(error)}else curConfig.task(Object.assign(Object.assign({},baseTaskInfo),{isCancel:()=>scheduledTask.isStop(),next:next})).then(onSuccessProcess).catch(onErrorProcess)}}}{constructor(){super(...arguments),this.getTaskByPoint=points=>points.map(point=>{const t=this.getTaskByPoints(point.key);return{key:point.key,task:t[0].task,scope:point.scope}}),this.notifyDownstream=who=>{(who=Object(utils.d)(who)).every(w=>function isString(myVar){return"string"==typeof myVar||myVar instanceof String}(w.key))?this.deliver(who):console.warn("触发节点的格式必须为{ key: string, scope?: string }")}}getTaskByPointWithScope(points,scope){return points.map(point=>({key:point,task:this.getTaskByPoints(point)[0].task,scope:scope}))}initExecute(scope){const startPoints=this.getFirstPoints(scope);this.deliver(this.getTaskByPointWithScope(startPoints,scope))}}var react_dom=__webpack_require__(12),react_dom_default=__webpack_require__.n(react_dom),rdx_src_utils=__webpack_require__(149);class shareContext_ShareContextClass{constructor(config){this.queue=new Set,this.uiQueue=new Set,this.triggerQueue=new Set,this.dirtySets=new Set,this.onPropsChange=()=>{},this.onPropsStateChange=()=>{},this.onChange=callbackInfo=>{const{currentKey:key}=callbackInfo;if(callbackInfo.isEnd){const all=this.taskState.getAll();this.cancelMap.removeAll(),all&&this.onPropsChange(all,this.taskState),this.dirtySets.clear()}if(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.IDeal}),key){this.preTaskState=this.taskState.clone();const{deps:deps=[]}=this.getTaskMap(key);this.dirtySets.has(key)||deps.some(dep=>this.dirtySets.has(dep.id))?this.notifyModule(key):console.warn(`id为${key}的模块，在触发时未通过updateState执行任何数据变更`)}key&&this.cancelMap.remove(key)},this.refresh=(key,value)=>{const{scope:scope}=this.getTaskMap(key);value&&(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value),this.notifyModule(key,!0)),this.executeTask({key:key,scope:scope,downStreamOnly:!1})},window.store=this,this.eventEmitter=new eventemitter3_default.a,this.name=config.name,this.subject=new eventemitter3_default.a,this.taskScheduler=new PreDefinedTaskQueue_CommonQueue([],this.preChange.bind(this),this.onChange,this.onError.bind(this),(type,content)=>{if(this.subject.emit(type,content),type===typings_global.b.ProcessRunningGraph){const{currentRunningPoints:currentRunningPoints,triggerPoints:triggerPoints,conflictPoints:conflictPoints}=content;conflictPoints.forEach(id=>{this.isRecordStatus(id)&&(this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.IDeal,errorMsg:void 0}),this.notifyModule(id))}),currentRunningPoints.forEach(item=>{const{key:id}=item;if(this.isRecordStatus(id)){const status=this.getTaskStatus(id);this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Waiting,errorMsg:void 0}),status&&status.value===global.a.Waiting||this.notifyModule(id)}})}}),this.tasksMap=config.tasksMap,this.taskState=config.taskState,this.taskStatus=config.taskStatus,this.cancelMap=config.cancelMap}initSchedule(){this.taskScheduler.updateTasks(this.getTask());const firstPoints=this.taskScheduler.getFirstAllPoints();this.subject.emit(typings_global.b.Init),firstPoints.length>0&&this.executeTask(firstPoints.map(item=>({key:item,downStreamOnly:!1})))}mergeScopeState2Global(id){const{scope:scope}=this.tasksMap.get(id),scopeKeys=Array.from(this.tasksMap.getAll().keys()).filter(key=>this.tasksMap.get(key).scope===scope);this.mergeStateByScope(scope),react_dom_default.a.unstable_batchedUpdates(()=>{scopeKeys.forEach(scopeKey=>{this.triggerSchedule(scopeKey,{refresh:!1,force:!0})})})}triggerQueueAdd(point){this.triggerQueue.add(point)}triggerSchedule(id,options={}){const{refresh:refresh=!1,force:force}=options,{scope:scope}=this.getTaskMap(id),point={key:id,downStreamOnly:!refresh};force||(point.scope=scope);0===this.taskScheduler.getAllPointFired(point).length?this.onPropsChange(this.taskState.getAll(),this.taskState):(this.triggerQueueAdd(point),this.batchTriggerChange())}batchTriggerSchedule(points){this.subject.emit(typings_global.b.BatchEventTrigger),this.executeTask(points)}taskUpdateSchedule(id){this.subject.emit(typings_global.b.TaskChange);const{scope:scope}=this.getTaskMap(id);this.executeTask({key:id,scope:scope,downStreamOnly:!1})}isRecordStatus(key){const task=this.tasksMap.get(key);if(!task)return!1;const{recordStatus:recordStatus=!0}=task;return"function"==typeof recordStatus?recordStatus(this.getTaskInfo(key,task)):recordStatus}preChange(key){key&&this.isRecordStatus(key)&&(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Running,errorMsg:void 0}),this.notifyModule(key))}onError(currentKey,notFinishPoint,errorMsg,callbackInfo){let keys=[currentKey];keys=keys.concat(notFinishPoint),keys.forEach(k=>{this.isRecordStatus(k)&&this.udpateState(k,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Error,errorMsg:errorMsg}),this.notifyModule(k)})}notifyModule(id,now=!1){now?this.eventEmitter.emit(id+"----"+src_global.b.State):(this.uiQueue.add(id),this.batchUiChange())}getTask(){return[...this.tasksMap.getAll().values()].map(task=>({key:task.id,deps:task.deps,taskType:task.reactionType,scope:task.scope,task:taskInfo=>{const{key:key}=taskInfo;let defaultTask;return defaultTask=task.reactionType===typings_global.a.Sync?currentTaskInfo=>{currentTaskInfo.updateState(currentTaskInfo.value)}:currentTaskInfo=>new Promise(resolve=>{resolve()}),task.reaction&&(defaultTask=task.reaction),defaultTask(this.getTaskInfo(key,taskInfo))}}))}getTaskInfo(key,taskInfo){return Object.assign(Object.assign({},Object(rdx_src_utils.c)(key,this)),{updateState:value=>{this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value)},callbackMapWhenConflict:callback=>{const cancel=this.cancelMap.get(key);cancel&&(cancel(),this.cancelMap.remove(key)),this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.CancelMap,callback)}})}getTaskMap(id){return this.tasksMap.get(id)}getTaskState(id,scope){return this.taskState.get(id,scope)}getTaskStatus(id){return this.taskStatus.get(id)}getReducer(id){return this.tasksMap.get(id).reducer}next(id,value,options){this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value),this.notifyModule(id,!0),this.triggerSchedule(id,options)}dispatchAction(id,customAction,options={}){const{executeTask:executeTask=!0}=options,{reducer:reducer,scope:scope}=this.getTaskMap(id);reducer&&(this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,reducer(this.getTaskState(id,scope),customAction,this)),this.notifyModule(id,!0)),executeTask&&this.triggerSchedule(id,options)}mergeStateByScope(scope){this.taskState.merge(scope),this.taskState=this.taskState.clone()}addOrUpdateTask(id,taskInfo,options={notifyTask:!0,notifyView:!1}){const{notifyView:notifyView,notifyTask:notifyTask}=options;this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TasksMap,taskInfo),notifyView&&this.notifyModule(id),notifyTask&&this.triggerSchedule(id,{refresh:!0})}removeTask(id){this.udpateState(id,RdxContext_interface.a.Remove,RdxContext_interface.b.TasksMap)}udpateState(key,type,targetType,paylaod){this.subject.emit(typings_global.b.StateChange,{actionType:type,targetType:targetType,value:paylaod,key:key}),targetType===RdxContext_interface.b.TaskState&&(this.onPropsStateChange(key,paylaod,type),this.dirtySets.add(key));const scope=this.tasksMap.get(key)&&this.tasksMap.get(key).scope;type===RdxContext_interface.a.Remove?this[targetType][type](key,scope):type===RdxContext_interface.a.Update?this[targetType][type](key,paylaod,scope):type===RdxContext_interface.a.Merge&&this[targetType][type](scope),this[targetType]=this[targetType].clone()}batchUpdateState(tasks){tasks.forEach(item=>{const{key:key,type:type,targetType:targetType,payload:payload}=item;this.udpateState(key,type,targetType,payload)})}executeTask(taskKeys){this.taskScheduler.updateTasks(this.getTask()),this.taskScheduler.getAllPointFired(taskKeys).forEach(point=>{const cancel=this.cancelMap.get(point);cancel&&(cancel(),this.cancelMap.remove(point))}),this.taskScheduler.notifyDownstream(taskKeys)}}const initValue=()=>({tasksMap:new core.a(new Map),taskState:new core.c({}),taskStatus:new core.b({}),cancelMap:new core.a(new Map),parentMounted:!1}),ShareContextInstance=react_default.a.createContext(initValue()),ShareContextProvider=ShareContextInstance.Provider,ShareContextConsumer=ShareContextInstance.Consumer},919:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return GLOBAL_DEPENDENCE_SCOPE})),__webpack_require__.d(__webpack_exports__,"b",(function(){return BaseGraph}));var _utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(115);const GLOBAL_DEPENDENCE_SCOPE="*";class BaseGraph{constructor(config){this.getAllPointsByPointByScope=scope=>{const vaildConfig=this.getConfigByScope(scope),validConfigDevlierMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.c)(vaildConfig);return triggerPoints=>{const recordSet=new Set,traverseDirtySet=new Set;return function traverse(triggerPoints){triggerPoints.forEach(triggerPoint=>{triggerPoint.downStreamOnly||recordSet.has(triggerPoint.key)||recordSet.add(triggerPoint.key);const currentDeliverConfig=validConfigDevlierMap.get(triggerPoint.key);if(currentDeliverConfig){const willTraversePoint=currentDeliverConfig.filter(item=>!traverseDirtySet.has(item)).map(item=>({key:item,downStreamOnly:!1}));traverseDirtySet.add(triggerPoint.key),traverse(willTraversePoint)}})}(triggerPoints),Array.from(recordSet)}},this.updateConfig(config)}sinks(){return this.config.filter(item=>0===(item.deps||[]).length).map(item=>item.key)}successors(v){return this.deliverMap.get(v)||[]}nodes(){return this.config.map(item=>item.key)}hasEdge(v,w){return(this.deliverMap.get(v)||[]).includes(w)}findCycles(){return this.tarjan().filter(cmpt=>cmpt.length>1||1===cmpt.length&&this.hasEdge(cmpt[0],cmpt[0]))}edgeValue(v,w){this.deliverMap}inEdges(key){return(this.configMap.get(key).deps||[]).map(item=>({v:item.id,w:key,value:this.configMap.get(key).deps.find(dep=>dep.id===item.id).value}))}edge(v,w){return((this.configMap.get(w).deps||[]).find(item=>item.id===v)||{}).value}outEdges(key){return(this.deliverMap.get(key)||[]).map(item=>({v:key,w:item}))}removeEdge(v,w){const newConfig=this.config.map(item=>item.key===w?Object.assign(Object.assign({},item),{deps:item.deps.filter(dep=>dep.id!==v)}):Object.assign({},item));return this.updateConfig(newConfig),newConfig}removeNode(key){this.config=this.config.filter(item=>item.key!==key).map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>dep.id!==key)})),this.updateConfig(this.config)}dfs(k,visited,stack){visited.add(k),stack.push(k),this.successors(k).forEach(successorKey=>{visited.has(successorKey)?stack.push(k):this.dfs(successorKey,visited,stack)})}getRelationConfig(keys){const config=this.config.filter(item=>keys.includes(item.key));return this.cleanInVaildDeps(config)}isAcyclic(){let visited=new Set,stack=[];return this.sinks().forEach(k=>{this.dfs(k,visited,stack)}),visited.size<stack.length}tarjan(){var index=0,stack=[],visited={},results=[];function isVisited(w){return Boolean(visited[w])}const dfs=v=>{var entry=visited[v]={onStack:!0,lowlink:index,index:index++};if(stack.push(v),this.successors(v).forEach((function(w){isVisited(w)?visited[w].onStack&&(entry.lowlink=Math.min(entry.lowlink,visited[w].index)):(dfs(w),entry.lowlink=Math.min(entry.lowlink,visited[w].lowlink))})),entry.lowlink===entry.index){var w,cmpt=[];do{w=stack.pop(),visited[w].onStack=!1,cmpt.push(w)}while(v!==w);results.push(cmpt)}};return this.nodes().forEach((function(v){isVisited(v)||dfs(v)})),results}updateConfig(config){this.config=config,this.configMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(config),this.deliverMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.c)(config)}getConfig(){return this.config}cleanInVaildDeps(config){const configMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(config);return config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>configMap.get(dep.id))}))}getConfigByScope(scope){let config;return config=scope&&scope!==GLOBAL_DEPENDENCE_SCOPE?this.config.filter(item=>item.scope===scope):this.config,this.cleanInVaildDeps(config)}getAllPointsByPoints(triggerPoints){triggerPoints=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.d)(triggerPoints);const validPoints=[];triggerPoints.forEach((cursor,index)=>{const newCursor=Object.assign({},cursor);-1!==validPoints.findIndex(item=>item.key===cursor.key)&&(cursor.scope&&cursor.scope!==GLOBAL_DEPENDENCE_SCOPE||(newCursor.scope=GLOBAL_DEPENDENCE_SCOPE),cursor.downStreamOnly||(newCursor.downStreamOnly=!1)),validPoints.push(newCursor)});const classficationPointsByScope=new Map;validPoints.forEach(item=>{const getPointsByScope=classficationPointsByScope.get(item.scope);classficationPointsByScope.has(item.scope)?getPointsByScope.push(item):classficationPointsByScope.set(item.scope,[item])});let allPoints=[];return Array.from(classficationPointsByScope.keys()).forEach(scope=>{allPoints=allPoints.concat(this.getAllPointsByPointByScope(scope)(classficationPointsByScope.get(scope)))}),allPoints=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.e)(allPoints,p=>p),allPoints}}new Error},926:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Graph_Graph}));var BaseGraph=__webpack_require__(919),global=__webpack_require__(116),utils=__webpack_require__(115);class runningMap_RunningMap{constructor(points){this.statusMap=new Map,this.points=points}createStatusMap(){this.points.forEach(point=>{this.statusMap.set(point,global.a.IDeal)})}hasPoint(key){return this.points.includes(key)}setStatus(key,status){this.statusMap.set(key,status)}batchSetStatus(key,status){Object(utils.d)(key).forEach(current=>{this.setStatus(current,status)})}isRunning(){return this.getNotFinishPoints().length>0}isFinish(key){if(this.hasPoint(key)){const status=this.statusMap.get(key);return!(status===global.a.Waiting||status===global.a.Running)}return!0}isPointRunning(key){if(this.hasPoint(key)){return this.statusMap.get(key)===global.a.Running}return!1}getAllPointsWtihStatus(){return this.points.map(p=>({key:p,status:this.statusMap.get(p)}))}getNotFinishPoints(){return this.points.filter(key=>!this.isFinish(key)).map(item=>({key:item,status:this.statusMap.get(item)}))}getRunningPoints(){return this.points.filter(key=>this.hasPoint(key)&&this.isPointRunning(key)).map(item=>({key:item,status:this.statusMap.get(item)}))}}class Graph_Graph extends BaseGraph.b{constructor(config){super(config),this.runningGraph=new runningMap_RunningMap(config.map(item=>item.key))}udpateRunningGraph(points){this.runningGraph=new runningMap_RunningMap(points.map(item=>item.key))}isRunning(){return this.runningGraph.isRunning()}setRunning(key){key&&this.runningGraph.setStatus(key,global.a.Running)}setPending(key){key&&this.runningGraph.batchSetStatus(key,global.a.Waiting)}getAllPointWithStatus(){return this.runningGraph.getAllPointsWtihStatus()}setFinish(key){key&&this.runningGraph.batchSetStatus(key,global.a.Finish)}getCurrentPoints(triggerPoints){const notFinishPoints=this.getNotFinishPoints(),allTriggerPoints=this.getAllPointsByPoints(triggerPoints);return Object(utils.e)([...notFinishPoints.map(item=>item.key),...allTriggerPoints],a=>a)}getNotFinishPoints(){return this.runningGraph.getNotFinishPoints()}getRunningPoints(){return this.runningGraph.getRunningPoints()}}},927:function(module,exports,__webpack_require__){__webpack_require__(928),__webpack_require__(1074),__webpack_require__(1075),__webpack_require__(1726),__webpack_require__(1727),module.exports=__webpack_require__(1751)},992:function(module,exports){}},[[927,1,2]]]);
//# sourceMappingURL=main.1730efe94994615ecf0c.bundle.js.map