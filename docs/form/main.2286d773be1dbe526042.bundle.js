(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1002:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return GLOBAL_DEPENDENCE_SCOPE})),__webpack_require__.d(__webpack_exports__,"b",(function(){return BaseGraph}));var _utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(126);const GLOBAL_DEPENDENCE_SCOPE="*";class BaseGraph{constructor(config){this.getAllPointsByPointByScope=scope=>{const vaildConfig=this.getConfigByScope(scope),validConfigDevlierMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.c)(vaildConfig);return triggerPoints=>{const recordSet=new Set,traverseDirtySet=new Set;return function traverse(triggerPoints){triggerPoints.forEach(triggerPoint=>{triggerPoint.downStreamOnly||recordSet.has(triggerPoint.key)||recordSet.add(triggerPoint.key);const currentDeliverConfig=validConfigDevlierMap.get(triggerPoint.key);if(currentDeliverConfig){const willTraversePoint=currentDeliverConfig.filter(item=>!traverseDirtySet.has(item)).map(item=>({key:item,downStreamOnly:!1}));traverseDirtySet.add(triggerPoint.key),traverse(willTraversePoint)}})}(triggerPoints),Array.from(recordSet)}},this.updateConfig(config)}sinks(){return this.config.filter(item=>0===(item.deps||[]).length).map(item=>item.key)}successors(v){return this.deliverMap.get(v)||[]}nodes(){return this.config.map(item=>item.key)}hasEdge(v,w){return(this.deliverMap.get(v)||[]).includes(w)}findCycles(){return this.tarjan().filter(cmpt=>cmpt.length>1||1===cmpt.length&&this.hasEdge(cmpt[0],cmpt[0]))}edgeValue(v,w){this.deliverMap}inEdges(key){return(this.configMap.get(key).deps||[]).map(item=>({v:item.id,w:key,value:this.configMap.get(key).deps.find(dep=>dep.id===item.id).value}))}edge(v,w){return((this.configMap.get(w).deps||[]).find(item=>item.id===v)||{}).value}outEdges(key){return(this.deliverMap.get(key)||[]).map(item=>({v:key,w:item}))}removeEdge(v,w){const newConfig=this.config.map(item=>item.key===w?Object.assign(Object.assign({},item),{deps:item.deps.filter(dep=>dep.id!==v)}):Object.assign({},item));return this.updateConfig(newConfig),newConfig}removeNode(key){this.config=this.config.filter(item=>item.key!==key).map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>dep.id!==key)})),this.updateConfig(this.config)}dfs(k,visited,stack){visited.add(k),stack.push(k),this.successors(k).forEach(successorKey=>{visited.has(successorKey)?stack.push(k):this.dfs(successorKey,visited,stack)})}getRelationConfig(keys){const config=this.config.filter(item=>keys.includes(item.key));return this.cleanInVaildDeps(config)}isAcyclic(){let visited=new Set,stack=[];return this.sinks().forEach(k=>{this.dfs(k,visited,stack)}),visited.size<stack.length}tarjan(){var index=0,stack=[],visited={},results=[];function isVisited(w){return Boolean(visited[w])}const dfs=v=>{var entry=visited[v]={onStack:!0,lowlink:index,index:index++};if(stack.push(v),this.successors(v).forEach((function(w){isVisited(w)?visited[w].onStack&&(entry.lowlink=Math.min(entry.lowlink,visited[w].index)):(dfs(w),entry.lowlink=Math.min(entry.lowlink,visited[w].lowlink))})),entry.lowlink===entry.index){var w,cmpt=[];do{w=stack.pop(),visited[w].onStack=!1,cmpt.push(w)}while(v!==w);results.push(cmpt)}};return this.nodes().forEach((function(v){isVisited(v)||dfs(v)})),results}updateConfig(config){this.config=config,this.configMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(config),this.deliverMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.c)(config)}getConfig(){return this.config}cleanInVaildDeps(config){const configMap=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.b)(config);return config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>configMap.get(dep.id))}))}getConfigByScope(scope){let config;return config=scope&&scope!==GLOBAL_DEPENDENCE_SCOPE?this.config.filter(item=>item.scope===scope):this.config,this.cleanInVaildDeps(config)}getAllPointsByPoints(triggerPoints){triggerPoints=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.d)(triggerPoints);const validPoints=[];triggerPoints.forEach((cursor,index)=>{const newCursor=Object.assign({},cursor);-1!==validPoints.findIndex(item=>item.key===cursor.key)&&(cursor.scope&&cursor.scope!==GLOBAL_DEPENDENCE_SCOPE||(newCursor.scope=GLOBAL_DEPENDENCE_SCOPE),cursor.downStreamOnly||(newCursor.downStreamOnly=!1)),validPoints.push(newCursor)});const classficationPointsByScope=new Map;validPoints.forEach(item=>{const getPointsByScope=classficationPointsByScope.get(item.scope);classficationPointsByScope.has(item.scope)?getPointsByScope.push(item):classficationPointsByScope.set(item.scope,[item])});let allPoints=[];return Array.from(classficationPointsByScope.keys()).forEach(scope=>{allPoints=allPoints.concat(this.getAllPointsByPointByScope(scope)(classficationPointsByScope.get(scope)))}),allPoints=Object(_utils__WEBPACK_IMPORTED_MODULE_0__.e)(allPoints,p=>p),allPoints}}new Error},1003:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return PathContextInstance}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);const PathContextInstance=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__).a.createContext({paths:[],virtual:!1,isArray:!1,setArrayItem:()=>{}})},1013:function(module,__webpack_exports__,__webpack_require__){"use strict";var react=__webpack_require__(1),react_default=__webpack_require__.n(react),pathContext=__webpack_require__(1003),functions=__webpack_require__(2367),styled_components_browser_esm=__webpack_require__(41),table=__webpack_require__(2364),es_button=__webpack_require__(562),icon=__webpack_require__(40);styled_components_browser_esm.b.div`
  display: flex;
  flex-direction: center;
  align-items: center;
  justify-content: center;
`;const StyleCard=styled_components_browser_esm.b.div`
  box-shadow: none;
  border-width: 1px;
  border-style: solid;
  border-color: rgb(238, 238, 238);
  border-image: initial;
`,StyledAdd=styled_components_browser_esm.b.div`
  padding: 10px;
  background: rgb(251, 251, 251);
  border-left: 1px solid rgb(220, 222, 227);
  border-right: 1px solid rgb(220, 222, 227);
  border-bottom: 1px solid rgb(220, 222, 227);
`;__webpack_exports__.a=props=>{const{value:value=[],onChange:onChange,children:children,name:name}=props,{paths:parentPaths=[]}=Object(react.useContext)(pathContext.a),infos=Object(functions.b)(children),{children:childrenInfos=[]}=infos,{remove:remove,moveDown:moveDown,moveUp:moveUp,add:add}=function createMutators(value,onChange,infos){const switchItem=(arr,preIndex,nextIndex)=>{const temp=(arr=arr.slice(0))[preIndex];return arr[preIndex]=arr[nextIndex],arr[nextIndex]=temp,arr};return{add:()=>{onChange([...value,Object(functions.c)(infos)])},moveDown:index=>{index+1>value.length||onChange(switchItem(value,index,index+1))},moveUp:index=>{if(index-1<0)return;const newValue=switchItem(value,index-1,index);onChange(newValue)},remove:index=>{const cloneValue=value.slice(0);cloneValue.splice(index,1),onChange(cloneValue)},switchItem:switchItem}}(value,onChange,infos);return react_default.a.createElement(StyleCard,null,react_default.a.createElement(table.a,Object.assign({dataSource:JSON.parse(JSON.stringify(value)),columns:[...childrenInfos.map((item,colIndex)=>({dataIndex:item.xComponent,title:item.title,cell:(value,rowIndex)=>{const currentPaths=[...parentPaths,name,rowIndex.toString()];return react_default.a.createElement(pathContext.a.Provider,{value:{paths:currentPaths}},react_default.a.cloneElement(item.child,Object.assign(Object.assign({},item.child.props),{title:void 0,key:`${rowIndex}-${item.name}`})))}})),{dataIndex:"____operation",title:"操作",cell:(v,index)=>{const ReDefineButton=es_button.a;return react_default.a.createElement("div",{style:{display:"flex"}},react_default.a.createElement(ReDefineButton,{type:"primary"},react_default.a.createElement(icon.a,{onClick:()=>{remove(index)},style:{marginRight:6},type:"ashbin"}),react_default.a.createElement(icon.a,{onClick:()=>{moveUp(index)},style:{marginRight:6},type:"arrow-up"}),react_default.a.createElement(icon.a,{onClick:()=>{moveDown(index)},type:"arrow-down"})))}}]},{})),react_default.a.createElement(StyledAdd,{onClick:()=>{add()}},react_default.a.createElement(icon.a,{type:"add"})))}},1015:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return Graph_Graph}));var BaseGraph=__webpack_require__(1002),global=__webpack_require__(144),utils=__webpack_require__(126);class runningMap_RunningMap{constructor(points){this.statusMap=new Map,this.points=points}createStatusMap(){this.points.forEach(point=>{this.statusMap.set(point,global.a.IDeal)})}hasPoint(key){return this.points.includes(key)}setStatus(key,status){this.statusMap.set(key,status)}batchSetStatus(key,status){Object(utils.d)(key).forEach(current=>{this.setStatus(current,status)})}isRunning(){return this.getNotFinishPoints().length>0}isFinish(key){if(this.hasPoint(key)){const status=this.statusMap.get(key);return!(status===global.a.Waiting||status===global.a.Running)}return!0}isPointRunning(key){if(this.hasPoint(key)){return this.statusMap.get(key)===global.a.Running}return!1}getAllPointsWtihStatus(){return this.points.map(p=>({key:p,status:this.statusMap.get(p)}))}getNotFinishPoints(){return this.points.filter(key=>!this.isFinish(key)).map(item=>({key:item,status:this.statusMap.get(item)}))}getRunningPoints(){return this.points.filter(key=>this.hasPoint(key)&&this.isPointRunning(key)).map(item=>({key:item,status:this.statusMap.get(item)}))}}class Graph_Graph extends BaseGraph.b{constructor(config){super(config),this.runningGraph=new runningMap_RunningMap(config.map(item=>item.key))}udpateRunningGraph(points){this.runningGraph=new runningMap_RunningMap(points.map(item=>item.key))}isRunning(){return this.runningGraph.isRunning()}setRunning(key){key&&this.runningGraph.setStatus(key,global.a.Running)}setPending(key){key&&this.runningGraph.batchSetStatus(key,global.a.Waiting)}getAllPointWithStatus(){return this.runningGraph.getAllPointsWtihStatus()}setFinish(key){key&&this.runningGraph.batchSetStatus(key,global.a.Finish)}getCurrentPoints(triggerPoints){const notFinishPoints=this.getNotFinishPoints(),allTriggerPoints=this.getAllPointsByPoints(triggerPoints);return Object(utils.e)([...notFinishPoints.map(item=>item.key),...allTriggerPoints],a=>a)}getNotFinishPoints(){return this.runningGraph.getNotFinishPoints()}getRunningPoints(){return this.runningGraph.getRunningPoints()}}},1019:function(module,exports,__webpack_require__){__webpack_require__(1020),__webpack_require__(1167),__webpack_require__(1168),__webpack_require__(1818),__webpack_require__(1819),module.exports=__webpack_require__(1843)},1084:function(module,exports){},125:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return shareContext_ShareContextClass})),__webpack_require__.d(__webpack_exports__,"e",(function(){return initValue})),__webpack_require__.d(__webpack_exports__,"c",(function(){return ShareContextInstance})),__webpack_require__.d(__webpack_exports__,"d",(function(){return ShareContextProvider})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ShareContextConsumer}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),global=__webpack_require__(144),src_global=__webpack_require__(161),core=__webpack_require__(160),RdxContext_interface=__webpack_require__(35),eventemitter3=__webpack_require__(385),eventemitter3_default=__webpack_require__.n(eventemitter3),utils=__webpack_require__(126),Graph=__webpack_require__(1015),BaseGraph=__webpack_require__(1002),src_utils=__webpack_require__(127);var typings_global=__webpack_require__(306);class ScheduledCore{constructor(dataSource){this.inDegree=new Map,this.deliverMap=new Map,this.taskQueue=[],this.update(dataSource)}update(dataSource){this.dataSource=dataSource,this.inDegree=this.createInDegree(),this.deliverMap=this.createDeliverMap()}createDeliverMap(){const deliversMap=new Map;for(const item of this.dataSource)for(const dep of item.deps||[]){const currentRelations=deliversMap.get(dep);currentRelations?currentRelations.push(item.id):deliversMap.set(dep,[item.id])}return deliversMap}createInDegree(){const m=new Map;return this.dataSource.forEach(row=>{const{id:id,deps:deps}=row;m.set(id,(deps||[]).length)}),m}stop(){this.taskQueue.forEach(task=>task.stop()),this.taskQueue=[]}canExecute(id){return 0===this.inDegree.get(id)}start(callback){const inDegreeZero=[];Array.from(this.inDegree.keys()).forEach(key=>{this.canExecute(key)&&inDegreeZero.push(key)}),this.batchExecute(inDegreeZero,callback)}batchExecute(ids,callback){ids.forEach(item=>{this.execute(item,callback)})}execute(id,callback){const task=new ScheduledTask(id,()=>{const deliverIds=this.deliverMap.get(id);deliverIds.forEach(deliverId=>{const currentInDegree=this.inDegree.get(deliverId);this.inDegree.set(deliverId,currentInDegree-1)});const willExcuteIds=deliverIds.filter(item=>this.canExecute(item));this.batchExecute(willExcuteIds,callback)},callback);this.taskQueue.push(task),task.execute()}}class ScheduledTask{constructor(id,next,callback){this.stopSingnal=!1,this.id=id,this.next=next,this.callback=callback}isStop(){return this.stopSingnal}stop(){this.stopSingnal=!0}execute(){this.callback(this.id,{next:()=>{this.isStop()||this.next()},scheduledTask:this})}}class PreDefinedTaskQueue_CommonQueue extends class DeliverByPreDefinedTask_DeliverByCallback extends class base_BaseQueue{constructor(config){this.config=[],this.configMap=new Map,this.running=!1,this.runningId="none",this.runtimeGraph=new Graph.a([]),this.updateTasks(config)}updateTasks(config){this.graph?this.graph.updateConfig(Object(src_utils.c)(config)):this.graph=new Graph.a(Object(src_utils.c)(config)),this.config=config.map(item=>Object.assign(Object.assign({},item),{scope:item.scope?item.scope:BaseGraph.a})),this.configMap=Object(utils.b)(config)}getFirstAllPoints(scope){const firstPoints=this.getFirstPoints(scope);return this.graph.getAllPointsByPoints(firstPoints.map(point=>({key:point,scope:scope})))}getFirstPoints(scope){const startPoints=[],config=this.graph.getConfigByScope(scope);if(0===config.length)return[];const{points:newPendingPoints}=Object(src_utils.b)(config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).map(k=>({id:k.id}))})),config[0].key,!1);for(const item of newPendingPoints){0===(item.deps||[]).length&&startPoints.push(item.key)}return startPoints}getAllPointFired(points){const newPoints=Object(utils.d)(points);return this.graph.getAllPointsByPoints(newPoints)}isRunning(){return this.graph.isRunning()}getIntersectPoints(downStreamPoints){const runningPoints=this.graph.getNotFinishPoints();return downStreamPoints.filter(p=>runningPoints.some(rp=>rp&&rp.key===p))}getNotFinishPoints(){return this.graph.getNotFinishPoints()}getPendingPoints(executeTasks){return this.graph.isRunning()?this.graph.getCurrentPoints(executeTasks):this.graph.getAllPointsByPoints(executeTasks)}beforeDeliver(executeTasks){const normalizeExecuteTasks=Object(utils.d)(executeTasks);let pendingPoints=this.getPendingPoints(normalizeExecuteTasks),downStreamPoints=this.graph.getAllPointsByPoints(normalizeExecuteTasks);const intersectPoints=this.getIntersectPoints(downStreamPoints),pendingConfig=this.config.filter(rowConfig=>pendingPoints.includes(rowConfig.key));return this.graph.udpateRunningGraph(Object(src_utils.c)(pendingConfig)),{downStreamPoints:downStreamPoints,intersectPoints:intersectPoints,pendingConfig:pendingConfig,pendingPoints:pendingPoints}}}{constructor(config,preCallback=(()=>{}),callback=(()=>{}),errorCallback=(()=>{}),processChange=(()=>{})){super(config),this.callback=callback,this.preCallback=preCallback,this.errorCallback=errorCallback,this.processChange=processChange}getTaskByPoints(p){const newPs=Object(utils.d)(p).map(currentP=>this.configMap.get(currentP));return this.cleanInVaildDeps(newPs)}cleanInVaildDeps(config){const configMap=Object(utils.a)(config,a=>a&&a.key);return config.map(item=>Object.assign(Object.assign({},item),{deps:(item.deps||[]).filter(dep=>configMap.get(dep.id))}))}deliver(executeTasks){if(0===executeTasks.length)return;const notFinish=this.graph.getNotFinishPoints(),runningPointsMap=Object(utils.a)(notFinish,item=>item.key);let{intersectPoints:intersectPoints,pendingPoints:pendingPoints,downStreamPoints:downStreamPoints}=this.beforeDeliver(executeTasks);const triggerPoint=executeTasks[executeTasks.length-1];pendingPoints.includes(triggerPoint.key)||pendingPoints.push(triggerPoint.key);const{points:newPendingPoints,edgeCuts:edgeCuts}=Object(src_utils.b)(this.getTaskByPoints(pendingPoints),triggerPoint.key,triggerPoint.downStreamOnly);this.processChange(typings_global.b.ProcessRunningGraph,{graph:this.config,preRunningPoints:this.getTaskByPoints(notFinish.map(item=>item.key)).map(item=>Object.assign(Object.assign({},item),{status:runningPointsMap[item.key]})),triggerPoints:Object(src_utils.e)(executeTasks),effectPoints:downStreamPoints,conflictPoints:intersectPoints,currentAllPoints:this.getTaskByPoints(pendingPoints),edgeCutFlow:edgeCuts,currentRunningPoints:Object(src_utils.e)(newPendingPoints)});const endPoint={id:src_utils.a,deps:newPendingPoints.map(item=>item.key)};if(0===newPendingPoints.length)return;this.graph.setPending(newPendingPoints.map(item=>item.key));const runningPointsWithEndPoint=[endPoint,...newPendingPoints.map(item=>({id:item.key,deps:(item.deps||[]).map(dep=>dep.id)}))];this.scheduledCore||(this.scheduledCore=new ScheduledCore(runningPointsWithEndPoint)),this.scheduledCore.stop(),this.scheduledCore.update(runningPointsWithEndPoint),this.scheduledCore.start(this.callbackFunction.bind(this,new Graph.a(newPendingPoints)))}callbackFunction(runningGraph,currentKey,options){currentKey===src_utils.a?this.callback({isEnd:!0}):this.preCallback(currentKey);const{next:next,scheduledTask:scheduledTask}=options,curConfig=this.graph.configMap.get(currentKey),baseTaskInfo={key:currentKey,deps:(curConfig&&curConfig.deps||[]).map(item=>({id:item.id}))};if(null!==currentKey){const curConfig=this.graph.configMap.get(currentKey),onSuccessProcess=()=>{scheduledTask.isStop()||(this.graph.setFinish(currentKey),this.processChange(typings_global.b.StatusChange,{id:currentKey,status:global.a.Finish}),this.callback({currentKey:currentKey,isEnd:!1}),next())},onErrorProcess=error=>{if(!scheduledTask.isStop()){const relationPoints=runningGraph.getAllPointsByPoints({key:currentKey,downStreamOnly:!1}),runningPoints=this.getNotFinishPoints(),runningPointsMap=Object(utils.a)(runningPoints,a=>a.key),notFinishPoint=relationPoints.filter(item=>runningPointsMap.has(item));notFinishPoint.forEach(p=>{this.graph.setFinish(p)}),this.processChange(typings_global.b.StatusChange,{id:currentKey,status:global.a.Error}),this.errorCallback(currentKey,notFinishPoint,error?error.toString():"运行错误",{currentKey:currentKey,isEnd:!0}),console.error(`${currentKey}任务执行失败, depsKeys:${curConfig&&curConfig.deps} errorMsg: ${error&&error.stack&&error.stack.toString()}`)}};if(curConfig)if(curConfig.taskType===typings_global.a.Sync)try{curConfig.task(Object.assign(Object.assign({},baseTaskInfo),{isCancel:()=>scheduledTask.isStop(),next:next})),onSuccessProcess()}catch(error){onErrorProcess(error)}else curConfig.task(Object.assign(Object.assign({},baseTaskInfo),{isCancel:()=>scheduledTask.isStop(),next:next})).then(onSuccessProcess).catch(onErrorProcess)}}}{constructor(){super(...arguments),this.getTaskByPoint=points=>points.map(point=>{const t=this.getTaskByPoints(point.key);return{key:point.key,task:t[0].task,scope:point.scope}}),this.notifyDownstream=who=>{(who=Object(utils.d)(who)).every(w=>function isString(myVar){return"string"==typeof myVar||myVar instanceof String}(w.key))?this.deliver(who):console.warn("触发节点的格式必须为{ key: string, scope?: string }")}}getTaskByPointWithScope(points,scope){return points.map(point=>({key:point,task:this.getTaskByPoints(point)[0].task,scope:scope}))}initExecute(scope){const startPoints=this.getFirstPoints(scope);this.deliver(this.getTaskByPointWithScope(startPoints,scope))}}var react_dom=__webpack_require__(12),react_dom_default=__webpack_require__.n(react_dom),rdx_src_utils=__webpack_require__(163);class shareContext_ShareContextClass{constructor(config){this.queue=new Set,this.uiQueue=new Set,this.triggerQueue=new Set,this.dirtySets=new Set,this.onPropsChange=()=>{},this.onPropsStateChange=()=>{},this.onChange=callbackInfo=>{const{currentKey:key}=callbackInfo;if(callbackInfo.isEnd){const all=this.taskState.getAll();this.cancelMap.removeAll(),all&&this.onPropsChange(all,this.taskState),this.dirtySets.clear()}if(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.IDeal}),key){this.preTaskState=this.taskState.clone();const{deps:deps=[]}=this.getTaskMap(key);this.dirtySets.has(key)||deps.some(dep=>this.dirtySets.has(dep.id))?this.notifyModule(key):console.warn(`id为${key}的模块，在触发时未通过updateState执行任何数据变更`)}key&&this.cancelMap.remove(key)},this.refresh=(key,value)=>{const{scope:scope}=this.getTaskMap(key);value&&(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value),this.notifyModule(key,!0)),this.executeTask({key:key,scope:scope,downStreamOnly:!1})},window.store=this,this.eventEmitter=new eventemitter3_default.a,this.name=config.name,this.subject=new eventemitter3_default.a,this.taskScheduler=new PreDefinedTaskQueue_CommonQueue([],this.preChange.bind(this),this.onChange,this.onError.bind(this),(type,content)=>{if(this.subject.emit(type,content),type===typings_global.b.ProcessRunningGraph){const{currentRunningPoints:currentRunningPoints,triggerPoints:triggerPoints,conflictPoints:conflictPoints}=content;conflictPoints.forEach(id=>{this.isRecordStatus(id)&&(this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.IDeal,errorMsg:void 0}),this.notifyModule(id))}),currentRunningPoints.forEach(item=>{const{key:id}=item;if(this.isRecordStatus(id)){const status=this.getTaskStatus(id);this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Waiting,errorMsg:void 0}),status&&status.value===global.a.Waiting||this.notifyModule(id)}})}}),this.tasksMap=config.tasksMap,this.taskState=config.taskState,this.taskStatus=config.taskStatus,this.cancelMap=config.cancelMap}initSchedule(){this.taskScheduler.updateTasks(this.getTask());const firstPoints=this.taskScheduler.getFirstAllPoints();this.subject.emit(typings_global.b.Init),firstPoints.length>0&&this.executeTask(firstPoints.map(item=>({key:item,downStreamOnly:!1})))}mergeScopeState2Global(id){const{scope:scope}=this.tasksMap.get(id),scopeKeys=Array.from(this.tasksMap.getAll().keys()).filter(key=>this.tasksMap.get(key).scope===scope);this.mergeStateByScope(scope),react_dom_default.a.unstable_batchedUpdates(()=>{scopeKeys.forEach(scopeKey=>{this.triggerSchedule(scopeKey,{refresh:!1,force:!0})})})}triggerQueueAdd(point){this.triggerQueue.add(point)}triggerSchedule(id,options={}){const{refresh:refresh=!1,force:force}=options,{scope:scope}=this.getTaskMap(id),point={key:id,downStreamOnly:!refresh};force||(point.scope=scope);0===this.taskScheduler.getAllPointFired(point).length?this.onPropsChange(this.taskState.getAll(),this.taskState):(this.triggerQueueAdd(point),this.batchTriggerChange())}batchTriggerSchedule(points){this.subject.emit(typings_global.b.BatchEventTrigger),this.executeTask(points)}taskUpdateSchedule(id){this.subject.emit(typings_global.b.TaskChange);const{scope:scope}=this.getTaskMap(id);this.executeTask({key:id,scope:scope,downStreamOnly:!1})}isRecordStatus(key){const task=this.tasksMap.get(key);if(!task)return!1;const{recordStatus:recordStatus=!0}=task;return"function"==typeof recordStatus?recordStatus(this.getTaskInfo(key,task)):recordStatus}preChange(key){key&&this.isRecordStatus(key)&&(this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Running,errorMsg:void 0}),this.notifyModule(key))}onError(currentKey,notFinishPoint,errorMsg,callbackInfo){let keys=[currentKey];keys=keys.concat(notFinishPoint),keys.forEach(k=>{this.isRecordStatus(k)&&this.udpateState(k,RdxContext_interface.a.Update,RdxContext_interface.b.TaskStatus,{value:global.a.Error,errorMsg:errorMsg}),this.notifyModule(k)})}notifyModule(id,now=!1){now?this.eventEmitter.emit(id+"----"+src_global.b.State):(this.uiQueue.add(id),this.batchUiChange())}getTask(){return[...this.tasksMap.getAll().values()].map(task=>({key:task.id,deps:task.deps,taskType:task.reactionType,scope:task.scope,task:taskInfo=>{const{key:key}=taskInfo;let defaultTask;return defaultTask=task.reactionType===typings_global.a.Sync?currentTaskInfo=>{currentTaskInfo.updateState(currentTaskInfo.value)}:currentTaskInfo=>new Promise(resolve=>{resolve()}),task.reaction&&(defaultTask=task.reaction),defaultTask(this.getTaskInfo(key,taskInfo))}}))}getTaskInfo(key,taskInfo){return Object.assign(Object.assign({},Object(rdx_src_utils.c)(key,this)),{updateState:value=>{this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value)},callbackMapWhenConflict:callback=>{const cancel=this.cancelMap.get(key);cancel&&(cancel(),this.cancelMap.remove(key)),this.udpateState(key,RdxContext_interface.a.Update,RdxContext_interface.b.CancelMap,callback)}})}getTaskMap(id){return this.tasksMap.get(id)}getTaskState(id,scope){return this.taskState.get(id,scope)}getTaskStatus(id){return this.taskStatus.get(id)}getReducer(id){return this.tasksMap.get(id).reducer}next(id,value,options){this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,value),this.notifyModule(id,!0),this.triggerSchedule(id,options)}dispatchAction(id,customAction,options={}){const{executeTask:executeTask=!0}=options,{reducer:reducer,scope:scope}=this.getTaskMap(id);reducer&&(this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,reducer(this.getTaskState(id,scope),customAction,this)),this.notifyModule(id,!0)),executeTask&&this.triggerSchedule(id,options)}mergeStateByScope(scope){this.taskState.merge(scope),this.taskState=this.taskState.clone()}addOrUpdateTask(id,taskInfo,options={notifyTask:!0,notifyView:!1}){const{notifyView:notifyView,notifyTask:notifyTask}=options;this.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TasksMap,taskInfo),notifyView&&this.notifyModule(id),notifyTask&&this.triggerSchedule(id,{refresh:!0})}removeTask(id){this.udpateState(id,RdxContext_interface.a.Remove,RdxContext_interface.b.TasksMap)}udpateState(key,type,targetType,paylaod){this.subject.emit(typings_global.b.StateChange,{actionType:type,targetType:targetType,value:paylaod,key:key}),targetType===RdxContext_interface.b.TaskState&&(this.onPropsStateChange(key,paylaod,type),this.dirtySets.add(key));const scope=this.tasksMap.get(key)&&this.tasksMap.get(key).scope;type===RdxContext_interface.a.Remove?this[targetType][type](key,scope):type===RdxContext_interface.a.Update?this[targetType][type](key,paylaod,scope):type===RdxContext_interface.a.Merge&&this[targetType][type](scope),this[targetType]=this[targetType].clone()}batchUpdateState(tasks){tasks.forEach(item=>{const{key:key,type:type,targetType:targetType,payload:payload}=item;this.udpateState(key,type,targetType,payload)})}executeTask(taskKeys){this.taskScheduler.updateTasks(this.getTask()),this.taskScheduler.getAllPointFired(taskKeys).forEach(point=>{const cancel=this.cancelMap.get(point);cancel&&(cancel(),this.cancelMap.remove(point))}),this.taskScheduler.notifyDownstream(taskKeys)}}const initValue=()=>({tasksMap:new core.a(new Map),taskState:new core.c({}),taskStatus:new core.b({}),cancelMap:new core.a(new Map),parentMounted:!1}),ShareContextInstance=react_default.a.createContext(initValue()),ShareContextProvider=ShareContextInstance.Provider,ShareContextConsumer=ShareContextInstance.Consumer},126:function(module,__webpack_exports__,__webpack_require__){"use strict";function createDeliversMap(config){const deliversMap=new Map;for(const item of config)for(const dep of item.deps||[]){const currentRelations=deliversMap.get(dep.id);currentRelations?currentRelations.push(item.key):deliversMap.set(dep.id,[item.key])}return deliversMap}function createConfigMap(config){return config.reduce((currentMap,item)=>(currentMap.set(item.key,item),currentMap),new Map)}function normalizeSingle2Arr(point){return Array.isArray(point)?point:[point]}function arr2Map(source,getKey){const m=new Map;return source.forEach(item=>{const key=getKey(item);m.set(key,item)}),m}function union(source,byKey=(t=>t)){const arr=[],m=new Map;return source.forEach(item=>{const key=byKey(item);m.has(key)||(arr.push(item),m.set(key,item))}),arr}__webpack_require__.d(__webpack_exports__,"c",(function(){return createDeliversMap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return createConfigMap})),__webpack_require__.d(__webpack_exports__,"d",(function(){return normalizeSingle2Arr})),__webpack_require__.d(__webpack_exports__,"a",(function(){return arr2Map})),__webpack_require__.d(__webpack_exports__,"e",(function(){return union}))},127:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return END})),__webpack_require__.d(__webpack_exports__,"b",(function(){return cleanConfig})),__webpack_require__.d(__webpack_exports__,"c",(function(){return graphAdapter})),__webpack_require__.d(__webpack_exports__,"e",(function(){return point2WithWeightAdapter})),__webpack_require__.d(__webpack_exports__,"d",(function(){return graphLibAdapter}));var _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1015),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};const END="i am i end subscribe, hahaha";var ReasonType;function cleanConfig(p,triggerKey,donwStream){const edgeCuts=[],graph=new _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a(graphAdapter(p));try{!function removeCircleEdges(rootGraph,currentGraph,triggerKey,edgeCuts){const circles=rootGraph.findCycles();if(0===circles.length)return;const path=currentGraph.getAllPointsByPoints({key:triggerKey,downStreamOnly:!1});circles.forEach(circle=>{let circleTriggerKey=(sourceArr=circle,path.find(item=>sourceArr.includes(item)));var sourceArr;circleTriggerKey||(circleTriggerKey=circle[0]);const circleGraph=((graph,circle)=>{const config=graph.getRelationConfig(circle);return new _czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a(config)})(currentGraph,circle),edgeCut={circle:circle,edges:[]};function removeEdge({v:v,w:w}){circleGraph.removeEdge(v,w),rootGraph.removeEdge(v,w)}function appendEdgeCuts(edges){edgeCut.edges=[...edgeCut.edges,...edges]}const inEdges=circleGraph.inEdges(circleTriggerKey);if(inEdges){const inEdgesInCircle=inEdges;inEdgesInCircle.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(inEdgesInCircle.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.TriggerInnEdge})))}const outEdges=rootGraph.outEdges(circleTriggerKey);if(outEdges){const willCutEdges=(edges=>{let max=-1,maxIndex=-1;return edges.forEach((item,index)=>{const{value:value}=item;value.weight>max&&(max=value.weight,maxIndex=index)}),-1===maxIndex?null:[...edges.slice(0,maxIndex),...edges.slice(maxIndex+1)]})(outEdges.map(item=>Object.assign(Object.assign({},item),{value:rootGraph.edge(item.v,item.w)})));if(willCutEdges)willCutEdges.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(willCutEdges.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.SmallWeight})));else{const others=outEdges.slice(1);others.forEach(edge=>{removeEdge(edge)}),appendEdgeCuts(others.map(item=>({source:item.v,target:item.w,reasonType:ReasonType.WeightEqualAndNotFirst})))}}edgeCuts.push(edgeCut),removeCircleEdges(rootGraph,circleGraph,circleTriggerKey,edgeCuts)})}(graph,graph,triggerKey,edgeCuts),!0===donwStream&&graph.removeNode(triggerKey)}catch(error){console.error(error)}return{points:graph.config,edgeCuts:edgeCuts}}function graphAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{deps:(p.deps||[]).map(dep=>{if("string"==typeof dep)return{id:dep};{const{id:id}=dep,others=__rest(dep,["id"]);return{id:dep.id,value:others}}})}))}function point2WithWeightAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{id:p.key,deps:(p.deps||[]).map(dep=>({id:dep.id}))}))}function graphLibAdapter(pointWithWeight){return pointWithWeight.map(p=>Object.assign(Object.assign({},p),{id:p.key,deps:(p.deps||[]).map(dep=>"string"==typeof dep?{id:dep}:dep)}))}!function(ReasonType){ReasonType.TriggerInnEdge="TriggerInnEdge",ReasonType.SmallWeight="SmallWeight",ReasonType.WeightEqualAndNotFirst="WeightEqualAndNotFirst"}(ReasonType||(ReasonType={}))},144:function(module,__webpack_exports__,__webpack_require__){"use strict";var POINT_RELEVANT_STATUS,NodeStatus;__webpack_require__.d(__webpack_exports__,"a",(function(){return NodeStatus})),function(POINT_RELEVANT_STATUS){POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.SAME_POINT=1]="SAME_POINT",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.UP_STREAM=2]="UP_STREAM",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.DOWN_STREAM=2]="DOWN_STREAM",POINT_RELEVANT_STATUS[POINT_RELEVANT_STATUS.IRRELEVANT=4]="IRRELEVANT"}(POINT_RELEVANT_STATUS||(POINT_RELEVANT_STATUS={})),function(NodeStatus){NodeStatus.Running="RUNNING",NodeStatus.Finish="FINISH",NodeStatus.Waiting="WATTING",NodeStatus.IDeal="NONE",NodeStatus.Error="ERROR"}(NodeStatus||(NodeStatus={}))},160:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return BaseMap})),__webpack_require__.d(__webpack_exports__,"b",(function(){return BaseObject})),__webpack_require__.d(__webpack_exports__,"c",(function(){return ScopeObject}));class BaseMap{constructor(v){this.v=v}clone(){return new BaseMap(this.v)}merge(scope){throw new Error("Method not implemented.")}get(key,scope){return this.v.get(key)||null}removeAll(){this.v.clear()}remove(rkey,scope){const newMap=new Map;Array.from(this.v.keys()).forEach(key=>{key!==rkey&&newMap.set(key,this.v.get(key))}),this.v=newMap}update(key,value,scope){const newV=new Map(this.v);return newV.set(key,value),this.v=newV,this}getAll(){return this.v}}class BaseObject{constructor(v){this.v=v}remove(key,scope){this.v=Object.assign(Object.assign({},this.v),{[key]:null})}merge(scope){throw new Error("Method not implemented.")}clone(){return new BaseObject(this.v)}getAll(){return this.v}get(key,scope){return this.v[key]}update(key,value,scope){return this.v=Object.assign(Object.assign({},this.v),{[key]:value}),this}}class ScopeObject extends BaseObject{constructor(v,scopeState){super(v),this.scopeEditState=new Map,scopeState&&Array.from(scopeState.keys()).forEach(scope=>{this.scopeEditState.set(scope,scopeState.get(scope))})}getCurrentScopeState(scope){return this.scopeEditState.get(scope)}hasScopeState(scope){return Boolean(this.scopeEditState.get(scope))}get(key,scope){if(!scope)return super.get(key);const scopeState=this.getCurrentScopeState(scope),vInScope=scopeState&&scopeState.get(key);return scopeState&&void 0!==vInScope?vInScope:super.get(key)}remove(key,scope){super.remove(key,scope),this.hasScopeState(scope)&&this.scopeEditState.set(scope,null)}merge(scope){if(this.hasScopeState(scope)){const currentScopeState=this.getCurrentScopeState(scope);this.scopeEditState.set(scope,null),this.v=Object.assign({},super.getAll(),currentScopeState.getAll())}}clone(){return new ScopeObject(super.getAll(),this.scopeEditState)}update(key,value,scope){let state=super.getAll();if(scope){if(this.hasScopeState(scope)){const currentScopeState=this.getCurrentScopeState(scope);this.scopeEditState.set(scope,currentScopeState.update(key,value))}else this.scopeEditState.set(scope,new BaseObject({[key]:value}))}else state=super.update(key,value,scope).getAll();this.v=state}}},161:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return RENDER_STATUS})),__webpack_require__.d(__webpack_exports__,"c",(function(){return Status})),__webpack_require__.d(__webpack_exports__,"b",(function(){return StateUpdateType}));var STATUS_TYPE,TASK_INIT_TYPE,RENDER_STATUS,_czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(144);!function(STATUS_TYPE){STATUS_TYPE.BEFORE_TASK_EXECUTE="1",STATUS_TYPE.BEFORE_TASK_GROUP_EXECUTE="2"}(STATUS_TYPE||(STATUS_TYPE={})),function(TASK_INIT_TYPE){TASK_INIT_TYPE.FROM_PROPS="1",TASK_INIT_TYPE.FROM_CHILDREN="2"}(TASK_INIT_TYPE||(TASK_INIT_TYPE={})),function(RENDER_STATUS){RENDER_STATUS.FirstRender="FIRST_RENDER"}(RENDER_STATUS||(RENDER_STATUS={}));const Status=Object.assign(Object.assign({},_czwcode_graph_core__WEBPACK_IMPORTED_MODULE_0__.a),RENDER_STATUS);var StateUpdateType;!function(StateUpdateType){StateUpdateType.ReactionStatus="ReactionStatus",StateUpdateType.State="State"}(StateUpdateType||(StateUpdateType={}))},163:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return CompareType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return checkTaskChange})),__webpack_require__.d(__webpack_exports__,"c",(function(){return createBaseContext}));var CompareType,shallowequal__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(162),shallowequal__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(shallowequal__WEBPACK_IMPORTED_MODULE_0__);function checkTaskChange(preProps,nextProps,type){if(!nextProps||!preProps)return!0;let change=!1;const notCareKeys=["defaultValue","moduleConfig","areEqualForTask"];return Object.keys(preProps).forEach(key=>{"deps"===key?change=nextProps[key].some((item,index)=>!shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(item,preProps[key][index])):notCareKeys.includes(key)?function checkIsModuleChange(preProps,nextProps,type){const{areEqualForTask:areEqualForTask,moduleConfig:moduleConfig}=nextProps,preModuleConfig=preProps&&preProps.moduleConfig;return areEqualForTask?!areEqualForTask(type,moduleConfig,preModuleConfig):!shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(moduleConfig,preModuleConfig)}(preProps,nextProps,type)&&(change=!0):shallowequal__WEBPACK_IMPORTED_MODULE_0___default()(preProps[key],nextProps[key])||(change=!0)}),change}function createBaseContext(id,context,defaultTaskMap){let taskInfo=context.tasksMap.get(id);taskInfo=taskInfo||defaultTaskMap;const{moduleConfig:moduleConfig,deps:deps=[],scope:scope}=taskInfo;return{id:id,deps:deps,moduleConfig:moduleConfig,depsModuleConfig:deps.map(dep=>{const taskMap=context.tasksMap;return taskMap.get(dep.id)&&taskMap.get(dep.id).moduleConfig}),depsValues:(deps||taskInfo&&taskInfo.deps||[]).map(key=>{const currentDeptId=key.id,scope=context.tasksMap.get(currentDeptId)&&context.tasksMap.get(currentDeptId).scope;return context.taskState.get(currentDeptId,scope)}),state:context.taskState.getAll(),value:context.taskState.get(id,scope),lastDepsValue:deps.map(dep=>{const tasksMap=context.tasksMap;if(tasksMap.get(dep.id)){const scope=tasksMap.get(dep.id).scope;return context.preTaskState&&context.preTaskState.get(dep.id,scope)}return null})}}!function(CompareType){CompareType.ExecuteTask="ExecuteTask",CompareType.ViewShouldUpdate="ViewShouldUpdate"}(CompareType||(CompareType={}))},1819:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(1820),__webpack_require__(77),__webpack_require__(42),__webpack_require__(68),__webpack_require__(179);var _storybook_react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(393);Object(_storybook_react__WEBPACK_IMPORTED_MODULE_5__.addParameters)({options:{storySort:function storySort(a,b){var config=[{category:"介绍",order:["基本信息","动机","核心概念"]},{category:"基本示例",order:["Introduction"]},{category:"场景示例",order:["组件的状态"]},{category:"ReactJS",order:["Introduction","Quickstart","Examples"]},{category:"Components"}],story1=a[1].kind.split("|"),story2=b[1].kind.split("|");function getOrderNumber(needle,haystack){var order=9999;return Array.isArray(haystack)&&-1===(order=haystack.findIndex((function(h){return h.toLowerCase()===needle.toLowerCase()})))&&(order=9999),order}var topLevelOrderArray=config.map((function(h){return h.category})),topLevelOrder1=getOrderNumber(story1[0],topLevelOrderArray),topLevelOrder2=getOrderNumber(story2[0],topLevelOrderArray);return story1[0]!==story2[0]?topLevelOrder1-topLevelOrder2:story1[1]!==story2[1]?getOrderNumber(story1[1],config[topLevelOrder1]&&config[topLevelOrder1].order)-getOrderNumber(story2[1],config[topLevelOrder2]&&config[topLevelOrder2].order):0}}})},1843:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(393);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(1845),__webpack_require__(2347)],module)}.call(this,__webpack_require__(1844)(module))},1845:function(module,exports,__webpack_require__){var map={"./FormItem.stories.tsx":2349,"./charts/chart.stories.tsx":2354,"./contextTest.stories.tsx":2239,"./formSample.stories.tsx":2240,"./scene/defaultSetting/index.stories.tsx":2353,"./scene/httpSetting/index.stories.tsx":2351,"./uFormTest.stories.tsx":2257};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1845},222:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return LayoutType})),__webpack_require__.d(__webpack_exports__,"a",(function(){return LayoutContextInstance}));var LayoutType,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);!function(LayoutType){LayoutType.Grid="grid",LayoutType.Inline="inline"}(LayoutType||(LayoutType={}));const LayoutContextInstance=Object(react__WEBPACK_IMPORTED_MODULE_0__.createContext)({})},2237:function(module,exports,__webpack_require__){var map={"./af":825,"./af.js":825,"./ar":826,"./ar-dz":827,"./ar-dz.js":827,"./ar-kw":828,"./ar-kw.js":828,"./ar-ly":829,"./ar-ly.js":829,"./ar-ma":830,"./ar-ma.js":830,"./ar-sa":831,"./ar-sa.js":831,"./ar-tn":832,"./ar-tn.js":832,"./ar.js":826,"./az":833,"./az.js":833,"./be":834,"./be.js":834,"./bg":835,"./bg.js":835,"./bm":836,"./bm.js":836,"./bn":837,"./bn.js":837,"./bo":838,"./bo.js":838,"./br":839,"./br.js":839,"./bs":840,"./bs.js":840,"./ca":841,"./ca.js":841,"./cs":842,"./cs.js":842,"./cv":843,"./cv.js":843,"./cy":844,"./cy.js":844,"./da":845,"./da.js":845,"./de":846,"./de-at":847,"./de-at.js":847,"./de-ch":848,"./de-ch.js":848,"./de.js":846,"./dv":849,"./dv.js":849,"./el":850,"./el.js":850,"./en-au":851,"./en-au.js":851,"./en-ca":852,"./en-ca.js":852,"./en-gb":853,"./en-gb.js":853,"./en-ie":854,"./en-ie.js":854,"./en-il":855,"./en-il.js":855,"./en-in":856,"./en-in.js":856,"./en-nz":857,"./en-nz.js":857,"./en-sg":858,"./en-sg.js":858,"./eo":859,"./eo.js":859,"./es":860,"./es-do":861,"./es-do.js":861,"./es-us":862,"./es-us.js":862,"./es.js":860,"./et":863,"./et.js":863,"./eu":864,"./eu.js":864,"./fa":865,"./fa.js":865,"./fi":866,"./fi.js":866,"./fil":867,"./fil.js":867,"./fo":868,"./fo.js":868,"./fr":869,"./fr-ca":870,"./fr-ca.js":870,"./fr-ch":871,"./fr-ch.js":871,"./fr.js":869,"./fy":872,"./fy.js":872,"./ga":873,"./ga.js":873,"./gd":874,"./gd.js":874,"./gl":875,"./gl.js":875,"./gom-deva":876,"./gom-deva.js":876,"./gom-latn":877,"./gom-latn.js":877,"./gu":878,"./gu.js":878,"./he":879,"./he.js":879,"./hi":880,"./hi.js":880,"./hr":881,"./hr.js":881,"./hu":882,"./hu.js":882,"./hy-am":883,"./hy-am.js":883,"./id":884,"./id.js":884,"./is":885,"./is.js":885,"./it":886,"./it-ch":887,"./it-ch.js":887,"./it.js":886,"./ja":888,"./ja.js":888,"./jv":889,"./jv.js":889,"./ka":890,"./ka.js":890,"./kk":891,"./kk.js":891,"./km":892,"./km.js":892,"./kn":893,"./kn.js":893,"./ko":894,"./ko.js":894,"./ku":895,"./ku.js":895,"./ky":896,"./ky.js":896,"./lb":897,"./lb.js":897,"./lo":898,"./lo.js":898,"./lt":899,"./lt.js":899,"./lv":900,"./lv.js":900,"./me":901,"./me.js":901,"./mi":902,"./mi.js":902,"./mk":903,"./mk.js":903,"./ml":904,"./ml.js":904,"./mn":905,"./mn.js":905,"./mr":906,"./mr.js":906,"./ms":907,"./ms-my":908,"./ms-my.js":908,"./ms.js":907,"./mt":909,"./mt.js":909,"./my":910,"./my.js":910,"./nb":911,"./nb.js":911,"./ne":912,"./ne.js":912,"./nl":913,"./nl-be":914,"./nl-be.js":914,"./nl.js":913,"./nn":915,"./nn.js":915,"./oc-lnc":916,"./oc-lnc.js":916,"./pa-in":917,"./pa-in.js":917,"./pl":918,"./pl.js":918,"./pt":919,"./pt-br":920,"./pt-br.js":920,"./pt.js":919,"./ro":921,"./ro.js":921,"./ru":922,"./ru.js":922,"./sd":923,"./sd.js":923,"./se":924,"./se.js":924,"./si":925,"./si.js":925,"./sk":926,"./sk.js":926,"./sl":927,"./sl.js":927,"./sq":928,"./sq.js":928,"./sr":929,"./sr-cyrl":930,"./sr-cyrl.js":930,"./sr.js":929,"./ss":931,"./ss.js":931,"./sv":932,"./sv.js":932,"./sw":933,"./sw.js":933,"./ta":934,"./ta.js":934,"./te":935,"./te.js":935,"./tet":936,"./tet.js":936,"./tg":937,"./tg.js":937,"./th":938,"./th.js":938,"./tk":939,"./tk.js":939,"./tl-ph":940,"./tl-ph.js":940,"./tlh":941,"./tlh.js":941,"./tr":942,"./tr.js":942,"./tzl":943,"./tzl.js":943,"./tzm":944,"./tzm-latn":945,"./tzm-latn.js":945,"./tzm.js":944,"./ug-cn":946,"./ug-cn.js":946,"./uk":947,"./uk.js":947,"./ur":948,"./ur.js":948,"./uz":949,"./uz-latn":950,"./uz-latn.js":950,"./uz.js":949,"./vi":951,"./vi.js":951,"./x-pseudo":952,"./x-pseudo.js":952,"./yo":953,"./yo.js":953,"./zh-cn":954,"./zh-cn.js":954,"./zh-hk":955,"./zh-hk.js":955,"./zh-mo":956,"./zh-mo.js":956,"./zh-tw":957,"./zh-tw.js":957};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=2237},2239:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TTTT",(function(){return TTTT}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_packages_rdx_src__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(2359),addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories"),__STORY__="import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport { useForceUpdate } from '../../../packages/rdx/src';\nexport default {\n  title: '基本示例|contextTest',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst ShareContextInstance = React.createContext({ a: 1 });\nconst Child = ({ v }) => {\n  return (\n    <ShareContextInstance.Consumer>\n      {(context) => {\n        return (\n          <div\n            onClick={() => {\n              // context.setA(v);\n            }}\n          >\n            3333\n          </div>\n        );\n      }}\n    </ShareContextInstance.Consumer>\n  );\n};\n\nclass T {\n  onChange: any;\n  constructor(onChange) {\n    this.onChange = onChange;\n  }\n  a: 1;\n  b: 777\n  setA(a) {\n    this.a = a;\n    this.onChange();\n  }\n}\nconst Parent = ({ children }) => {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(new T(forceUpdate));\n  return (\n    <ShareContextInstance.Provider value={ref.current}>\n      <div> parent ----{JSON.stringify(ref.current)}</div>\n      {children}\n    </ShareContextInstance.Provider>\n  );\n};\nexport const TTTT = () => {\n  return (\n    <div>\n      <Parent>\n        <Child v={2}></Child>\n        <Parent>\n          <Child v={3}></Child>\n        </Parent>\n      </Parent>\n    </div>\n  );\n};\n",__ADDS_MAP__={"基本示例-contexttest--tttt":{startLoc:{col:20,line:55},endLoc:{col:1,line:66},startBody:{col:20,line:55},endBody:{col:1,line:66}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"基本示例|contextTest",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\\\nimport { Button } from \'@alifd/next\';\\\\nimport { useState } from \'react\';\\\\nimport { useRef } from \'react\';\\\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\\\nexport default {\\\\n  title: \'基本示例|contextTest\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst ShareContextInstance = React.createContext({ a: 1 });\\\\nconst Child = ({ v }) => {\\\\n  return (\\\\n    <ShareContextInstance.Consumer>\\\\n      {(context) => {\\\\n        return (\\\\n          <div\\\\n            onClick={() => {\\\\n              // context.setA(v);\\\\n            }}\\\\n          >\\\\n            3333\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </ShareContextInstance.Consumer>\\\\n  );\\\\n};\\\\n\\\\nclass T {\\\\n  onChange: any;\\\\n  constructor(onChange) {\\\\n    this.onChange = onChange;\\\\n  }\\\\n  a: 1;\\\\n  b: 777\\\\n  setA(a) {\\\\n    this.a = a;\\\\n    this.onChange();\\\\n  }\\\\n}\\\\nconst Parent = ({ children }) => {\\\\n  const forceUpdate = useForceUpdate();\\\\n  const ref = useRef(new T(forceUpdate));\\\\n  return (\\\\n    <ShareContextInstance.Provider value={ref.current}>\\\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\\\n      {children}\\\\n    </ShareContextInstance.Provider>\\\\n  );\\\\n};\\\\nexport const TTTT = () => {\\\\n  return (\\\\n    <div>\\\\n      <Parent>\\\\n        <Child v={2}></Child>\\\\n        <Parent>\\\\n          <Child v={3}></Child>\\\\n        </Parent>\\\\n      </Parent>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-contexttest--tttt\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":66},\\"startBody\\":{\\"col\\":20,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":66}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/contextTest.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\\\nimport { Button } from \'@alifd/next\';\\\\nimport { useState } from \'react\';\\\\nimport { useRef } from \'react\';\\\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\\\nexport default {\\\\n  title: \'基本示例|contextTest\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst ShareContextInstance = React.createContext({ a: 1 });\\\\nconst Child = ({ v }) => {\\\\n  return (\\\\n    <ShareContextInstance.Consumer>\\\\n      {(context) => {\\\\n        return (\\\\n          <div\\\\n            onClick={() => {\\\\n              // context.setA(v);\\\\n            }}\\\\n          >\\\\n            3333\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </ShareContextInstance.Consumer>\\\\n  );\\\\n};\\\\n\\\\nclass T {\\\\n  onChange: any;\\\\n  constructor(onChange) {\\\\n    this.onChange = onChange;\\\\n  }\\\\n  a: 1;\\\\n  b: 777\\\\n  setA(a) {\\\\n    this.a = a;\\\\n    this.onChange();\\\\n  }\\\\n}\\\\nconst Parent = ({ children }) => {\\\\n  const forceUpdate = useForceUpdate();\\\\n  const ref = useRef(new T(forceUpdate));\\\\n  return (\\\\n    <ShareContextInstance.Provider value={ref.current}>\\\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\\\n      {children}\\\\n    </ShareContextInstance.Provider>\\\\n  );\\\\n};\\\\nexport const TTTT = () => {\\\\n  return (\\\\n    <div>\\\\n      <Parent>\\\\n        <Child v={2}></Child>\\\\n        <Parent>\\\\n          <Child v={3}></Child>\\\\n        </Parent>\\\\n      </Parent>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-contexttest--tttt\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":66},\\"startBody\\":{\\"col\\":20,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":66}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = addSourceDecorator(() => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":77},"endLoc":{"col":139,"line":88},"startBody":{"col":20,"line":77},"endBody":{"col":139,"line":88}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/contextTest.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = () => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":55},"endLoc":{"col":1,"line":66},"startBody":{"col":20,"line":55},"endBody":{"col":1,"line":66}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/contextTest.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\nimport { Button } from \'@alifd/next\';\nimport { useState } from \'react\';\nimport { useRef } from \'react\';\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\nexport default {\n  title: \'基本示例|contextTest\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\\\nimport { Button } from \'@alifd/next\';\\\\nimport { useState } from \'react\';\\\\nimport { useRef } from \'react\';\\\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\\\nexport default {\\\\n  title: \'基本示例|contextTest\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst ShareContextInstance = React.createContext({ a: 1 });\\\\nconst Child = ({ v }) => {\\\\n  return (\\\\n    <ShareContextInstance.Consumer>\\\\n      {(context) => {\\\\n        return (\\\\n          <div\\\\n            onClick={() => {\\\\n              // context.setA(v);\\\\n            }}\\\\n          >\\\\n            3333\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </ShareContextInstance.Consumer>\\\\n  );\\\\n};\\\\n\\\\nclass T {\\\\n  onChange: any;\\\\n  constructor(onChange) {\\\\n    this.onChange = onChange;\\\\n  }\\\\n  a: 1;\\\\n  b: 777\\\\n  setA(a) {\\\\n    this.a = a;\\\\n    this.onChange();\\\\n  }\\\\n}\\\\nconst Parent = ({ children }) => {\\\\n  const forceUpdate = useForceUpdate();\\\\n  const ref = useRef(new T(forceUpdate));\\\\n  return (\\\\n    <ShareContextInstance.Provider value={ref.current}>\\\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\\\n      {children}\\\\n    </ShareContextInstance.Provider>\\\\n  );\\\\n};\\\\nexport const TTTT = () => {\\\\n  return (\\\\n    <div>\\\\n      <Parent>\\\\n        <Child v={2}></Child>\\\\n        <Parent>\\\\n          <Child v={3}></Child>\\\\n        </Parent>\\\\n      </Parent>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-contexttest--tttt\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":66},\\"startBody\\":{\\"col\\":20,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":66}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/contextTest.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\\\nimport { Button } from \'@alifd/next\';\\\\nimport { useState } from \'react\';\\\\nimport { useRef } from \'react\';\\\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\\\nexport default {\\\\n  title: \'基本示例|contextTest\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nconst ShareContextInstance = React.createContext({ a: 1 });\\\\nconst Child = ({ v }) => {\\\\n  return (\\\\n    <ShareContextInstance.Consumer>\\\\n      {(context) => {\\\\n        return (\\\\n          <div\\\\n            onClick={() => {\\\\n              // context.setA(v);\\\\n            }}\\\\n          >\\\\n            3333\\\\n          </div>\\\\n        );\\\\n      }}\\\\n    </ShareContextInstance.Consumer>\\\\n  );\\\\n};\\\\n\\\\nclass T {\\\\n  onChange: any;\\\\n  constructor(onChange) {\\\\n    this.onChange = onChange;\\\\n  }\\\\n  a: 1;\\\\n  b: 777\\\\n  setA(a) {\\\\n    this.a = a;\\\\n    this.onChange();\\\\n  }\\\\n}\\\\nconst Parent = ({ children }) => {\\\\n  const forceUpdate = useForceUpdate();\\\\n  const ref = useRef(new T(forceUpdate));\\\\n  return (\\\\n    <ShareContextInstance.Provider value={ref.current}>\\\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\\\n      {children}\\\\n    </ShareContextInstance.Provider>\\\\n  );\\\\n};\\\\nexport const TTTT = () => {\\\\n  return (\\\\n    <div>\\\\n      <Parent>\\\\n        <Child v={2}></Child>\\\\n        <Parent>\\\\n          <Child v={3}></Child>\\\\n        </Parent>\\\\n      </Parent>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-contexttest--tttt\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":66},\\"startBody\\":{\\"col\\":20,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":66}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = addSourceDecorator(() => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n","locationsMap":{"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":77},"endLoc":{"col":139,"line":88},"startBody":{"col":20,"line":77},"endBody":{"col":139,"line":88}}}},"storySource":{"source":"import React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = () => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n};\\n","locationsMap":{"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":55},"endLoc":{"col":1,"line":66},"startBody":{"col":20,"line":55},"endBody":{"col":1,"line":66}}}},\n    info: { inline: true },\n  },\n};\n\nconst ShareContextInstance = React.createContext({ a: 1 });\nconst Child = ({ v }) => {\n  return (\n    <ShareContextInstance.Consumer>\n      {(context) => {\n        return (\n          <div\n            onClick={() => {\n              // context.setA(v);\n            }}\n          >\n            3333\n          </div>\n        );\n      }}\n    </ShareContextInstance.Consumer>\n  );\n};\n\nclass T {\n  onChange: any;\n  constructor(onChange) {\n    this.onChange = onChange;\n  }\n  a: 1;\n  b: 777\n  setA(a) {\n    this.a = a;\n    this.onChange();\n  }\n}\nconst Parent = ({ children }) => {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(new T(forceUpdate));\n  return (\n    <ShareContextInstance.Provider value={ref.current}>\n      <div> parent ----{JSON.stringify(ref.current)}</div>\n      {children}\n    </ShareContextInstance.Provider>\n  );\n};\nexport const TTTT = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <div>\n      <Parent>\n        <Child v={2}></Child>\n        <Parent>\n          <Child v={3}></Child>\n        </Parent>\n      </Parent>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n',locationsMap:{"基本示例-contexttest--tttt":{startLoc:{col:20,line:99},endLoc:{col:277,line:110},startBody:{col:20,line:99},endBody:{col:277,line:110}}}},storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = () => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":55},"endLoc":{"col":1,"line":66},"startBody":{"col":20,"line":55},"endBody":{"col":1,"line":66}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/contextTest.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\nimport { Button } from \'@alifd/next\';\nimport { useState } from \'react\';\nimport { useRef } from \'react\';\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\nexport default {\n  title: \'基本示例|contextTest\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport { SchemaMarkupField, SchemaForm } from \'@uform/next\';\\nimport { Button } from \'@alifd/next\';\\nimport { useState } from \'react\';\\nimport { useRef } from \'react\';\\nimport { useForceUpdate } from \'../../../packages/rdx/src\';\\nexport default {\\n  title: \'基本示例|contextTest\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nconst ShareContextInstance = React.createContext({ a: 1 });\\nconst Child = ({ v }) => {\\n  return (\\n    <ShareContextInstance.Consumer>\\n      {(context) => {\\n        return (\\n          <div\\n            onClick={() => {\\n              // context.setA(v);\\n            }}\\n          >\\n            3333\\n          </div>\\n        );\\n      }}\\n    </ShareContextInstance.Consumer>\\n  );\\n};\\n\\nclass T {\\n  onChange: any;\\n  constructor(onChange) {\\n    this.onChange = onChange;\\n  }\\n  a: 1;\\n  b: 777\\n  setA(a) {\\n    this.a = a;\\n    this.onChange();\\n  }\\n}\\nconst Parent = ({ children }) => {\\n  const forceUpdate = useForceUpdate();\\n  const ref = useRef(new T(forceUpdate));\\n  return (\\n    <ShareContextInstance.Provider value={ref.current}>\\n      <div> parent ----{JSON.stringify(ref.current)}</div>\\n      {children}\\n    </ShareContextInstance.Provider>\\n  );\\n};\\nexport const TTTT = () => {\\n  return (\\n    <div>\\n      <Parent>\\n        <Child v={2}></Child>\\n        <Parent>\\n          <Child v={3}></Child>\\n        </Parent>\\n      </Parent>\\n    </div>\\n  );\\n};\\n","locationsMap":{"基本示例-contexttest--tttt":{"startLoc":{"col":20,"line":55},"endLoc":{"col":1,"line":66},"startBody":{"col":20,"line":55},"endBody":{"col":1,"line":66}}}},\n    info: { inline: true },\n  },\n};\n\nconst ShareContextInstance = React.createContext({ a: 1 });\nconst Child = ({ v }) => {\n  return (\n    <ShareContextInstance.Consumer>\n      {(context) => {\n        return (\n          <div\n            onClick={() => {\n              // context.setA(v);\n            }}\n          >\n            3333\n          </div>\n        );\n      }}\n    </ShareContextInstance.Consumer>\n  );\n};\n\nclass T {\n  onChange: any;\n  constructor(onChange) {\n    this.onChange = onChange;\n  }\n  a: 1;\n  b: 777\n  setA(a) {\n    this.a = a;\n    this.onChange();\n  }\n}\nconst Parent = ({ children }) => {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(new T(forceUpdate));\n  return (\n    <ShareContextInstance.Provider value={ref.current}>\n      <div> parent ----{JSON.stringify(ref.current)}</div>\n      {children}\n    </ShareContextInstance.Provider>\n  );\n};\nexport const TTTT = addSourceDecorator(() => {\n  return (\n    <div>\n      <Parent>\n        <Child v={2}></Child>\n        <Parent>\n          <Child v={3}></Child>\n        </Parent>\n      </Parent>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n',locationsMap:{"基本示例-contexttest--tttt":{startLoc:{col:20,line:77},endLoc:{col:139,line:88},startBody:{col:20,line:77},endBody:{col:139,line:88}}}},storySource:{source:"import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport { useRef } from 'react';\nimport { useForceUpdate } from '../../../packages/rdx/src';\nexport default {\n  title: '基本示例|contextTest',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nconst ShareContextInstance = React.createContext({ a: 1 });\nconst Child = ({ v }) => {\n  return (\n    <ShareContextInstance.Consumer>\n      {(context) => {\n        return (\n          <div\n            onClick={() => {\n              // context.setA(v);\n            }}\n          >\n            3333\n          </div>\n        );\n      }}\n    </ShareContextInstance.Consumer>\n  );\n};\n\nclass T {\n  onChange: any;\n  constructor(onChange) {\n    this.onChange = onChange;\n  }\n  a: 1;\n  b: 777\n  setA(a) {\n    this.a = a;\n    this.onChange();\n  }\n}\nconst Parent = ({ children }) => {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(new T(forceUpdate));\n  return (\n    <ShareContextInstance.Provider value={ref.current}>\n      <div> parent ----{JSON.stringify(ref.current)}</div>\n      {children}\n    </ShareContextInstance.Provider>\n  );\n};\nexport const TTTT = () => {\n  return (\n    <div>\n      <Parent>\n        <Child v={2}></Child>\n        <Parent>\n          <Child v={3}></Child>\n        </Parent>\n      </Parent>\n    </div>\n  );\n};\n",locationsMap:{"基本示例-contexttest--tttt":{startLoc:{col:20,line:55},endLoc:{col:1,line:66},startBody:{col:20,line:55},endBody:{col:1,line:66}}}},info:{inline:!0}}};const ShareContextInstance=react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext({a:1}),Child=({v:v})=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ShareContextInstance.Consumer,null,context=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",{onClick:()=>{}},"3333"));class T{constructor(onChange){this.onChange=onChange}setA(a){this.a=a,this.onChange()}}const Parent=({children:children})=>{const forceUpdate=Object(_packages_rdx_src__WEBPACK_IMPORTED_MODULE_1__.b)(),ref=Object(react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new T(forceUpdate));return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ShareContextInstance.Provider,{value:ref.current},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null," parent ----",JSON.stringify(ref.current)),children)},TTTT=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Parent,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Child,{v:2}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Parent,null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(Child,{v:3})))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/contextTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/contextTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/contextTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2240:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"字符串类型",(function(){return 字符串类型})),__webpack_require__.d(__webpack_exports__,"布尔类型",(function(){return 布尔类型})),__webpack_require__.d(__webpack_exports__,"数组",(function(){return 数组})),__webpack_require__.d(__webpack_exports__,"JsonView",(function(){return JsonView})),__webpack_require__.d(__webpack_exports__,"树形数据配置",(function(){return 树形数据配置}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(307),_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(83),_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(91),_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(563),addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories"),__STORY__="import React from 'react';\nimport {\n  RdxFormContext,\n  RdxFormItem,\n  XComponentType,\n  BaseType,\n} from '@czwcode/rdx-next-form';\nimport { Icon } from '@alifd/next';\nexport default {\n  title: '基本示例|物料列表',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 字符串类型 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        xComponent={'select'}\n        dataSource={[\n          {\n            label: 'A',\n            value: 'A',\n          },\n          {\n            label: 'B',\n            value: 'B',\n          },\n        ]}\n      />\n      <RdxFormItem\n        name='C'\n        title='输入框'\n        type={'string'}\n        xComponent={'code'}\n      />\n      <RdxFormItem\n        name='D'\n        title='输入框'\n        type={'string'}\n        xComponent={'color'}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 布尔类型 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\n      <RdxFormItem\n        name='B'\n        title='复选框'\n        type={'boolean'}\n        xComponent={XComponentType.Checkbox}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      <RdxFormItem\n        name='B'\n        title='卡片数组'\n        type={'array'}\n        xComponent={XComponentType.ArrayTable}\n      >\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\nexport const JsonView = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'string'}\n        xComponent={'json'}\n        default={JSON.stringify({ a: 1, b: 2 })}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 树形数据配置 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'array'}\n        xComponent={XComponentType.Tree}\n      >\n        <RdxFormItem\n          type={BaseType.Object}\n          default={() => {\n            return { id: Math.random(), a: 1, b: 2 };\n          }}\n        >\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n",__ADDS_MAP__={"基本示例-物料列表--字符串类型":{startLoc:{col:21,line:16},endLoc:{col:1,line:54},startBody:{col:21,line:16},endBody:{col:1,line:54}},"基本示例-物料列表--布尔类型":{startLoc:{col:20,line:56},endLoc:{col:1,line:72},startBody:{col:20,line:56},endBody:{col:1,line:72}},"基本示例-物料列表--数组":{startLoc:{col:18,line:74},endLoc:{col:1,line:120},startBody:{col:18,line:74},endBody:{col:1,line:120}},"基本示例-物料列表--json-view":{startLoc:{col:24,line:121},endLoc:{col:1,line:137},startBody:{col:24,line:121},endBody:{col:1,line:137}},"基本示例-物料列表--树形数据配置":{startLoc:{col:22,line:139},endLoc:{col:1,line:164},startBody:{col:22,line:139},endBody:{col:1,line:164}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"基本示例|物料列表",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport {\\\\n  RdxFormContext,\\\\n  RdxFormItem,\\\\n  XComponentType,\\\\n  BaseType,\\\\n} from '@czwcode/rdx-next-form';\\\\nimport { Icon } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|物料列表',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 字符串类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='下拉框'\\\\n        type={'string'}\\\\n        xComponent={'select'}\\\\n        dataSource={[\\\\n          {\\\\n            label: 'A',\\\\n            value: 'A',\\\\n          },\\\\n          {\\\\n            label: 'B',\\\\n            value: 'B',\\\\n          },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='C'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'code'}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='D'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'color'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 布尔类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='复选框'\\\\n        type={'boolean'}\\\\n        xComponent={XComponentType.Checkbox}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='卡片数组'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.ArrayTable}\\\\n      >\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\nexport const JsonView = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'json'}\\\\n        default={JSON.stringify({ a: 1, b: 2 })}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 树形数据配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.Tree}\\\\n      >\\\\n        <RdxFormItem\\\\n          type={BaseType.Object}\\\\n          default={() => {\\\\n            return { id: Math.random(), a: 1, b: 2 };\\\\n          }}\\\\n        >\\\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-物料列表--字符串类型\\\":{\\\"startLoc\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":54},\\\"startBody\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":54}},\\\"基本示例-物料列表--布尔类型\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":72},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":72}},\\\"基本示例-物料列表--数组\\\":{\\\"startLoc\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":120},\\\"startBody\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":120}},\\\"基本示例-物料列表--json-view\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":137},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":137}},\\\"基本示例-物料列表--树形数据配置\\\":{\\\"startLoc\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":164},\\\"startBody\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":164}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/formSample.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport {\\\\n  RdxFormContext,\\\\n  RdxFormItem,\\\\n  XComponentType,\\\\n  BaseType,\\\\n} from '@czwcode/rdx-next-form';\\\\nimport { Icon } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|物料列表',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 字符串类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='下拉框'\\\\n        type={'string'}\\\\n        xComponent={'select'}\\\\n        dataSource={[\\\\n          {\\\\n            label: 'A',\\\\n            value: 'A',\\\\n          },\\\\n          {\\\\n            label: 'B',\\\\n            value: 'B',\\\\n          },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='C'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'code'}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='D'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'color'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 布尔类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='复选框'\\\\n        type={'boolean'}\\\\n        xComponent={XComponentType.Checkbox}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='卡片数组'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.ArrayTable}\\\\n      >\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\nexport const JsonView = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'json'}\\\\n        default={JSON.stringify({ a: 1, b: 2 })}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 树形数据配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.Tree}\\\\n      >\\\\n        <RdxFormItem\\\\n          type={BaseType.Object}\\\\n          default={() => {\\\\n            return { id: Math.random(), a: 1, b: 2 };\\\\n          }}\\\\n        >\\\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-物料列表--字符串类型\\\":{\\\"startLoc\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":54},\\\"startBody\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":54}},\\\"基本示例-物料列表--布尔类型\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":72},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":72}},\\\"基本示例-物料列表--数组\\\":{\\\"startLoc\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":120},\\\"startBody\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":120}},\\\"基本示例-物料列表--json-view\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":137},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":137}},\\\"基本示例-物料列表--树形数据配置\\\":{\\\"startLoc\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":164},\\\"startBody\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":164}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 布尔类型 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const JsonView = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 树形数据配置 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":38},\"endLoc\":{\"col\":139,\"line\":76},\"startBody\":{\"col\":21,\"line\":38},\"endBody\":{\"col\":139,\"line\":76}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":78},\"endLoc\":{\"col\":139,\"line\":94},\"startBody\":{\"col\":20,\"line\":78},\"endBody\":{\"col\":139,\"line\":94}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":96},\"endLoc\":{\"col\":139,\"line\":142},\"startBody\":{\"col\":18,\"line\":96},\"endBody\":{\"col\":139,\"line\":142}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":143},\"endLoc\":{\"col\":139,\"line\":159},\"startBody\":{\"col\":24,\"line\":143},\"endBody\":{\"col\":139,\"line\":159}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":161},\"endLoc\":{\"col\":139,\"line\":186},\"startBody\":{\"col\":22,\"line\":161},\"endBody\":{\"col\":139,\"line\":186}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/formSample.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 布尔类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\nexport const JsonView = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 树形数据配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":54},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":54}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":56},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":20,\"line\":56},\"endBody\":{\"col\":1,\"line\":72}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":74},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":18,\"line\":74},\"endBody\":{\"col\":1,\"line\":120}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":121},\"endLoc\":{\"col\":1,\"line\":137},\"startBody\":{\"col\":24,\"line\":121},\"endBody\":{\"col\":1,\"line\":137}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":139},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":22,\"line\":139},\"endBody\":{\"col\":1,\"line\":164}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/formSample.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxFormContext,\n  RdxFormItem,\n  XComponentType,\n  BaseType,\n} from '@czwcode/rdx-next-form';\nimport { Icon } from '@alifd/next';\nexport default {\n  title: '基本示例|物料列表',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport {\\\\n  RdxFormContext,\\\\n  RdxFormItem,\\\\n  XComponentType,\\\\n  BaseType,\\\\n} from '@czwcode/rdx-next-form';\\\\nimport { Icon } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|物料列表',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 字符串类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='下拉框'\\\\n        type={'string'}\\\\n        xComponent={'select'}\\\\n        dataSource={[\\\\n          {\\\\n            label: 'A',\\\\n            value: 'A',\\\\n          },\\\\n          {\\\\n            label: 'B',\\\\n            value: 'B',\\\\n          },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='C'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'code'}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='D'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'color'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 布尔类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='复选框'\\\\n        type={'boolean'}\\\\n        xComponent={XComponentType.Checkbox}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='卡片数组'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.ArrayTable}\\\\n      >\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\nexport const JsonView = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'json'}\\\\n        default={JSON.stringify({ a: 1, b: 2 })}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 树形数据配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.Tree}\\\\n      >\\\\n        <RdxFormItem\\\\n          type={BaseType.Object}\\\\n          default={() => {\\\\n            return { id: Math.random(), a: 1, b: 2 };\\\\n          }}\\\\n        >\\\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-物料列表--字符串类型\\\":{\\\"startLoc\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":54},\\\"startBody\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":54}},\\\"基本示例-物料列表--布尔类型\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":72},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":72}},\\\"基本示例-物料列表--数组\\\":{\\\"startLoc\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":120},\\\"startBody\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":120}},\\\"基本示例-物料列表--json-view\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":137},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":137}},\\\"基本示例-物料列表--树形数据配置\\\":{\\\"startLoc\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":164},\\\"startBody\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":164}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/formSample.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport {\\\\n  RdxFormContext,\\\\n  RdxFormItem,\\\\n  XComponentType,\\\\n  BaseType,\\\\n} from '@czwcode/rdx-next-form';\\\\nimport { Icon } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|物料列表',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 字符串类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='下拉框'\\\\n        type={'string'}\\\\n        xComponent={'select'}\\\\n        dataSource={[\\\\n          {\\\\n            label: 'A',\\\\n            value: 'A',\\\\n          },\\\\n          {\\\\n            label: 'B',\\\\n            value: 'B',\\\\n          },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='C'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'code'}\\\\n      />\\\\n      <RdxFormItem\\\\n        name='D'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'color'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 布尔类型 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='复选框'\\\\n        type={'boolean'}\\\\n        xComponent={XComponentType.Checkbox}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <RdxFormItem\\\\n        name='B'\\\\n        title='卡片数组'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.ArrayTable}\\\\n      >\\\\n        <RdxFormItem type={BaseType.Object}>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段1'\\\\n            name='a'\\\\n            default={'字段1'}\\\\n          ></RdxFormItem>\\\\n          <RdxFormItem\\\\n            type='string'\\\\n            title='字段2'\\\\n            name='b'\\\\n            default={'字段2'}\\\\n          ></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\nexport const JsonView = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'string'}\\\\n        xComponent={'json'}\\\\n        default={JSON.stringify({ a: 1, b: 2 })}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 树形数据配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem\\\\n        name='A'\\\\n        title='输入框'\\\\n        type={'array'}\\\\n        xComponent={XComponentType.Tree}\\\\n      >\\\\n        <RdxFormItem\\\\n          type={BaseType.Object}\\\\n          default={() => {\\\\n            return { id: Math.random(), a: 1, b: 2 };\\\\n          }}\\\\n        >\\\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-物料列表--字符串类型\\\":{\\\"startLoc\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":54},\\\"startBody\\\":{\\\"col\\\":21,\\\"line\\\":16},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":54}},\\\"基本示例-物料列表--布尔类型\\\":{\\\"startLoc\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":72},\\\"startBody\\\":{\\\"col\\\":20,\\\"line\\\":56},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":72}},\\\"基本示例-物料列表--数组\\\":{\\\"startLoc\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":120},\\\"startBody\\\":{\\\"col\\\":18,\\\"line\\\":74},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":120}},\\\"基本示例-物料列表--json-view\\\":{\\\"startLoc\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":137},\\\"startBody\\\":{\\\"col\\\":24,\\\"line\\\":121},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":137}},\\\"基本示例-物料列表--树形数据配置\\\":{\\\"startLoc\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":164},\\\"startBody\\\":{\\\"col\\\":22,\\\"line\\\":139},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":164}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 布尔类型 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\nexport const JsonView = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 树形数据配置 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\",\"locationsMap\":{\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":38},\"endLoc\":{\"col\":139,\"line\":76},\"startBody\":{\"col\":21,\"line\":38},\"endBody\":{\"col\":139,\"line\":76}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":78},\"endLoc\":{\"col\":139,\"line\":94},\"startBody\":{\"col\":20,\"line\":78},\"endBody\":{\"col\":139,\"line\":94}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":96},\"endLoc\":{\"col\":139,\"line\":142},\"startBody\":{\"col\":18,\"line\":96},\"endBody\":{\"col\":139,\"line\":142}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":143},\"endLoc\":{\"col\":139,\"line\":159},\"startBody\":{\"col\":24,\"line\":143},\"endBody\":{\"col\":139,\"line\":159}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":161},\"endLoc\":{\"col\":139,\"line\":186},\"startBody\":{\"col\":22,\"line\":161},\"endBody\":{\"col\":139,\"line\":186}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 布尔类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\nexport const JsonView = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 树形数据配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\",\"locationsMap\":{\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":54},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":54}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":56},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":20,\"line\":56},\"endBody\":{\"col\":1,\"line\":72}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":74},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":18,\"line\":74},\"endBody\":{\"col\":1,\"line\":120}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":121},\"endLoc\":{\"col\":1,\"line\":137},\"startBody\":{\"col\":24,\"line\":121},\"endBody\":{\"col\":1,\"line\":137}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":139},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":22,\"line\":139},\"endBody\":{\"col\":1,\"line\":164}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 字符串类型 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        xComponent={'select'}\n        dataSource={[\n          {\n            label: 'A',\n            value: 'A',\n          },\n          {\n            label: 'B',\n            value: 'B',\n          },\n        ]}\n      />\n      <RdxFormItem\n        name='C'\n        title='输入框'\n        type={'string'}\n        xComponent={'code'}\n      />\n      <RdxFormItem\n        name='D'\n        title='输入框'\n        type={'string'}\n        xComponent={'color'}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 布尔类型 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\n      <RdxFormItem\n        name='B'\n        title='复选框'\n        type={'boolean'}\n        xComponent={XComponentType.Checkbox}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 数组 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      <RdxFormItem\n        name='B'\n        title='卡片数组'\n        type={'array'}\n        xComponent={XComponentType.ArrayTable}\n      >\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\nexport const JsonView = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'string'}\n        xComponent={'json'}\n        default={JSON.stringify({ a: 1, b: 2 })}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 树形数据配置 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'array'}\n        xComponent={XComponentType.Tree}\n      >\n        <RdxFormItem\n          type={BaseType.Object}\n          default={() => {\n            return { id: Math.random(), a: 1, b: 2 };\n          }}\n        >\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"基本示例-物料列表--字符串类型":{startLoc:{col:21,line:60},endLoc:{col:277,line:98},startBody:{col:21,line:60},endBody:{col:277,line:98}},"基本示例-物料列表--布尔类型":{startLoc:{col:20,line:100},endLoc:{col:277,line:116},startBody:{col:20,line:100},endBody:{col:277,line:116}},"基本示例-物料列表--数组":{startLoc:{col:18,line:118},endLoc:{col:277,line:164},startBody:{col:18,line:118},endBody:{col:277,line:164}},"基本示例-物料列表--json-view":{startLoc:{col:24,line:165},endLoc:{col:277,line:181},startBody:{col:24,line:165},endBody:{col:277,line:181}},"基本示例-物料列表--树形数据配置":{startLoc:{col:22,line:183},endLoc:{col:277,line:208},startBody:{col:22,line:183},endBody:{col:277,line:208}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 布尔类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\nexport const JsonView = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 树形数据配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":54},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":54}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":56},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":20,\"line\":56},\"endBody\":{\"col\":1,\"line\":72}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":74},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":18,\"line\":74},\"endBody\":{\"col\":1,\"line\":120}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":121},\"endLoc\":{\"col\":1,\"line\":137},\"startBody\":{\"col\":24,\"line\":121},\"endBody\":{\"col\":1,\"line\":137}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":139},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":22,\"line\":139},\"endBody\":{\"col\":1,\"line\":164}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/formSample.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport {\n  RdxFormContext,\n  RdxFormItem,\n  XComponentType,\n  BaseType,\n} from '@czwcode/rdx-next-form';\nimport { Icon } from '@alifd/next';\nexport default {\n  title: '基本示例|物料列表',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport {\\n  RdxFormContext,\\n  RdxFormItem,\\n  XComponentType,\\n  BaseType,\\n} from '@czwcode/rdx-next-form';\\nimport { Icon } from '@alifd/next';\\nexport default {\\n  title: '基本示例|物料列表',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 字符串类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        xComponent={'select'}\\n        dataSource={[\\n          {\\n            label: 'A',\\n            value: 'A',\\n          },\\n          {\\n            label: 'B',\\n            value: 'B',\\n          },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='C'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'code'}\\n      />\\n      <RdxFormItem\\n        name='D'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'color'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 布尔类型 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\\n      <RdxFormItem\\n        name='B'\\n        title='复选框'\\n        type={'boolean'}\\n        xComponent={XComponentType.Checkbox}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <RdxFormItem\\n        name='B'\\n        title='卡片数组'\\n        type={'array'}\\n        xComponent={XComponentType.ArrayTable}\\n      >\\n        <RdxFormItem type={BaseType.Object}>\\n          <RdxFormItem\\n            type='string'\\n            title='字段1'\\n            name='a'\\n            default={'字段1'}\\n          ></RdxFormItem>\\n          <RdxFormItem\\n            type='string'\\n            title='字段2'\\n            name='b'\\n            default={'字段2'}\\n          ></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\nexport const JsonView = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'string'}\\n        xComponent={'json'}\\n        default={JSON.stringify({ a: 1, b: 2 })}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 树形数据配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(value);\\n      }}\\n    >\\n      <RdxFormItem\\n        name='A'\\n        title='输入框'\\n        type={'array'}\\n        xComponent={XComponentType.Tree}\\n      >\\n        <RdxFormItem\\n          type={BaseType.Object}\\n          default={() => {\\n            return { id: Math.random(), a: 1, b: 2 };\\n          }}\\n        >\\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\",\"locationsMap\":{\"基本示例-物料列表--字符串类型\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":54},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":54}},\"基本示例-物料列表--布尔类型\":{\"startLoc\":{\"col\":20,\"line\":56},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":20,\"line\":56},\"endBody\":{\"col\":1,\"line\":72}},\"基本示例-物料列表--数组\":{\"startLoc\":{\"col\":18,\"line\":74},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":18,\"line\":74},\"endBody\":{\"col\":1,\"line\":120}},\"基本示例-物料列表--json-view\":{\"startLoc\":{\"col\":24,\"line\":121},\"endLoc\":{\"col\":1,\"line\":137},\"startBody\":{\"col\":24,\"line\":121},\"endBody\":{\"col\":1,\"line\":137}},\"基本示例-物料列表--树形数据配置\":{\"startLoc\":{\"col\":22,\"line\":139},\"endLoc\":{\"col\":1,\"line\":164},\"startBody\":{\"col\":22,\"line\":139},\"endBody\":{\"col\":1,\"line\":164}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 字符串类型 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        xComponent={'select'}\n        dataSource={[\n          {\n            label: 'A',\n            value: 'A',\n          },\n          {\n            label: 'B',\n            value: 'B',\n          },\n        ]}\n      />\n      <RdxFormItem\n        name='C'\n        title='输入框'\n        type={'string'}\n        xComponent={'code'}\n      />\n      <RdxFormItem\n        name='D'\n        title='输入框'\n        type={'string'}\n        xComponent={'color'}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 布尔类型 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\n      <RdxFormItem\n        name='B'\n        title='复选框'\n        type={'boolean'}\n        xComponent={XComponentType.Checkbox}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 数组 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      <RdxFormItem\n        name='B'\n        title='卡片数组'\n        type={'array'}\n        xComponent={XComponentType.ArrayTable}\n      >\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\nexport const JsonView = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'string'}\n        xComponent={'json'}\n        default={JSON.stringify({ a: 1, b: 2 })}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 树形数据配置 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'array'}\n        xComponent={XComponentType.Tree}\n      >\n        <RdxFormItem\n          type={BaseType.Object}\n          default={() => {\n            return { id: Math.random(), a: 1, b: 2 };\n          }}\n        >\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"基本示例-物料列表--字符串类型":{startLoc:{col:21,line:38},endLoc:{col:139,line:76},startBody:{col:21,line:38},endBody:{col:139,line:76}},"基本示例-物料列表--布尔类型":{startLoc:{col:20,line:78},endLoc:{col:139,line:94},startBody:{col:20,line:78},endBody:{col:139,line:94}},"基本示例-物料列表--数组":{startLoc:{col:18,line:96},endLoc:{col:139,line:142},startBody:{col:18,line:96},endBody:{col:139,line:142}},"基本示例-物料列表--json-view":{startLoc:{col:24,line:143},endLoc:{col:139,line:159},startBody:{col:24,line:143},endBody:{col:139,line:159}},"基本示例-物料列表--树形数据配置":{startLoc:{col:22,line:161},endLoc:{col:139,line:186},startBody:{col:22,line:161},endBody:{col:139,line:186}}}},storySource:{source:"import React from 'react';\nimport {\n  RdxFormContext,\n  RdxFormItem,\n  XComponentType,\n  BaseType,\n} from '@czwcode/rdx-next-form';\nimport { Icon } from '@alifd/next';\nexport default {\n  title: '基本示例|物料列表',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 字符串类型 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        xComponent={'select'}\n        dataSource={[\n          {\n            label: 'A',\n            value: 'A',\n          },\n          {\n            label: 'B',\n            value: 'B',\n          },\n        ]}\n      />\n      <RdxFormItem\n        name='C'\n        title='输入框'\n        type={'string'}\n        xComponent={'code'}\n      />\n      <RdxFormItem\n        name='D'\n        title='输入框'\n        type={'string'}\n        xComponent={'color'}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 布尔类型 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='开关' type={'boolean'} />\n      <RdxFormItem\n        name='B'\n        title='复选框'\n        type={'boolean'}\n        xComponent={XComponentType.Checkbox}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem name='A' title='表格数组' type={'array'}>\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      <RdxFormItem\n        name='B'\n        title='卡片数组'\n        type={'array'}\n        xComponent={XComponentType.ArrayTable}\n      >\n        <RdxFormItem type={BaseType.Object}>\n          <RdxFormItem\n            type='string'\n            title='字段1'\n            name='a'\n            default={'字段1'}\n          ></RdxFormItem>\n          <RdxFormItem\n            type='string'\n            title='字段2'\n            name='b'\n            default={'字段2'}\n          ></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\nexport const JsonView = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'string'}\n        xComponent={'json'}\n        default={JSON.stringify({ a: 1, b: 2 })}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 树形数据配置 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(value);\n      }}\n    >\n      <RdxFormItem\n        name='A'\n        title='输入框'\n        type={'array'}\n        xComponent={XComponentType.Tree}\n      >\n        <RdxFormItem\n          type={BaseType.Object}\n          default={() => {\n            return { id: Math.random(), a: 1, b: 2 };\n          }}\n        >\n          <RdxFormItem type='string' title='字段1' name='a'></RdxFormItem>\n          <RdxFormItem type='string' title='字段2' name='b'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n",locationsMap:{"基本示例-物料列表--字符串类型":{startLoc:{col:21,line:16},endLoc:{col:1,line:54},startBody:{col:21,line:16},endBody:{col:1,line:54}},"基本示例-物料列表--布尔类型":{startLoc:{col:20,line:56},endLoc:{col:1,line:72},startBody:{col:20,line:56},endBody:{col:1,line:72}},"基本示例-物料列表--数组":{startLoc:{col:18,line:74},endLoc:{col:1,line:120},startBody:{col:18,line:74},endBody:{col:1,line:120}},"基本示例-物料列表--json-view":{startLoc:{col:24,line:121},endLoc:{col:1,line:137},startBody:{col:24,line:121},endBody:{col:1,line:137}},"基本示例-物料列表--树形数据配置":{startLoc:{col:22,line:139},endLoc:{col:1,line:164},startBody:{col:22,line:139},endBody:{col:1,line:164}}}},info:{inline:!0}}};const 字符串类型=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__.a,{onChange:value=>{console.log(value)}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"A",title:"输入框",type:"string"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"B",title:"下拉框",type:"string",xComponent:"select",dataSource:[{label:"A",value:"A"},{label:"B",value:"B"}]}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"C",title:"输入框",type:"string",xComponent:"code"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"D",title:"输入框",type:"string",xComponent:"color"})),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),布尔类型=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__.a,{onChange:value=>{console.log(value)}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"A",title:"开关",type:"boolean"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"B",title:"复选框",type:"boolean",xComponent:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_3__.XComponentType.Checkbox})),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),数组=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__.a,{onChange:value=>{console.log(value)}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"A",title:"表格数组",type:"array"},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_4__.a.Object},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段1",name:"a",default:"字段1"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段2",name:"b",default:"字段2"}))),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"B",title:"卡片数组",type:"array",xComponent:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_3__.XComponentType.ArrayTable},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_4__.a.Object},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段1",name:"a",default:"字段1"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段2",name:"b",default:"字段2"})))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),JsonView=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__.a,{onChange:value=>{console.log(value)}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"A",title:"输入框",type:"string",xComponent:"json",default:JSON.stringify({a:1,b:2})})),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),树形数据配置=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_1__.a,{onChange:value=>{console.log(value)}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{name:"A",title:"输入框",type:"array",xComponent:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_3__.XComponentType.Tree},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_4__.a.Object,default:()=>({id:Math.random(),a:1,b:2})},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段1",name:"a"}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_czwcode_rdx_next_form__WEBPACK_IMPORTED_MODULE_2__.b,{type:"string",title:"字段2",name:"b"})))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/formSample.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2257:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"FormItemSample",(function(){return FormItemSample}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),_uform_next__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(254),_alifd_next__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(57),addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories"),__STORY__="import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nexport default {\n  title: '基本示例|UFormTest',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const FormItemSample = () => {\n  const d1 = [{ label: 1, value: 1 }];\n  const d2 = [{ label: 2, value: 2 }];\n  const [state, setState] = useState(d1);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setState(d2);\n        }}\n      >\n        点击切换数据源\n      </Button>\n      <SchemaForm onChange={(value) => {\n        console.log('value: ', value);\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\n        <SchemaMarkupField\n          title='数组'\n          name='array'\n          maxItems={3}\n          type='array'\n          x-props={{\n            renderAddition: '这是定制的添加文案',\n            renderRemove: '这是定制的删除文案',\n          }}\n        >\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\n          </SchemaMarkupField>\n        </SchemaMarkupField>\n      </SchemaForm>\n    </div>\n  );\n};\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",__ADDS_MAP__={"基本示例-uformtest--form-item-sample":{startLoc:{col:30,line:12},endLoc:{col:1,line:46},startBody:{col:30,line:12},endBody:{col:1,line:46}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"基本示例|UFormTest",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nexport default {\\\\n  title: '基本示例|UFormTest',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const FormItemSample = () => {\\\\n  const d1 = [{ label: 1, value: 1 }];\\\\n  const d2 = [{ label: 2, value: 2 }];\\\\n  const [state, setState] = useState(d1);\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState(d2);\\\\n        }}\\\\n      >\\\\n        点击切换数据源\\\\n      </Button>\\\\n      <SchemaForm onChange={(value) => {\\\\n        console.log('value: ', value);\\\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\\\n        <SchemaMarkupField\\\\n          title='数组'\\\\n          name='array'\\\\n          maxItems={3}\\\\n          type='array'\\\\n          x-props={{\\\\n            renderAddition: '这是定制的添加文案',\\\\n            renderRemove: '这是定制的删除文案',\\\\n          }}\\\\n        >\\\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\\\n          </SchemaMarkupField>\\\\n        </SchemaMarkupField>\\\\n      </SchemaForm>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-uformtest--form-item-sample\\\":{\\\"startLoc\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":46},\\\"startBody\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":46}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/uFormTest.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nexport default {\\\\n  title: '基本示例|UFormTest',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const FormItemSample = () => {\\\\n  const d1 = [{ label: 1, value: 1 }];\\\\n  const d2 = [{ label: 2, value: 2 }];\\\\n  const [state, setState] = useState(d1);\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState(d2);\\\\n        }}\\\\n      >\\\\n        点击切换数据源\\\\n      </Button>\\\\n      <SchemaForm onChange={(value) => {\\\\n        console.log('value: ', value);\\\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\\\n        <SchemaMarkupField\\\\n          title='数组'\\\\n          name='array'\\\\n          maxItems={3}\\\\n          type='array'\\\\n          x-props={{\\\\n            renderAddition: '这是定制的添加文案',\\\\n            renderRemove: '这是定制的删除文案',\\\\n          }}\\\\n        >\\\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\\\n          </SchemaMarkupField>\\\\n        </SchemaMarkupField>\\\\n      </SchemaForm>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-uformtest--form-item-sample\\\":{\\\"startLoc\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":46},\\\"startBody\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":46}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = addSourceDecorator(() => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":139,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":139,\"line\":68}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/uFormTest.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = () => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":12},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":30,\"line\":12},\"endBody\":{\"col\":1,\"line\":46}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/uFormTest.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nexport default {\n  title: '基本示例|UFormTest',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nexport default {\\\\n  title: '基本示例|UFormTest',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const FormItemSample = () => {\\\\n  const d1 = [{ label: 1, value: 1 }];\\\\n  const d2 = [{ label: 2, value: 2 }];\\\\n  const [state, setState] = useState(d1);\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState(d2);\\\\n        }}\\\\n      >\\\\n        点击切换数据源\\\\n      </Button>\\\\n      <SchemaForm onChange={(value) => {\\\\n        console.log('value: ', value);\\\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\\\n        <SchemaMarkupField\\\\n          title='数组'\\\\n          name='array'\\\\n          maxItems={3}\\\\n          type='array'\\\\n          x-props={{\\\\n            renderAddition: '这是定制的添加文案',\\\\n            renderRemove: '这是定制的删除文案',\\\\n          }}\\\\n        >\\\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\\\n          </SchemaMarkupField>\\\\n        </SchemaMarkupField>\\\\n      </SchemaForm>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-uformtest--form-item-sample\\\":{\\\"startLoc\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":46},\\\"startBody\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":46}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/uFormTest.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nexport default {\\\\n  title: '基本示例|UFormTest',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const FormItemSample = () => {\\\\n  const d1 = [{ label: 1, value: 1 }];\\\\n  const d2 = [{ label: 2, value: 2 }];\\\\n  const [state, setState] = useState(d1);\\\\n  return (\\\\n    <div>\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState(d2);\\\\n        }}\\\\n      >\\\\n        点击切换数据源\\\\n      </Button>\\\\n      <SchemaForm onChange={(value) => {\\\\n        console.log('value: ', value);\\\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\\\n        <SchemaMarkupField\\\\n          title='数组'\\\\n          name='array'\\\\n          maxItems={3}\\\\n          type='array'\\\\n          x-props={{\\\\n            renderAddition: '这是定制的添加文案',\\\\n            renderRemove: '这是定制的删除文案',\\\\n          }}\\\\n        >\\\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\\\n          </SchemaMarkupField>\\\\n        </SchemaMarkupField>\\\\n      </SchemaForm>\\\\n    </div>\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-uformtest--form-item-sample\\\":{\\\"startLoc\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":46},\\\"startBody\\\":{\\\"col\\\":30,\\\"line\\\":12},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":46}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = addSourceDecorator(() => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":34},\"endLoc\":{\"col\":139,\"line\":68},\"startBody\":{\"col\":30,\"line\":34},\"endBody\":{\"col\":139,\"line\":68}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = () => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":12},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":30,\"line\":12},\"endBody\":{\"col\":1,\"line\":46}}}},\n    info: { inline: true },\n  },\n};\n\nexport const FormItemSample = addSourceDecorator(addSourceDecorator(() => {\n  const d1 = [{ label: 1, value: 1 }];\n  const d2 = [{ label: 2, value: 2 }];\n  const [state, setState] = useState(d1);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setState(d2);\n        }}\n      >\n        点击切换数据源\n      </Button>\n      <SchemaForm onChange={(value) => {\n        console.log('value: ', value);\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\n        <SchemaMarkupField\n          title='数组'\n          name='array'\n          maxItems={3}\n          type='array'\n          x-props={{\n            renderAddition: '这是定制的添加文案',\n            renderRemove: '这是定制的删除文案',\n          }}\n        >\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\n          </SchemaMarkupField>\n        </SchemaMarkupField>\n      </SchemaForm>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-uformtest--form-item-sample":{startLoc:{col:30,line:56},endLoc:{col:277,line:90},startBody:{col:30,line:56},endBody:{col:277,line:90}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = () => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":12},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":30,\"line\":12},\"endBody\":{\"col\":1,\"line\":46}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/uFormTest.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nexport default {\n  title: '基本示例|UFormTest',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nexport default {\\n  title: '基本示例|UFormTest',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const FormItemSample = () => {\\n  const d1 = [{ label: 1, value: 1 }];\\n  const d2 = [{ label: 2, value: 2 }];\\n  const [state, setState] = useState(d1);\\n  return (\\n    <div>\\n      <Button\\n        onClick={() => {\\n          setState(d2);\\n        }}\\n      >\\n        点击切换数据源\\n      </Button>\\n      <SchemaForm onChange={(value) => {\\n        console.log('value: ', value);\\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\\n        <SchemaMarkupField\\n          title='数组'\\n          name='array'\\n          maxItems={3}\\n          type='array'\\n          x-props={{\\n            renderAddition: '这是定制的添加文案',\\n            renderRemove: '这是定制的删除文案',\\n          }}\\n        >\\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\\n          </SchemaMarkupField>\\n        </SchemaMarkupField>\\n      </SchemaForm>\\n    </div>\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-uformtest--form-item-sample\":{\"startLoc\":{\"col\":30,\"line\":12},\"endLoc\":{\"col\":1,\"line\":46},\"startBody\":{\"col\":30,\"line\":12},\"endBody\":{\"col\":1,\"line\":46}}}},\n    info: { inline: true },\n  },\n};\n\nexport const FormItemSample = addSourceDecorator(() => {\n  const d1 = [{ label: 1, value: 1 }];\n  const d2 = [{ label: 2, value: 2 }];\n  const [state, setState] = useState(d1);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setState(d2);\n        }}\n      >\n        点击切换数据源\n      </Button>\n      <SchemaForm onChange={(value) => {\n        console.log('value: ', value);\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\n        <SchemaMarkupField\n          title='数组'\n          name='array'\n          maxItems={3}\n          type='array'\n          x-props={{\n            renderAddition: '这是定制的添加文案',\n            renderRemove: '这是定制的删除文案',\n          }}\n        >\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\n          </SchemaMarkupField>\n        </SchemaMarkupField>\n      </SchemaForm>\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-uformtest--form-item-sample":{startLoc:{col:30,line:34},endLoc:{col:139,line:68},startBody:{col:30,line:34},endBody:{col:139,line:68}}}},storySource:{source:"import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nexport default {\n  title: '基本示例|UFormTest',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const FormItemSample = () => {\n  const d1 = [{ label: 1, value: 1 }];\n  const d2 = [{ label: 2, value: 2 }];\n  const [state, setState] = useState(d1);\n  return (\n    <div>\n      <Button\n        onClick={() => {\n          setState(d2);\n        }}\n      >\n        点击切换数据源\n      </Button>\n      <SchemaForm onChange={(value) => {\n        console.log('value: ', value);\n      }}initialValues={{}} onSubmit={(v) => console.log(v)}>\n        <SchemaMarkupField\n          title='数组'\n          name='array'\n          maxItems={3}\n          type='array'\n          x-props={{\n            renderAddition: '这是定制的添加文案',\n            renderRemove: '这是定制的删除文案',\n          }}\n        >\n          <SchemaMarkupField type='object' default={{ aa: 33}}>\n            <SchemaMarkupField name='aa' type='string' title='字段1' default={11}/>\n            <SchemaMarkupField name='bb' type='string' title='字段2' default={22}/>\n          </SchemaMarkupField>\n        </SchemaMarkupField>\n      </SchemaForm>\n    </div>\n  );\n};\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-uformtest--form-item-sample":{startLoc:{col:30,line:12},endLoc:{col:1,line:46},startBody:{col:30,line:12},endBody:{col:1,line:46}}}},info:{inline:!0}}};const FormItemSample=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const d2=[{label:2,value:2}],[state,setState]=Object(react__WEBPACK_IMPORTED_MODULE_0__.useState)([{label:1,value:1}]);return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_2__.a,{onClick:()=>{setState(d2)}},"点击切换数据源"),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_uform_next__WEBPACK_IMPORTED_MODULE_1__.SchemaForm,{onChange:value=>{console.log("value: ",value)},initialValues:{},onSubmit:v=>console.log(v)},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_uform_next__WEBPACK_IMPORTED_MODULE_1__.SchemaMarkupField,{title:"数组",name:"array",maxItems:3,type:"array","x-props":{renderAddition:"这是定制的添加文案",renderRemove:"这是定制的删除文案"}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_uform_next__WEBPACK_IMPORTED_MODULE_1__.SchemaMarkupField,{type:"object",default:{aa:33}},react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_uform_next__WEBPACK_IMPORTED_MODULE_1__.SchemaMarkupField,{name:"aa",type:"string",title:"字段1",default:11}),react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_uform_next__WEBPACK_IMPORTED_MODULE_1__.SchemaMarkupField,{name:"bb",type:"string",title:"字段2",default:22})))))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/uFormTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/uFormTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/uFormTest.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2347:function(module,exports){function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=function(){return[]},webpackEmptyContext.resolve=webpackEmptyContext,module.exports=webpackEmptyContext,webpackEmptyContext.id=2347},2349:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"基础表单",(function(){return 基础表单})),__webpack_require__.d(__webpack_exports__,"表单对象",(function(){return 表单对象})),__webpack_require__.d(__webpack_exports__,"多对象嵌套",(function(){return 多对象嵌套})),__webpack_require__.d(__webpack_exports__,"非受控例子",(function(){return 非受控例子})),__webpack_require__.d(__webpack_exports__,"默认值配置",(function(){return 默认值配置})),__webpack_require__.d(__webpack_exports__,"受控例子",(function(){return 受控例子})),__webpack_require__.d(__webpack_exports__,"联动例子",(function(){return 联动例子})),__webpack_require__.d(__webpack_exports__,"展示隐藏",(function(){return 展示隐藏})),__webpack_require__.d(__webpack_exports__,"数组对象",(function(){return 数组对象})),__webpack_require__.d(__webpack_exports__,"字符串数组",(function(){return 字符串数组})),__webpack_require__.d(__webpack_exports__,"字符串多层嵌套数组",(function(){return 字符串多层嵌套数组})),__webpack_require__.d(__webpack_exports__,"强依赖关系",(function(){return 强依赖关系}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),es=__webpack_require__(560),global=(__webpack_require__(2229),__webpack_require__(306)),typings_global=__webpack_require__(144);const baseTabItemStyle={background:"#eee",border:"none",cursor:"pointer",padding:"14px 16px",fontSize:17,color:"rgb(170,170,170)"},activeStyle={background:"rgb(33, 150, 243)",color:"white"};var graph_Tab=props=>{const{onChange:onChange,defaultActive:defaultActive,dataSource:dataSource,children:children}=props,[realActive,setRealActive]=react.useState(defaultActive);return react.createElement("div",{style:{width:"100%",overflowX:"hidden"}},react.createElement("div",{style:{display:"flex",justifyContent:"center"}},dataSource.map(row=>{const isActive=row.value===realActive;return react.createElement("button",{style:Object.assign(Object.assign({},baseTabItemStyle),isActive?activeStyle:{}),onClick:()=>{onChange(),setRealActive(row.value)}},row.label)})),react.createElement("div",{style:{display:"flex",justifyContent:"center"}},dataSource.map(item=>{const isActive=item.value===realActive;return react.createElement("div",null,children&&isActive&&children(item.value,item))})))};const NewSlider=Object(es.a)(es.b);var DISPLAY_STATE;!function(DISPLAY_STATE){DISPLAY_STATE.CANCEL="CANCEL",DISPLAY_STATE.CONFLICT="CONFLICT"}(DISPLAY_STATE||(DISPLAY_STATE={}));const stateColors={[typings_global.a.Error]:"red",[typings_global.a.Waiting]:"rgb(230,189,45)",[typings_global.a.Finish]:"grey",[typings_global.a.IDeal]:"grey",[DISPLAY_STATE.CANCEL]:"pink",[DISPLAY_STATE.CONFLICT]:"purple",init:"rgb(165, 189,249)"};typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,DISPLAY_STATE.CANCEL,DISPLAY_STATE.CONFLICT;var GraphType;!function(GraphType){GraphType.Global="Global",GraphType.PreRunning="PreRunning",GraphType.Trigger="Trigger",GraphType.EffectPoints="EffectPoints",GraphType.ConflictPoints="ConflictPoints",GraphType.AllPointsNow="AllPointsNow",GraphType.RunnningPointsNotCut="RunnningPointsNotCut",GraphType.BuildDAG="BuildDAG",GraphType.RunnningPointsCut="RunnningPointsCut"}(GraphType||(GraphType={}));class Graph_Graph extends react.Component{constructor(props){super(props),this.snapShots=[],this.state={version:0,visible:!1,statusVersion:0}}getDefaultSnapShot(eventType){return{type:eventType,graph:[],preRunningPoints:[],triggerPoints:[],effectPoints:[],conflictPoints:[],currentAllPoints:[],edgeCutFlow:[],currentRunningPoints:[],status:[]}}initSnapShot(type){this.temporarySnapShots&&this.snapShots.push(this.temporarySnapShots),this.temporarySnapShots=Object.assign({},this.getDefaultSnapShot(type))}componentDidMount(){this.props.context.subject.on(global.b.Init,process=>{this.initSnapShot(global.b.Init)}),this.props.context.subject.on(global.b.EventTrigger,process=>{this.initSnapShot(global.b.EventTrigger)}),this.props.context.subject.on(global.b.BatchEventTrigger,process=>{this.initSnapShot(global.b.BatchEventTrigger)}),this.props.context.subject.on(global.b.TaskChange,process=>{this.initSnapShot(global.b.TaskChange)}),this.props.context.subject.on(global.b.ProcessRunningGraph,process=>{this.temporarySnapShots=Object.assign(Object.assign({},this.temporarySnapShots),process);const{currentRunningPoints:currentRunningPoints}=process;0===currentRunningPoints.length&&this.setState({version:this.snapShots.length,statusVersion:0})}),this.props.context.subject.on(global.b.StatusChange,process=>{this.temporarySnapShots.status.push(process);const currentVersion=this.snapShots.length;this.setState({version:currentVersion,statusVersion:0}),this.initRunningDeliverGraph(this.getSnapShot(currentVersion))})}getSnapShot(version){return version===this.snapShots.length?this.temporarySnapShots||this.getDefaultSnapShot(""):this.snapShots[version]||this.getDefaultSnapShot("")}componentWillUnmount(){const ee=this.props.context.subject;ee.removeAllListeners(global.b.Init),ee.removeAllListeners(global.b.EventTrigger),ee.removeAllListeners(global.b.ProcessRunningGraph),ee.removeAllListeners(global.b.StatusChange),ee.removeAllListeners(global.b.TaskChange)}resetStatus(version,statusVersion){const current=this.getSnapShot(version);this.initRunningDeliverGraph(current)}getMarks(){let marks={};for(let index=0;index<this.snapShots.length+1;index++){const type=`(${this.getSnapShot(index).type})`;this.snapShots.length===index?marks[index]="最新版本"+type:marks[index]=`v-${index}${type}`}return marks}getStatusMarks(){let marks={};for(let index=0;index<this.getSnapShot(this.state.version).status.length+1;index++)this.getSnapShot(this.state.version).status.length===index?marks[index]="最新状态":marks[index]="s-"+index;return marks}render(){const tabs=[{label:"全局关系图",value:GraphType.Global},{label:"新的节点构建过程",value:"ProcessPoint",children:[{label:"运行时图(旧)",value:GraphType.PreRunning},{label:"触发节点",value:GraphType.Trigger},{label:"触发新的点",value:GraphType.EffectPoints},{label:"冲突的点",value:GraphType.ConflictPoints}]},{label:"边的构建过程",value:"ProcessEdges",children:[{label:"运行图(去边前依赖关系)",value:GraphType.RunnningPointsNotCut},{label:"构建DAG",value:GraphType.BuildDAG}]},{label:"运行时图",value:GraphType.RunnningPointsCut}];return react.createElement("div",null,react.createElement("div",{style:{display:"inline-block",textDecoration:"none",background:"#87befd",color:"#FFF",width:"120px",position:"fixed",top:50,right:30,height:"120px",lineHeight:"120px",borderRadius:"50%",textAlign:"center",cursor:"pointer",verticalAlign:"middle",overflow:"hidden",transition:".4s"},onClick:()=>{this.setState({visible:!this.state.visible})}},"查看链路"),this.state.visible&&react.createElement("div",{style:{position:"fixed",bottom:0,zIndex:1e3,height:"50%",width:"100%",right:0,display:"flex",padding:"24px 12px 40px 12px",borderRadius:10,background:"white",boxShadow:"rgba(0,0,0,0.10) 0 1px 3px 0",border:"1px solid rgba(0,0,0,.1)",overflow:"auto",whiteSpace:"nowrap"}},react.createElement("div",{style:{width:"100%",display:"flex",alignItems:"center",flexDirection:"column"}},react.createElement("div",{style:{width:"100%"}},react.createElement(NewSlider,{min:0,max:this.snapShots.length,value:this.state.version,dots:!0,marks:this.getMarks(),onChange:value=>{this.setState({version:value},()=>{this.resetStatus(value,0)})},tipFormatter:value=>"版本V"+value})),react.createElement("div",{style:{marginTop:30,width:"100%"}},"状态选则"," ",react.createElement(NewSlider,{min:0,max:this.getSnapShot(this.state.version).status.length,value:this.state.statusVersion,dots:!0,marks:this.getStatusMarks(),onChange:value=>{this.setState({statusVersion:value},()=>{this.resetStatus(this.state.version,value)})},tipFormatter:value=>"状态V-"+value})),react.createElement("div",{style:{marginTop:30}},react.createElement(graph_Tab,{onChange:()=>{setTimeout(()=>{this.initRunningDeliverGraph(this.getSnapShot(this.state.version))},500)},defaultActive:GraphType.RunnningPointsCut,dataSource:tabs},(key,row)=>react.createElement("div",{style:{display:"flex",width:"100%"}},row.children?row.children.map(item=>react.createElement("div",null,react.createElement("strong",null,item.label),react.createElement("div",{ref:g=>{this[item.value]=g},style:{width:100/row.children.length+"vw",height:200,border:"2px dashed lightgrey"}}))):react.createElement("div",{ref:g=>{this[key]=g},style:{width:500,height:200,border:"2px dashed lightgrey"}})))))))}}var DataPersistence_DISPLAY_STATE,echarts=__webpack_require__(1004),echarts_default=__webpack_require__.n(echarts),shareContext=__webpack_require__(125),utils=__webpack_require__(127),src_utils=__webpack_require__(126),EchartsGraph=()=>react_default.a.createElement(shareContext.b,null,context=>react_default.a.createElement(EchartsGraph_ChartsRenderer,{context:context}));class EchartsGraph_ChartsRenderer extends Graph_Graph{getRef(type){return this[type]}drawGraphCommon(type,points){!function drawGraph(ref,data,edges=[]){if(ref){const echartsInstance=echarts_default.a.init(ref);echartsInstance.resize(),echartsInstance.setOption({series:[{type:"graph",roam:!0,layout:"force",animation:!1,edgeSymbol:["circle","arrow"],symbolSize:50,edgeSymbolSize:[4,10],data:data,force:{initLayout:"circular",repulsion:100,edgeLength:100},links:edges}]})}}(this.getRef(type),points.map(item=>({id:item.key,name:item.key,itemStyle:{color:stateColors[item.status]||stateColors[typings_global.a.IDeal]},label:{formatter:params=>{const name=params.name;return name.length>10?name.slice(0,10)+"...":name},show:!0}})),Object(utils.d)(points).reduce((arr,item)=>arr.concat((item.deps||[]).map(dep=>{const label=dep.label;return{source:dep.id,target:item.id,label:{formatter:()=>label,show:label},lineStyle:{color:label&&"red",type:label?"dashed":"solid",curveness:.2}}})),[]))}drawGlobal(info){const{graph:graph}=info;this.drawGraphCommon(GraphType.Global,graph)}drawPreRunning(info){const{preRunningPoints:preRunningPoints}=info;this.drawGraphCommon(GraphType.PreRunning,preRunningPoints)}drawRunning(info){const{currentRunningPoints:currentRunningPoints,status:status}=info,statusMap=Object(src_utils.a)(status.slice(0,this.state.statusVersion),item=>item.id);this.drawGraphCommon(GraphType.RunnningPointsCut,currentRunningPoints.map(item=>Object.assign(Object.assign({},item),{status:statusMap.has(item.key)&&stateColors[statusMap.get(item.key).status]?stateColors[statusMap.get(item.key).status]:typings_global.a.Waiting})))}drawTriggerPoints(info){const{triggerPoints:triggerPoints}=info;this.drawGraphCommon(GraphType.Trigger,triggerPoints)}drawRunnningPointsNotCut(info){const{currentAllPoints:currentAllPoints}=info;this.drawGraphCommon(GraphType.RunnningPointsNotCut,currentAllPoints)}drawEffectPoints(info){const{effectPoints:effectPoints}=info;this.drawGraphCommon(GraphType.EffectPoints,effectPoints.map(item=>({key:item,status:typings_global.a.IDeal})))}drawConflictPoints(info){const{conflictPoints:conflictPoints}=info;this.drawGraphCommon(GraphType.ConflictPoints,conflictPoints.map(item=>({key:item,status:DISPLAY_STATE.CONFLICT})))}drawBuildDAG(info){const{currentAllPoints:currentAllPoints,edgeCutFlow:edgeCutFlow}=info,edgeMap=Object(src_utils.a)(edgeCutFlow.reduce((arr,item)=>arr.concat(item.edges),[]),item=>`${item.source}---${item.target}`),points=currentAllPoints.map(point=>{const{key:key,deps:deps=[]}=point;return Object.assign(Object.assign({},point),{deps:deps.map(item=>{let normalizeItem="string"==typeof item?{id:item,weight:1}:item;const edgeInfo=edgeMap.get(`${normalizeItem.id}---${key}`)||{};return Object.assign(Object.assign({},normalizeItem),{label:edgeInfo.reasonType&&"原因："+edgeInfo.reasonType})})})});this.drawGraphCommon(GraphType.BuildDAG,points)}initRunningDeliverGraph(info){this.drawGlobal(info),this.drawPreRunning(info),this.drawRunning(info),this.drawTriggerPoints(info),this.drawEffectPoints(info),this.drawConflictPoints(info),this.drawRunnningPointsNotCut(info),this.drawBuildDAG(info)}}!function(DISPLAY_STATE){DISPLAY_STATE.CANCEL="CANCEL",DISPLAY_STATE.CONFLICT="CONFLICT"}(DataPersistence_DISPLAY_STATE||(DataPersistence_DISPLAY_STATE={}));typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,typings_global.a.IDeal,DataPersistence_DISPLAY_STATE.CANCEL,DataPersistence_DISPLAY_STATE.CONFLICT,typings_global.a.Error,typings_global.a.Waiting,typings_global.a.Finish,DataPersistence_DISPLAY_STATE.CANCEL,DataPersistence_DISPLAY_STATE.CONFLICT;var DataPersistence_GraphType;!function(GraphType){GraphType.Global="Global",GraphType.PreRunning="PreRunning",GraphType.Trigger="Trigger",GraphType.EffectPoints="EffectPoints",GraphType.ConflictPoints="ConflictPoints",GraphType.AllPointsNow="AllPointsNow",GraphType.RunnningPointsNotCut="RunnningPointsNotCut",GraphType.BuildDAG="BuildDAG",GraphType.RunnningPointsCut="RunnningPointsCut"}(DataPersistence_GraphType||(DataPersistence_GraphType={}));var DataPersistence=()=>{const context=react.useContext(shareContext.c),[state,setState]=react.useState({snapShots:[],temporarySnapShots:null}),setStateProxy=callback=>{setState(state=>Object.assign(Object.assign({},state),callback(state)))},initSnapShot=react.useCallback(type=>{setStateProxy(state=>{return{snapShots:[...state.snapShots,state.temporarySnapShots],temporarySnapShots:(eventType=type,{type:eventType,graph:[],preRunningPoints:[],triggerPoints:[],effectPoints:[],conflictPoints:[],currentAllPoints:[],edgeCutFlow:[],currentRunningPoints:[],status:[],states:[]})};var eventType})},[]);return react.useEffect(()=>(context.subject.on(global.b.Init,process=>{initSnapShot(global.b.Init)}),context.subject.on(global.b.RdxContextInit,process=>{initSnapShot(global.b.RdxContextInit)}),context.subject.on(global.b.EventTrigger,process=>{initSnapShot(global.b.EventTrigger)}),context.subject.on(global.b.BatchEventTrigger,process=>{initSnapShot(global.b.BatchEventTrigger)}),context.subject.on(global.b.TaskChange,process=>{initSnapShot(global.b.TaskChange)}),context.subject.on(global.b.ProcessRunningGraph,process=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),process)}))}),context.subject.on(global.b.StateChange,stateInfo=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),{states:[...state.temporarySnapShots?state.temporarySnapShots.states:[],stateInfo]})}))}),context.subject.on(global.b.StatusChange,process=>{setStateProxy(state=>({temporarySnapShots:Object.assign(Object.assign({},state.temporarySnapShots),{status:[...state.temporarySnapShots.status,process]})}))}),()=>{const ee=context.subject;ee.removeAllListeners(global.b.Init),ee.removeAllListeners(global.b.RdxContextInit),ee.removeAllListeners(global.b.EventTrigger),ee.removeAllListeners(global.b.ProcessRunningGraph),ee.removeAllListeners(global.b.StatusChange),ee.removeAllListeners(global.b.TaskChange)}),[]),Object.assign(Object.assign({},state),{realTimeState:context.taskState.getAll(),allSnapShots:[...state.snapShots,state.temporarySnapShots].filter(Boolean)})},table=__webpack_require__(2365),tab=__webpack_require__(2366),balloon=__webpack_require__(396),main=__webpack_require__(1007),main_default=__webpack_require__.n(main);const{Column:Column}=table.a;var visualState=()=>{const state=DataPersistence(),{allSnapShots:allSnapShots=[],realTimeState:realTimeState}=state,[activeIndex,setActiveIndex]=react.useState(0),[filterParams,setFilterParams]=react.useState({});react.useEffect(()=>{setActiveIndex(Math.max(allSnapShots.length-1,0))},[allSnapShots.length]);const stateDataSource=activeIndex?allSnapShots[activeIndex].states:[],targetTypeDataSource=Object(src_utils.e)(stateDataSource.map(item=>item.targetType).map(item=>({label:item,value:item})));return console.log("table"),react.createElement("div",{style:{position:"fixed",width:400,height:"100%",top:0,right:0,overflow:"auto"}},react.createElement(tab.a,null,react.createElement(tab.a.Item,{title:"事件状态"},react.createElement(table.a,{dataSource:allSnapShots,maxBodyHeight:300,onRowClick:(record,index)=>{setActiveIndex(index)}},react.createElement(Column,{title:"事件类型",dataIndex:"type"}),react.createElement(Column,{title:"原来运行的点",dataIndex:"preRunningPoints",cell:(value=[])=>react.createElement("div",{style:{maxWidth:100,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},value.map(item=>item.key).join(","))}),react.createElement(Column,{title:"当前运行的点",dataIndex:"currentRunningPoints",cell:(value=[])=>react.createElement("div",{title:value.map(item=>item.key).join(","),style:{maxWidth:100,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},value.map(item=>item.key).join(","))})),react.createElement(table.a,{maxBodyHeight:500,isZebra:!0,dataSource:filterDataSource(stateDataSource,filterParams),onFilter:filterParams=>{setFilterParams(filterParams)}},react.createElement(Column,{title:"action类型",dataIndex:"actionType"}),react.createElement(Column,{title:"目标id",dataIndex:"key"}),react.createElement(Column,{title:"目标类型",dataIndex:"targetType",filters:targetTypeDataSource}),react.createElement(Column,{title:"当前变化数据",dataIndex:"value",cell:value=>react.createElement(balloon.a,{popupStyle:{minWidth:500,height:300,overflow:"auto"},trigger:react.createElement("div",{style:{maxWidth:"200px",maxHeight:"100px",overflow:"hidden"}},JSON.stringify(value,getCircularReplacer())),triggerType:"click"},react.createElement("div",null,value))}))),react.createElement(tab.a.Item,{title:"当前状态"},react.createElement(main_default.a,{style:{height:300,overflow:"auto"},src:realTimeState}))))};function filterDataSource(ds,filterParams){return Object.keys(filterParams).forEach(key=>{const selectedKeys=filterParams[key].selectedKeys;selectedKeys.length&&(ds=ds.filter(record=>selectedKeys.some(value=>record[key].indexOf(value)>-1)))}),ds}const getCircularReplacer=()=>{const seen=new WeakSet;return(key,value)=>{if("object"==typeof value&&null!==value){if(seen.has(value))return;seen.add(value)}return value}};__webpack_require__(1848);var RdxFormContext=__webpack_require__(307),FromItem=__webpack_require__(83),es_button=__webpack_require__(57),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories"),__STORY__="import React from 'react';\nimport { DevVisualTableTool, DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { useState } from 'react';\nimport { RdxFormItem, RdxFormContext, FormLayout } from '@czwcode/rdx-next-form';\nimport { Button } from '@alifd/next';\nexport default {\n  title: '基本示例|FormItem',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 基础表单 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        dataSource={[{ label: '测试1', value: '测试2' }]}\n        xComponent={'select'}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 表单对象 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent' title='parent' type={'object'}>\n        <RdxFormItem name='child' title='111' type={'string'} />\n      </RdxFormItem>\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 多对象嵌套 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-2' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n      <DevVisualGraphTool />\n      <DevVisualTableTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 非受控例子 = () => {\n  const [state, setState] = useState();\n  return (\n    <RdxFormContext\n      initializeState={state}\n      onChange={(v) => {\n        console.log('v: ', v);\n        setState(v);\n      }}\n    >\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='child-2' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-3' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 默认值配置 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('value: ', value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem name='b' title='111' type={'string'} default={'hehe'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 受控例子 = () => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <Button\n        onClick={() => {\n          setState({\n            a: '11111',\n          });\n        }}\n      >\n        修改数据\n      </Button>\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 联动例子 = () => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem\n        name='b'\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        xComponent={'select'}\n        reaction={async (context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          let a = [];\n          for (let i = 0; i < 5; i++) {\n            a.push({\n              label: depsValue.value + '-' + i,\n              value: depsValue.value + '-' + i,\n            });\n          }\n          updateState({ ...value, dataSource: a });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 展示隐藏 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem\n        name='a'\n        title='111'\n        type={'string'}\n        xComponent={'radio'}\n        dataSource={[\n          { label: '展示', value: 'show' },\n          { label: '隐藏', value: 'hidden' },\n        ]}\n      />\n      <RdxFormItem\n        name='b'\n        defaultVisible={false}\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        reaction={(context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          updateState({ ...value, visible: depsValue.value === 'show' });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 数组对象 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type={'object'}>\n            <RdxFormItem name='item' title='string' type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      {/* <DevVisualGraphTool/>\n      <DevVisualTableTool /> */}\n    </RdxFormContext>\n  );\n};\n\nexport const 字符串数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type='string'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 字符串多层嵌套数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem name='arr' title='arr' type={'array'}>\n            <RdxFormItem type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 强依赖关系 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      {/* <DevVisualTableTool /> */}\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem\n          deps={[{ id: '单价' }, { id: '数量' }]}\n          compute={(value, context) => {\n            const { nextById, depsValues } = context;\n            const [unit, amount] = depsValues;\n            nextById('root.数量', {\n              ...amount,\n              value: value / unit.value,\n            });\n          }}\n          reaction={(context) => {\n            const { updateState, value, depsValues } = context;\n            const [unit, amount] = depsValues;\n            console.log('reaction', unit.value * amount.value);\n            updateState({\n              ...value,\n              value: unit.value * amount.value,\n            });\n          }}\n          title='总价'\n          name='总价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={100}\n          title='单价'\n          name='单价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={50}\n          title='数量'\n          name='数量'\n          type='string'\n        ></RdxFormItem>\n      </RdxFormItem>\n\n      {/* <DevVisualGraphTool /> */}\n    </RdxFormContext>\n  );\n};\n",__ADDS_MAP__={"基本示例-formitem--基础表单":{startLoc:{col:20,line:14},endLoc:{col:1,line:27},startBody:{col:20,line:14},endBody:{col:1,line:27}},"基本示例-formitem--表单对象":{startLoc:{col:20,line:29},endLoc:{col:1,line:38},startBody:{col:20,line:29},endBody:{col:1,line:38}},"基本示例-formitem--多对象嵌套":{startLoc:{col:21,line:40},endLoc:{col:1,line:53},startBody:{col:21,line:40},endBody:{col:1,line:53}},"基本示例-formitem--非受控例子":{startLoc:{col:21,line:55},endLoc:{col:1,line:74},startBody:{col:21,line:55},endBody:{col:1,line:74}},"基本示例-formitem--默认值配置":{startLoc:{col:21,line:76},endLoc:{col:1,line:88},startBody:{col:21,line:76},endBody:{col:1,line:88}},"基本示例-formitem--受控例子":{startLoc:{col:20,line:90},endLoc:{col:1,line:113},startBody:{col:20,line:90},endBody:{col:1,line:113}},"基本示例-formitem--联动例子":{startLoc:{col:20,line:115},endLoc:{col:1,line:149},startBody:{col:20,line:115},endBody:{col:1,line:149}},"基本示例-formitem--展示隐藏":{startLoc:{col:20,line:151},endLoc:{col:1,line:180},startBody:{col:20,line:151},endBody:{col:1,line:180}},"基本示例-formitem--数组对象":{startLoc:{col:20,line:182},endLoc:{col:1,line:200},startBody:{col:20,line:182},endBody:{col:1,line:200}},"基本示例-formitem--字符串数组":{startLoc:{col:21,line:202},endLoc:{col:1,line:216},startBody:{col:21,line:202},endBody:{col:1,line:216}},"基本示例-formitem--字符串多层嵌套数组":{startLoc:{col:25,line:218},endLoc:{col:1,line:234},startBody:{col:25,line:218},endBody:{col:1,line:234}},"基本示例-formitem--强依赖关系":{startLoc:{col:21,line:236},endLoc:{col:1,line:285},startBody:{col:21,line:236},endBody:{col:1,line:285}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"基本示例|FormItem",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport \'@alifd/next/dist/next.css\';\\\\nimport { useState } from \'react\';\\\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\\\nimport { Button } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'基本示例|FormItem\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 基础表单 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\\\n      <RdxFormItem\\\\n        name=\'B\'\\\\n        title=\'下拉框\'\\\\n        type={\'string\'}\\\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\\\n        xComponent={\'select\'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 表单对象 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 多对象嵌套 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n      <DevVisualTableTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 非受控例子 = () => {\\\\n  const [state, setState] = useState();\\\\n  return (\\\\n    <RdxFormContext\\\\n      initializeState={state}\\\\n      onChange={(v) => {\\\\n        console.log(\'v: \', v);\\\\n        setState(v);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 默认值配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'value: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 受控例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState({\\\\n            a: \'11111\',\\\\n          });\\\\n        }}\\\\n      >\\\\n        修改数据\\\\n      </Button>\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 联动例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'select\'}\\\\n        reaction={async (context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          let a = [];\\\\n          for (let i = 0; i < 5; i++) {\\\\n            a.push({\\\\n              label: depsValue.value + \'-\' + i,\\\\n              value: depsValue.value + \'-\' + i,\\\\n            });\\\\n          }\\\\n          updateState({ ...value, dataSource: a });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 展示隐藏 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem\\\\n        name=\'a\'\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'radio\'}\\\\n        dataSource={[\\\\n          { label: \'展示\', value: \'show\' },\\\\n          { label: \'隐藏\', value: \'hidden\' },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        defaultVisible={false}\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        reaction={(context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组对象 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type={\'object\'}>\\\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      {/* <DevVisualGraphTool/>\\\\n      <DevVisualTableTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串多层嵌套数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 强依赖关系 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      {/* <DevVisualTableTool /> */}\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem\\\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n          compute={(value, context) => {\\\\n            const { nextById, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            nextById(\'root.数量\', {\\\\n              ...amount,\\\\n              value: value / unit.value,\\\\n            });\\\\n          }}\\\\n          reaction={(context) => {\\\\n            const { updateState, value, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            console.log(\'reaction\', unit.value * amount.value);\\\\n            updateState({\\\\n              ...value,\\\\n              value: unit.value * amount.value,\\\\n            });\\\\n          }}\\\\n          title=\'总价\'\\\\n          name=\'总价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={100}\\\\n          title=\'单价\'\\\\n          name=\'单价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={50}\\\\n          title=\'数量\'\\\\n          name=\'数量\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n      </RdxFormItem>\\\\n\\\\n      {/* <DevVisualGraphTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-formitem--基础表单\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":20,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"基本示例-formitem--表单对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":38},\\"startBody\\":{\\"col\\":20,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":38}},\\"基本示例-formitem--多对象嵌套\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":40},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":21,\\"line\\":40},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"基本示例-formitem--非受控例子\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":21,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"基本示例-formitem--默认值配置\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":88},\\"startBody\\":{\\"col\\":21,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":88}},\\"基本示例-formitem--受控例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":20,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"基本示例-formitem--联动例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":115},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":115},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"基本示例-formitem--展示隐藏\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":180},\\"startBody\\":{\\"col\\":20,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":180}},\\"基本示例-formitem--数组对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":182},\\"endLoc\\":{\\"col\\":1,\\"line\\":200},\\"startBody\\":{\\"col\\":20,\\"line\\":182},\\"endBody\\":{\\"col\\":1,\\"line\\":200}},\\"基本示例-formitem--字符串数组\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":202},\\"endLoc\\":{\\"col\\":1,\\"line\\":216},\\"startBody\\":{\\"col\\":21,\\"line\\":202},\\"endBody\\":{\\"col\\":1,\\"line\\":216}},\\"基本示例-formitem--字符串多层嵌套数组\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":218},\\"endLoc\\":{\\"col\\":1,\\"line\\":234},\\"startBody\\":{\\"col\\":25,\\"line\\":218},\\"endBody\\":{\\"col\\":1,\\"line\\":234}},\\"基本示例-formitem--强依赖关系\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":236},\\"endLoc\\":{\\"col\\":1,\\"line\\":285},\\"startBody\\":{\\"col\\":21,\\"line\\":236},\\"endBody\\":{\\"col\\":1,\\"line\\":285}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/FormItem.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport \'@alifd/next/dist/next.css\';\\nimport { useState } from \'react\';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\nimport { Button } from \'@alifd/next\';\\nexport default {\\n  title: \'基本示例|FormItem\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport \'@alifd/next/dist/next.css\';\\\\nimport { useState } from \'react\';\\\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\\\nimport { Button } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'基本示例|FormItem\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 基础表单 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\\\n      <RdxFormItem\\\\n        name=\'B\'\\\\n        title=\'下拉框\'\\\\n        type={\'string\'}\\\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\\\n        xComponent={\'select\'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 表单对象 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 多对象嵌套 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n      <DevVisualTableTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 非受控例子 = () => {\\\\n  const [state, setState] = useState();\\\\n  return (\\\\n    <RdxFormContext\\\\n      initializeState={state}\\\\n      onChange={(v) => {\\\\n        console.log(\'v: \', v);\\\\n        setState(v);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 默认值配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'value: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 受控例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState({\\\\n            a: \'11111\',\\\\n          });\\\\n        }}\\\\n      >\\\\n        修改数据\\\\n      </Button>\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 联动例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'select\'}\\\\n        reaction={async (context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          let a = [];\\\\n          for (let i = 0; i < 5; i++) {\\\\n            a.push({\\\\n              label: depsValue.value + \'-\' + i,\\\\n              value: depsValue.value + \'-\' + i,\\\\n            });\\\\n          }\\\\n          updateState({ ...value, dataSource: a });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 展示隐藏 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem\\\\n        name=\'a\'\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'radio\'}\\\\n        dataSource={[\\\\n          { label: \'展示\', value: \'show\' },\\\\n          { label: \'隐藏\', value: \'hidden\' },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        defaultVisible={false}\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        reaction={(context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组对象 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type={\'object\'}>\\\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      {/* <DevVisualGraphTool/>\\\\n      <DevVisualTableTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串多层嵌套数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 强依赖关系 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      {/* <DevVisualTableTool /> */}\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem\\\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n          compute={(value, context) => {\\\\n            const { nextById, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            nextById(\'root.数量\', {\\\\n              ...amount,\\\\n              value: value / unit.value,\\\\n            });\\\\n          }}\\\\n          reaction={(context) => {\\\\n            const { updateState, value, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            console.log(\'reaction\', unit.value * amount.value);\\\\n            updateState({\\\\n              ...value,\\\\n              value: unit.value * amount.value,\\\\n            });\\\\n          }}\\\\n          title=\'总价\'\\\\n          name=\'总价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={100}\\\\n          title=\'单价\'\\\\n          name=\'单价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={50}\\\\n          title=\'数量\'\\\\n          name=\'数量\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n      </RdxFormItem>\\\\n\\\\n      {/* <DevVisualGraphTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-formitem--基础表单\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":20,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"基本示例-formitem--表单对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":38},\\"startBody\\":{\\"col\\":20,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":38}},\\"基本示例-formitem--多对象嵌套\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":40},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":21,\\"line\\":40},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"基本示例-formitem--非受控例子\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":21,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"基本示例-formitem--默认值配置\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":88},\\"startBody\\":{\\"col\\":21,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":88}},\\"基本示例-formitem--受控例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":20,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"基本示例-formitem--联动例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":115},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":115},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"基本示例-formitem--展示隐藏\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":180},\\"startBody\\":{\\"col\\":20,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":180}},\\"基本示例-formitem--数组对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":182},\\"endLoc\\":{\\"col\\":1,\\"line\\":200},\\"startBody\\":{\\"col\\":20,\\"line\\":182},\\"endBody\\":{\\"col\\":1,\\"line\\":200}},\\"基本示例-formitem--字符串数组\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":202},\\"endLoc\\":{\\"col\\":1,\\"line\\":216},\\"startBody\\":{\\"col\\":21,\\"line\\":202},\\"endBody\\":{\\"col\\":1,\\"line\\":216}},\\"基本示例-formitem--字符串多层嵌套数组\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":218},\\"endLoc\\":{\\"col\\":1,\\"line\\":234},\\"startBody\\":{\\"col\\":25,\\"line\\":218},\\"endBody\\":{\\"col\\":1,\\"line\\":234}},\\"基本示例-formitem--强依赖关系\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":236},\\"endLoc\\":{\\"col\\":1,\\"line\\":285},\\"startBody\\":{\\"col\\":21,\\"line\\":236},\\"endBody\\":{\\"col\\":1,\\"line\\":285}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\n      <RdxFormItem\\n        name=\'B\'\\n        title=\'下拉框\'\\n        type={\'string\'}\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\n        xComponent={\'select\'}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 表单对象 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 多对象嵌套 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 非受控例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log(\'v: \', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 默认值配置 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'value: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 受控例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: \'11111\',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 联动例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem\\n        name=\'b\'\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'select\'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + \'-\' + i,\\n              value: depsValue.value + \'-\' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 展示隐藏 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name=\'a\'\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'radio\'}\\n        dataSource={[\\n          { label: \'展示\', value: \'show\' },\\n          { label: \'隐藏\', value: \'hidden\' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name=\'b\'\\n        defaultVisible={false}\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 数组对象 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type={\'object\'}>\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 字符串数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 字符串多层嵌套数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 强依赖关系 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById(\'root.数量\', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log(\'reaction\', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title=\'总价\'\\n          name=\'总价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title=\'单价\'\\n          name=\'单价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title=\'数量\'\\n          name=\'数量\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-formitem--基础表单":{"startLoc":{"col":20,"line":36},"endLoc":{"col":139,"line":49},"startBody":{"col":20,"line":36},"endBody":{"col":139,"line":49}},"基本示例-formitem--表单对象":{"startLoc":{"col":20,"line":51},"endLoc":{"col":139,"line":60},"startBody":{"col":20,"line":51},"endBody":{"col":139,"line":60}},"基本示例-formitem--多对象嵌套":{"startLoc":{"col":21,"line":62},"endLoc":{"col":139,"line":75},"startBody":{"col":21,"line":62},"endBody":{"col":139,"line":75}},"基本示例-formitem--非受控例子":{"startLoc":{"col":21,"line":77},"endLoc":{"col":139,"line":96},"startBody":{"col":21,"line":77},"endBody":{"col":139,"line":96}},"基本示例-formitem--默认值配置":{"startLoc":{"col":21,"line":98},"endLoc":{"col":139,"line":110},"startBody":{"col":21,"line":98},"endBody":{"col":139,"line":110}},"基本示例-formitem--受控例子":{"startLoc":{"col":20,"line":112},"endLoc":{"col":139,"line":135},"startBody":{"col":20,"line":112},"endBody":{"col":139,"line":135}},"基本示例-formitem--联动例子":{"startLoc":{"col":20,"line":137},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":137},"endBody":{"col":139,"line":171}},"基本示例-formitem--展示隐藏":{"startLoc":{"col":20,"line":173},"endLoc":{"col":139,"line":202},"startBody":{"col":20,"line":173},"endBody":{"col":139,"line":202}},"基本示例-formitem--数组对象":{"startLoc":{"col":20,"line":204},"endLoc":{"col":139,"line":222},"startBody":{"col":20,"line":204},"endBody":{"col":139,"line":222}},"基本示例-formitem--字符串数组":{"startLoc":{"col":21,"line":224},"endLoc":{"col":139,"line":238},"startBody":{"col":21,"line":224},"endBody":{"col":139,"line":238}},"基本示例-formitem--字符串多层嵌套数组":{"startLoc":{"col":25,"line":240},"endLoc":{"col":139,"line":256},"startBody":{"col":25,"line":240},"endBody":{"col":139,"line":256}},"基本示例-formitem--强依赖关系":{"startLoc":{"col":21,"line":258},"endLoc":{"col":139,"line":307},"startBody":{"col":21,"line":258},"endBody":{"col":139,"line":307}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/FormItem.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport \'@alifd/next/dist/next.css\';\\nimport { useState } from \'react\';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\nimport { Button } from \'@alifd/next\';\\nexport default {\\n  title: \'基本示例|FormItem\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\n      <RdxFormItem\\n        name=\'B\'\\n        title=\'下拉框\'\\n        type={\'string\'}\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\n        xComponent={\'select\'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 表单对象 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 多对象嵌套 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 非受控例子 = () => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log(\'v: \', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 默认值配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'value: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 受控例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: \'11111\',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 联动例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem\\n        name=\'b\'\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'select\'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + \'-\' + i,\\n              value: depsValue.value + \'-\' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 展示隐藏 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name=\'a\'\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'radio\'}\\n        dataSource={[\\n          { label: \'展示\', value: \'show\' },\\n          { label: \'隐藏\', value: \'hidden\' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name=\'b\'\\n        defaultVisible={false}\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组对象 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type={\'object\'}>\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串多层嵌套数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 强依赖关系 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById(\'root.数量\', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log(\'reaction\', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title=\'总价\'\\n          name=\'总价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title=\'单价\'\\n          name=\'单价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title=\'数量\'\\n          name=\'数量\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"基本示例-formitem--基础表单":{"startLoc":{"col":20,"line":14},"endLoc":{"col":1,"line":27},"startBody":{"col":20,"line":14},"endBody":{"col":1,"line":27}},"基本示例-formitem--表单对象":{"startLoc":{"col":20,"line":29},"endLoc":{"col":1,"line":38},"startBody":{"col":20,"line":29},"endBody":{"col":1,"line":38}},"基本示例-formitem--多对象嵌套":{"startLoc":{"col":21,"line":40},"endLoc":{"col":1,"line":53},"startBody":{"col":21,"line":40},"endBody":{"col":1,"line":53}},"基本示例-formitem--非受控例子":{"startLoc":{"col":21,"line":55},"endLoc":{"col":1,"line":74},"startBody":{"col":21,"line":55},"endBody":{"col":1,"line":74}},"基本示例-formitem--默认值配置":{"startLoc":{"col":21,"line":76},"endLoc":{"col":1,"line":88},"startBody":{"col":21,"line":76},"endBody":{"col":1,"line":88}},"基本示例-formitem--受控例子":{"startLoc":{"col":20,"line":90},"endLoc":{"col":1,"line":113},"startBody":{"col":20,"line":90},"endBody":{"col":1,"line":113}},"基本示例-formitem--联动例子":{"startLoc":{"col":20,"line":115},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":115},"endBody":{"col":1,"line":149}},"基本示例-formitem--展示隐藏":{"startLoc":{"col":20,"line":151},"endLoc":{"col":1,"line":180},"startBody":{"col":20,"line":151},"endBody":{"col":1,"line":180}},"基本示例-formitem--数组对象":{"startLoc":{"col":20,"line":182},"endLoc":{"col":1,"line":200},"startBody":{"col":20,"line":182},"endBody":{"col":1,"line":200}},"基本示例-formitem--字符串数组":{"startLoc":{"col":21,"line":202},"endLoc":{"col":1,"line":216},"startBody":{"col":21,"line":202},"endBody":{"col":1,"line":216}},"基本示例-formitem--字符串多层嵌套数组":{"startLoc":{"col":25,"line":218},"endLoc":{"col":1,"line":234},"startBody":{"col":25,"line":218},"endBody":{"col":1,"line":234}},"基本示例-formitem--强依赖关系":{"startLoc":{"col":21,"line":236},"endLoc":{"col":1,"line":285},"startBody":{"col":21,"line":236},"endBody":{"col":1,"line":285}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/FormItem.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\nimport \'@alifd/next/dist/next.css\';\nimport { useState } from \'react\';\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\nimport { Button } from \'@alifd/next\';\nexport default {\n  title: \'基本示例|FormItem\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport \'@alifd/next/dist/next.css\';\\\\nimport { useState } from \'react\';\\\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\\\nimport { Button } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'基本示例|FormItem\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 基础表单 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\\\n      <RdxFormItem\\\\n        name=\'B\'\\\\n        title=\'下拉框\'\\\\n        type={\'string\'}\\\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\\\n        xComponent={\'select\'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 表单对象 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 多对象嵌套 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n      <DevVisualTableTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 非受控例子 = () => {\\\\n  const [state, setState] = useState();\\\\n  return (\\\\n    <RdxFormContext\\\\n      initializeState={state}\\\\n      onChange={(v) => {\\\\n        console.log(\'v: \', v);\\\\n        setState(v);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 默认值配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'value: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 受控例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState({\\\\n            a: \'11111\',\\\\n          });\\\\n        }}\\\\n      >\\\\n        修改数据\\\\n      </Button>\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 联动例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'select\'}\\\\n        reaction={async (context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          let a = [];\\\\n          for (let i = 0; i < 5; i++) {\\\\n            a.push({\\\\n              label: depsValue.value + \'-\' + i,\\\\n              value: depsValue.value + \'-\' + i,\\\\n            });\\\\n          }\\\\n          updateState({ ...value, dataSource: a });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 展示隐藏 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem\\\\n        name=\'a\'\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'radio\'}\\\\n        dataSource={[\\\\n          { label: \'展示\', value: \'show\' },\\\\n          { label: \'隐藏\', value: \'hidden\' },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        defaultVisible={false}\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        reaction={(context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组对象 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type={\'object\'}>\\\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      {/* <DevVisualGraphTool/>\\\\n      <DevVisualTableTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串多层嵌套数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 强依赖关系 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      {/* <DevVisualTableTool /> */}\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem\\\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n          compute={(value, context) => {\\\\n            const { nextById, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            nextById(\'root.数量\', {\\\\n              ...amount,\\\\n              value: value / unit.value,\\\\n            });\\\\n          }}\\\\n          reaction={(context) => {\\\\n            const { updateState, value, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            console.log(\'reaction\', unit.value * amount.value);\\\\n            updateState({\\\\n              ...value,\\\\n              value: unit.value * amount.value,\\\\n            });\\\\n          }}\\\\n          title=\'总价\'\\\\n          name=\'总价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={100}\\\\n          title=\'单价\'\\\\n          name=\'单价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={50}\\\\n          title=\'数量\'\\\\n          name=\'数量\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n      </RdxFormItem>\\\\n\\\\n      {/* <DevVisualGraphTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"基本示例-formitem--基础表单\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":20,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"基本示例-formitem--表单对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":38},\\"startBody\\":{\\"col\\":20,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":38}},\\"基本示例-formitem--多对象嵌套\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":40},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":21,\\"line\\":40},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"基本示例-formitem--非受控例子\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":21,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"基本示例-formitem--默认值配置\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":88},\\"startBody\\":{\\"col\\":21,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":88}},\\"基本示例-formitem--受控例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":20,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"基本示例-formitem--联动例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":115},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":115},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"基本示例-formitem--展示隐藏\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":180},\\"startBody\\":{\\"col\\":20,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":180}},\\"基本示例-formitem--数组对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":182},\\"endLoc\\":{\\"col\\":1,\\"line\\":200},\\"startBody\\":{\\"col\\":20,\\"line\\":182},\\"endBody\\":{\\"col\\":1,\\"line\\":200}},\\"基本示例-formitem--字符串数组\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":202},\\"endLoc\\":{\\"col\\":1,\\"line\\":216},\\"startBody\\":{\\"col\\":21,\\"line\\":202},\\"endBody\\":{\\"col\\":1,\\"line\\":216}},\\"基本示例-formitem--字符串多层嵌套数组\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":218},\\"endLoc\\":{\\"col\\":1,\\"line\\":234},\\"startBody\\":{\\"col\\":25,\\"line\\":218},\\"endBody\\":{\\"col\\":1,\\"line\\":234}},\\"基本示例-formitem--强依赖关系\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":236},\\"endLoc\\":{\\"col\\":1,\\"line\\":285},\\"startBody\\":{\\"col\\":21,\\"line\\":236},\\"endBody\\":{\\"col\\":1,\\"line\\":285}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/FormItem.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport \'@alifd/next/dist/next.css\';\\nimport { useState } from \'react\';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\nimport { Button } from \'@alifd/next\';\\nexport default {\\n  title: \'基本示例|FormItem\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\\\nimport \'@alifd/next/dist/next.css\';\\\\nimport { useState } from \'react\';\\\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\\\nimport { Button } from \'@alifd/next\';\\\\nexport default {\\\\n  title: \'基本示例|FormItem\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 基础表单 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\\\n      <RdxFormItem\\\\n        name=\'B\'\\\\n        title=\'下拉框\'\\\\n        type={\'string\'}\\\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\\\n        xComponent={\'select\'}\\\\n      />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 表单对象 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 多对象嵌套 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      <DevVisualGraphTool />\\\\n      <DevVisualTableTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 非受控例子 = () => {\\\\n  const [state, setState] = useState();\\\\n  return (\\\\n    <RdxFormContext\\\\n      initializeState={state}\\\\n      onChange={(v) => {\\\\n        console.log(\'v: \', v);\\\\n        setState(v);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 默认值配置 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'value: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 受控例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <Button\\\\n        onClick={() => {\\\\n          setState({\\\\n            a: \'11111\',\\\\n          });\\\\n        }}\\\\n      >\\\\n        修改数据\\\\n      </Button>\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 联动例子 = () => {\\\\n  const [state, setState] = useState({});\\\\n  return (\\\\n    <RdxFormContext\\\\n      state={state}\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n        setState(value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'select\'}\\\\n        reaction={async (context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          let a = [];\\\\n          for (let i = 0; i < 5; i++) {\\\\n            a.push({\\\\n              label: depsValue.value + \'-\' + i,\\\\n              value: depsValue.value + \'-\' + i,\\\\n            });\\\\n          }\\\\n          updateState({ ...value, dataSource: a });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 展示隐藏 = () => {\\\\n  return (\\\\n    <RdxFormContext>\\\\n      <RdxFormItem\\\\n        name=\'a\'\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        xComponent={\'radio\'}\\\\n        dataSource={[\\\\n          { label: \'展示\', value: \'show\' },\\\\n          { label: \'隐藏\', value: \'hidden\' },\\\\n        ]}\\\\n      />\\\\n      <RdxFormItem\\\\n        name=\'b\'\\\\n        defaultVisible={false}\\\\n        deps={[{ id: \'a\' }]}\\\\n        title=\'111\'\\\\n        type={\'string\'}\\\\n        reaction={(context) => {\\\\n          const { depsValues, updateState, value, moduleConfig } = context;\\\\n          const [depsValue] = depsValues;\\\\n\\\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\\\n        }}\\\\n      />\\\\n      <DevVisualGraphTool />\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 数组对象 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type={\'object\'}>\\\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n      {/* <DevVisualGraphTool/>\\\\n      <DevVisualTableTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 字符串多层嵌套数组 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\\\n          </RdxFormItem>\\\\n        </RdxFormItem>\\\\n      </RdxFormItem>\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\\\nexport const 强依赖关系 = () => {\\\\n  return (\\\\n    <RdxFormContext\\\\n      onChange={(value) => {\\\\n        console.log(\'state: \', value);\\\\n      }}\\\\n    >\\\\n      {/* <DevVisualTableTool /> */}\\\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\\\n        <RdxFormItem\\\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\\\n          compute={(value, context) => {\\\\n            const { nextById, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            nextById(\'root.数量\', {\\\\n              ...amount,\\\\n              value: value / unit.value,\\\\n            });\\\\n          }}\\\\n          reaction={(context) => {\\\\n            const { updateState, value, depsValues } = context;\\\\n            const [unit, amount] = depsValues;\\\\n            console.log(\'reaction\', unit.value * amount.value);\\\\n            updateState({\\\\n              ...value,\\\\n              value: unit.value * amount.value,\\\\n            });\\\\n          }}\\\\n          title=\'总价\'\\\\n          name=\'总价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={100}\\\\n          title=\'单价\'\\\\n          name=\'单价\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n        <RdxFormItem\\\\n          default={50}\\\\n          title=\'数量\'\\\\n          name=\'数量\'\\\\n          type=\'string\'\\\\n        ></RdxFormItem>\\\\n      </RdxFormItem>\\\\n\\\\n      {/* <DevVisualGraphTool /> */}\\\\n    </RdxFormContext>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"基本示例-formitem--基础表单\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":27},\\"startBody\\":{\\"col\\":20,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":27}},\\"基本示例-formitem--表单对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":29},\\"endLoc\\":{\\"col\\":1,\\"line\\":38},\\"startBody\\":{\\"col\\":20,\\"line\\":29},\\"endBody\\":{\\"col\\":1,\\"line\\":38}},\\"基本示例-formitem--多对象嵌套\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":40},\\"endLoc\\":{\\"col\\":1,\\"line\\":53},\\"startBody\\":{\\"col\\":21,\\"line\\":40},\\"endBody\\":{\\"col\\":1,\\"line\\":53}},\\"基本示例-formitem--非受控例子\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":55},\\"endLoc\\":{\\"col\\":1,\\"line\\":74},\\"startBody\\":{\\"col\\":21,\\"line\\":55},\\"endBody\\":{\\"col\\":1,\\"line\\":74}},\\"基本示例-formitem--默认值配置\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":76},\\"endLoc\\":{\\"col\\":1,\\"line\\":88},\\"startBody\\":{\\"col\\":21,\\"line\\":76},\\"endBody\\":{\\"col\\":1,\\"line\\":88}},\\"基本示例-formitem--受控例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":90},\\"endLoc\\":{\\"col\\":1,\\"line\\":113},\\"startBody\\":{\\"col\\":20,\\"line\\":90},\\"endBody\\":{\\"col\\":1,\\"line\\":113}},\\"基本示例-formitem--联动例子\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":115},\\"endLoc\\":{\\"col\\":1,\\"line\\":149},\\"startBody\\":{\\"col\\":20,\\"line\\":115},\\"endBody\\":{\\"col\\":1,\\"line\\":149}},\\"基本示例-formitem--展示隐藏\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":151},\\"endLoc\\":{\\"col\\":1,\\"line\\":180},\\"startBody\\":{\\"col\\":20,\\"line\\":151},\\"endBody\\":{\\"col\\":1,\\"line\\":180}},\\"基本示例-formitem--数组对象\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":182},\\"endLoc\\":{\\"col\\":1,\\"line\\":200},\\"startBody\\":{\\"col\\":20,\\"line\\":182},\\"endBody\\":{\\"col\\":1,\\"line\\":200}},\\"基本示例-formitem--字符串数组\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":202},\\"endLoc\\":{\\"col\\":1,\\"line\\":216},\\"startBody\\":{\\"col\\":21,\\"line\\":202},\\"endBody\\":{\\"col\\":1,\\"line\\":216}},\\"基本示例-formitem--字符串多层嵌套数组\\":{\\"startLoc\\":{\\"col\\":25,\\"line\\":218},\\"endLoc\\":{\\"col\\":1,\\"line\\":234},\\"startBody\\":{\\"col\\":25,\\"line\\":218},\\"endBody\\":{\\"col\\":1,\\"line\\":234}},\\"基本示例-formitem--强依赖关系\\":{\\"startLoc\\":{\\"col\\":21,\\"line\\":236},\\"endLoc\\":{\\"col\\":1,\\"line\\":285},\\"startBody\\":{\\"col\\":21,\\"line\\":236},\\"endBody\\":{\\"col\\":1,\\"line\\":285}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\n      <RdxFormItem\\n        name=\'B\'\\n        title=\'下拉框\'\\n        type={\'string\'}\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\n        xComponent={\'select\'}\\n      />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 表单对象 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 多对象嵌套 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 非受控例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log(\'v: \', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 默认值配置 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'value: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 受控例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: \'11111\',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 联动例子 = addSourceDecorator(() => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem\\n        name=\'b\'\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'select\'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + \'-\' + i,\\n              value: depsValue.value + \'-\' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 展示隐藏 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name=\'a\'\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'radio\'}\\n        dataSource={[\\n          { label: \'展示\', value: \'show\' },\\n          { label: \'隐藏\', value: \'hidden\' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name=\'b\'\\n        defaultVisible={false}\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 数组对象 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type={\'object\'}>\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 字符串数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 字符串多层嵌套数组 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 强依赖关系 = addSourceDecorator(() => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById(\'root.数量\', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log(\'reaction\', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title=\'总价\'\\n          name=\'总价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title=\'单价\'\\n          name=\'单价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title=\'数量\'\\n          name=\'数量\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n","locationsMap":{"基本示例-formitem--基础表单":{"startLoc":{"col":20,"line":36},"endLoc":{"col":139,"line":49},"startBody":{"col":20,"line":36},"endBody":{"col":139,"line":49}},"基本示例-formitem--表单对象":{"startLoc":{"col":20,"line":51},"endLoc":{"col":139,"line":60},"startBody":{"col":20,"line":51},"endBody":{"col":139,"line":60}},"基本示例-formitem--多对象嵌套":{"startLoc":{"col":21,"line":62},"endLoc":{"col":139,"line":75},"startBody":{"col":21,"line":62},"endBody":{"col":139,"line":75}},"基本示例-formitem--非受控例子":{"startLoc":{"col":21,"line":77},"endLoc":{"col":139,"line":96},"startBody":{"col":21,"line":77},"endBody":{"col":139,"line":96}},"基本示例-formitem--默认值配置":{"startLoc":{"col":21,"line":98},"endLoc":{"col":139,"line":110},"startBody":{"col":21,"line":98},"endBody":{"col":139,"line":110}},"基本示例-formitem--受控例子":{"startLoc":{"col":20,"line":112},"endLoc":{"col":139,"line":135},"startBody":{"col":20,"line":112},"endBody":{"col":139,"line":135}},"基本示例-formitem--联动例子":{"startLoc":{"col":20,"line":137},"endLoc":{"col":139,"line":171},"startBody":{"col":20,"line":137},"endBody":{"col":139,"line":171}},"基本示例-formitem--展示隐藏":{"startLoc":{"col":20,"line":173},"endLoc":{"col":139,"line":202},"startBody":{"col":20,"line":173},"endBody":{"col":139,"line":202}},"基本示例-formitem--数组对象":{"startLoc":{"col":20,"line":204},"endLoc":{"col":139,"line":222},"startBody":{"col":20,"line":204},"endBody":{"col":139,"line":222}},"基本示例-formitem--字符串数组":{"startLoc":{"col":21,"line":224},"endLoc":{"col":139,"line":238},"startBody":{"col":21,"line":224},"endBody":{"col":139,"line":238}},"基本示例-formitem--字符串多层嵌套数组":{"startLoc":{"col":25,"line":240},"endLoc":{"col":139,"line":256},"startBody":{"col":25,"line":240},"endBody":{"col":139,"line":256}},"基本示例-formitem--强依赖关系":{"startLoc":{"col":21,"line":258},"endLoc":{"col":139,"line":307},"startBody":{"col":21,"line":258},"endBody":{"col":139,"line":307}}}},"storySource":{"source":"import React from \'react\';\\nimport { DevVisualTableTool, DevVisualGraphTool } from \'@czwcode/rdx-plugins\';\\nimport \'@alifd/next/dist/next.css\';\\nimport { useState } from \'react\';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from \'@czwcode/rdx-next-form\';\\nimport { Button } from \'@alifd/next\';\\nexport default {\\n  title: \'基本示例|FormItem\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\\n      <RdxFormItem\\n        name=\'B\'\\n        title=\'下拉框\'\\n        type={\'string\'}\\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\\n        xComponent={\'select\'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 表单对象 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 多对象嵌套 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 非受控例子 = () => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log(\'v: \', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 默认值配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'value: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 受控例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: \'11111\',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 联动例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\\n      <RdxFormItem\\n        name=\'b\'\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'select\'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + \'-\' + i,\\n              value: depsValue.value + \'-\' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 展示隐藏 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name=\'a\'\\n        title=\'111\'\\n        type={\'string\'}\\n        xComponent={\'radio\'}\\n        dataSource={[\\n          { label: \'展示\', value: \'show\' },\\n          { label: \'隐藏\', value: \'hidden\' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name=\'b\'\\n        defaultVisible={false}\\n        deps={[{ id: \'a\' }]}\\n        title=\'111\'\\n        type={\'string\'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === \'show\' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组对象 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type={\'object\'}>\\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem type=\'string\'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串多层嵌套数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\\n            <RdxFormItem type=\'string\'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 强依赖关系 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log(\'state: \', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\\n        <RdxFormItem\\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById(\'root.数量\', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log(\'reaction\', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title=\'总价\'\\n          name=\'总价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title=\'单价\'\\n          name=\'单价\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title=\'数量\'\\n          name=\'数量\'\\n          type=\'string\'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n","locationsMap":{"基本示例-formitem--基础表单":{"startLoc":{"col":20,"line":14},"endLoc":{"col":1,"line":27},"startBody":{"col":20,"line":14},"endBody":{"col":1,"line":27}},"基本示例-formitem--表单对象":{"startLoc":{"col":20,"line":29},"endLoc":{"col":1,"line":38},"startBody":{"col":20,"line":29},"endBody":{"col":1,"line":38}},"基本示例-formitem--多对象嵌套":{"startLoc":{"col":21,"line":40},"endLoc":{"col":1,"line":53},"startBody":{"col":21,"line":40},"endBody":{"col":1,"line":53}},"基本示例-formitem--非受控例子":{"startLoc":{"col":21,"line":55},"endLoc":{"col":1,"line":74},"startBody":{"col":21,"line":55},"endBody":{"col":1,"line":74}},"基本示例-formitem--默认值配置":{"startLoc":{"col":21,"line":76},"endLoc":{"col":1,"line":88},"startBody":{"col":21,"line":76},"endBody":{"col":1,"line":88}},"基本示例-formitem--受控例子":{"startLoc":{"col":20,"line":90},"endLoc":{"col":1,"line":113},"startBody":{"col":20,"line":90},"endBody":{"col":1,"line":113}},"基本示例-formitem--联动例子":{"startLoc":{"col":20,"line":115},"endLoc":{"col":1,"line":149},"startBody":{"col":20,"line":115},"endBody":{"col":1,"line":149}},"基本示例-formitem--展示隐藏":{"startLoc":{"col":20,"line":151},"endLoc":{"col":1,"line":180},"startBody":{"col":20,"line":151},"endBody":{"col":1,"line":180}},"基本示例-formitem--数组对象":{"startLoc":{"col":20,"line":182},"endLoc":{"col":1,"line":200},"startBody":{"col":20,"line":182},"endBody":{"col":1,"line":200}},"基本示例-formitem--字符串数组":{"startLoc":{"col":21,"line":202},"endLoc":{"col":1,"line":216},"startBody":{"col":21,"line":202},"endBody":{"col":1,"line":216}},"基本示例-formitem--字符串多层嵌套数组":{"startLoc":{"col":25,"line":218},"endLoc":{"col":1,"line":234},"startBody":{"col":25,"line":218},"endBody":{"col":1,"line":234}},"基本示例-formitem--强依赖关系":{"startLoc":{"col":21,"line":236},"endLoc":{"col":1,"line":285},"startBody":{"col":21,"line":236},"endBody":{"col":1,"line":285}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 基础表单 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name=\'A\' title=\'输入框\' type={\'string\'} />\n      <RdxFormItem\n        name=\'B\'\n        title=\'下拉框\'\n        type={\'string\'}\n        dataSource={[{ label: \'测试1\', value: \'测试2\' }]}\n        xComponent={\'select\'}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 表单对象 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name=\'parent\' title=\'parent\' type={\'object\'}>\n        <RdxFormItem name=\'child\' title=\'111\' type={\'string\'} />\n      </RdxFormItem>\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 多对象嵌套 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\n          <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\n        </RdxFormItem>\n      </RdxFormItem>\n      <DevVisualGraphTool />\n      <DevVisualTableTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 非受控例子 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = useState();\n  return (\n    <RdxFormContext\n      initializeState={state}\n      onChange={(v) => {\n        console.log(\'v: \', v);\n        setState(v);\n      }}\n    >\n      <RdxFormItem name=\'parent1\' title=\'parent\' type={\'object\'}>\n        <RdxFormItem name=\'child-1\' title=\'111\' type={\'string\'} />\n        <RdxFormItem name=\'child-2\' title=\'111\' type={\'string\'} />\n        <RdxFormItem name=\'parent2\' title=\'parent\' type={\'object\'}>\n          <RdxFormItem name=\'child-3\' title=\'111\' type={\'string\'} />\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 默认值配置 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(\'value: \', value);\n      }}\n    >\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\n      <RdxFormItem name=\'b\' title=\'111\' type={\'string\'} default={\'hehe\'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 受控例子 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log(\'state: \', value);\n        setState(value);\n      }}\n    >\n      <Button\n        onClick={() => {\n          setState({\n            a: \'11111\',\n          });\n        }}\n      >\n        修改数据\n      </Button>\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 联动例子 = addSourceDecorator(addSourceDecorator(() => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log(\'state: \', value);\n        setState(value);\n      }}\n    >\n      <RdxFormItem name=\'a\' title=\'111\' type={\'string\'} default={\'haha\'} />\n      <RdxFormItem\n        name=\'b\'\n        deps={[{ id: \'a\' }]}\n        title=\'111\'\n        type={\'string\'}\n        xComponent={\'select\'}\n        reaction={async (context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          let a = [];\n          for (let i = 0; i < 5; i++) {\n            a.push({\n              label: depsValue.value + \'-\' + i,\n              value: depsValue.value + \'-\' + i,\n            });\n          }\n          updateState({ ...value, dataSource: a });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 展示隐藏 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem\n        name=\'a\'\n        title=\'111\'\n        type={\'string\'}\n        xComponent={\'radio\'}\n        dataSource={[\n          { label: \'展示\', value: \'show\' },\n          { label: \'隐藏\', value: \'hidden\' },\n        ]}\n      />\n      <RdxFormItem\n        name=\'b\'\n        defaultVisible={false}\n        deps={[{ id: \'a\' }]}\n        title=\'111\'\n        type={\'string\'}\n        reaction={(context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          updateState({ ...value, visible: depsValue.value === \'show\' });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 数组对象 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(\'state: \', value);\n      }}\n    >\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\n          <RdxFormItem type={\'object\'}>\n            <RdxFormItem name=\'item\' title=\'string\' type=\'string\'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      {/* <DevVisualGraphTool/>\n      <DevVisualTableTool /> */}\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 字符串数组 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(\'state: \', value);\n      }}\n    >\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\n          <RdxFormItem type=\'string\'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 字符串多层嵌套数组 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(\'state: \', value);\n      }}\n    >\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\n        <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\n          <RdxFormItem name=\'arr\' title=\'arr\' type={\'array\'}>\n            <RdxFormItem type=\'string\'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 强依赖关系 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log(\'state: \', value);\n      }}\n    >\n      {/* <DevVisualTableTool /> */}\n      <RdxFormItem name=\'root\' title=\'root\' type={\'object\'}>\n        <RdxFormItem\n          deps={[{ id: \'单价\' }, { id: \'数量\' }]}\n          compute={(value, context) => {\n            const { nextById, depsValues } = context;\n            const [unit, amount] = depsValues;\n            nextById(\'root.数量\', {\n              ...amount,\n              value: value / unit.value,\n            });\n          }}\n          reaction={(context) => {\n            const { updateState, value, depsValues } = context;\n            const [unit, amount] = depsValues;\n            console.log(\'reaction\', unit.value * amount.value);\n            updateState({\n              ...value,\n              value: unit.value * amount.value,\n            });\n          }}\n          title=\'总价\'\n          name=\'总价\'\n          type=\'string\'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={100}\n          title=\'单价\'\n          name=\'单价\'\n          type=\'string\'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={50}\n          title=\'数量\'\n          name=\'数量\'\n          type=\'string\'\n        ></RdxFormItem>\n      </RdxFormItem>\n\n      {/* <DevVisualGraphTool /> */}\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n',locationsMap:{"基本示例-formitem--基础表单":{startLoc:{col:20,line:58},endLoc:{col:277,line:71},startBody:{col:20,line:58},endBody:{col:277,line:71}},"基本示例-formitem--表单对象":{startLoc:{col:20,line:73},endLoc:{col:277,line:82},startBody:{col:20,line:73},endBody:{col:277,line:82}},"基本示例-formitem--多对象嵌套":{startLoc:{col:21,line:84},endLoc:{col:277,line:97},startBody:{col:21,line:84},endBody:{col:277,line:97}},"基本示例-formitem--非受控例子":{startLoc:{col:21,line:99},endLoc:{col:277,line:118},startBody:{col:21,line:99},endBody:{col:277,line:118}},"基本示例-formitem--默认值配置":{startLoc:{col:21,line:120},endLoc:{col:277,line:132},startBody:{col:21,line:120},endBody:{col:277,line:132}},"基本示例-formitem--受控例子":{startLoc:{col:20,line:134},endLoc:{col:277,line:157},startBody:{col:20,line:134},endBody:{col:277,line:157}},"基本示例-formitem--联动例子":{startLoc:{col:20,line:159},endLoc:{col:277,line:193},startBody:{col:20,line:159},endBody:{col:277,line:193}},"基本示例-formitem--展示隐藏":{startLoc:{col:20,line:195},endLoc:{col:277,line:224},startBody:{col:20,line:195},endBody:{col:277,line:224}},"基本示例-formitem--数组对象":{startLoc:{col:20,line:226},endLoc:{col:277,line:244},startBody:{col:20,line:226},endBody:{col:277,line:244}},"基本示例-formitem--字符串数组":{startLoc:{col:21,line:246},endLoc:{col:277,line:260},startBody:{col:21,line:246},endBody:{col:277,line:260}},"基本示例-formitem--字符串多层嵌套数组":{startLoc:{col:25,line:262},endLoc:{col:277,line:278},startBody:{col:25,line:262},endBody:{col:277,line:278}},"基本示例-formitem--强依赖关系":{startLoc:{col:21,line:280},endLoc:{col:277,line:329},startBody:{col:21,line:280},endBody:{col:277,line:329}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { DevVisualTableTool, DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { useState } from 'react';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from '@czwcode/rdx-next-form';\\nimport { Button } from '@alifd/next';\\nexport default {\\n  title: '基本示例|FormItem',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        dataSource={[{ label: '测试1', value: '测试2' }]}\\n        xComponent={'select'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 表单对象 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='parent' title='parent' type={'object'}>\\n        <RdxFormItem name='child' title='111' type={'string'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 多对象嵌套 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\\n        <RdxFormItem name='child-1' title='111' type={'string'} />\\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\\n          <RdxFormItem name='child-2' title='111' type={'string'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 非受控例子 = () => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log('v: ', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\\n        <RdxFormItem name='child-1' title='111' type={'string'} />\\n        <RdxFormItem name='child-2' title='111' type={'string'} />\\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\\n          <RdxFormItem name='child-3' title='111' type={'string'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 默认值配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('value: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <RdxFormItem name='b' title='111' type={'string'} default={'hehe'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 受控例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: '11111',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 联动例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <RdxFormItem\\n        name='b'\\n        deps={[{ id: 'a' }]}\\n        title='111'\\n        type={'string'}\\n        xComponent={'select'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + '-' + i,\\n              value: depsValue.value + '-' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 展示隐藏 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name='a'\\n        title='111'\\n        type={'string'}\\n        xComponent={'radio'}\\n        dataSource={[\\n          { label: '展示', value: 'show' },\\n          { label: '隐藏', value: 'hidden' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='b'\\n        defaultVisible={false}\\n        deps={[{ id: 'a' }]}\\n        title='111'\\n        type={'string'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === 'show' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组对象 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem type={'object'}>\\n            <RdxFormItem name='item' title='string' type='string'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem type='string'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串多层嵌套数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem name='arr' title='arr' type={'array'}>\\n            <RdxFormItem type='string'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 强依赖关系 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem\\n          deps={[{ id: '单价' }, { id: '数量' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById('root.数量', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log('reaction', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title='总价'\\n          name='总价'\\n          type='string'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title='单价'\\n          name='单价'\\n          type='string'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title='数量'\\n          name='数量'\\n          type='string'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-formitem--基础表单\":{\"startLoc\":{\"col\":20,\"line\":14},\"endLoc\":{\"col\":1,\"line\":27},\"startBody\":{\"col\":20,\"line\":14},\"endBody\":{\"col\":1,\"line\":27}},\"基本示例-formitem--表单对象\":{\"startLoc\":{\"col\":20,\"line\":29},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":20,\"line\":29},\"endBody\":{\"col\":1,\"line\":38}},\"基本示例-formitem--多对象嵌套\":{\"startLoc\":{\"col\":21,\"line\":40},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":21,\"line\":40},\"endBody\":{\"col\":1,\"line\":53}},\"基本示例-formitem--非受控例子\":{\"startLoc\":{\"col\":21,\"line\":55},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":21,\"line\":55},\"endBody\":{\"col\":1,\"line\":74}},\"基本示例-formitem--默认值配置\":{\"startLoc\":{\"col\":21,\"line\":76},\"endLoc\":{\"col\":1,\"line\":88},\"startBody\":{\"col\":21,\"line\":76},\"endBody\":{\"col\":1,\"line\":88}},\"基本示例-formitem--受控例子\":{\"startLoc\":{\"col\":20,\"line\":90},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":20,\"line\":90},\"endBody\":{\"col\":1,\"line\":113}},\"基本示例-formitem--联动例子\":{\"startLoc\":{\"col\":20,\"line\":115},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":115},\"endBody\":{\"col\":1,\"line\":149}},\"基本示例-formitem--展示隐藏\":{\"startLoc\":{\"col\":20,\"line\":151},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":20,\"line\":151},\"endBody\":{\"col\":1,\"line\":180}},\"基本示例-formitem--数组对象\":{\"startLoc\":{\"col\":20,\"line\":182},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":20,\"line\":182},\"endBody\":{\"col\":1,\"line\":200}},\"基本示例-formitem--字符串数组\":{\"startLoc\":{\"col\":21,\"line\":202},\"endLoc\":{\"col\":1,\"line\":216},\"startBody\":{\"col\":21,\"line\":202},\"endBody\":{\"col\":1,\"line\":216}},\"基本示例-formitem--字符串多层嵌套数组\":{\"startLoc\":{\"col\":25,\"line\":218},\"endLoc\":{\"col\":1,\"line\":234},\"startBody\":{\"col\":25,\"line\":218},\"endBody\":{\"col\":1,\"line\":234}},\"基本示例-formitem--强依赖关系\":{\"startLoc\":{\"col\":21,\"line\":236},\"endLoc\":{\"col\":1,\"line\":285},\"startBody\":{\"col\":21,\"line\":236},\"endBody\":{\"col\":1,\"line\":285}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/FormItem.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { DevVisualTableTool, DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { useState } from 'react';\nimport { RdxFormItem, RdxFormContext, FormLayout } from '@czwcode/rdx-next-form';\nimport { Button } from '@alifd/next';\nexport default {\n  title: '基本示例|FormItem',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport { DevVisualTableTool, DevVisualGraphTool } from '@czwcode/rdx-plugins';\\nimport '@alifd/next/dist/next.css';\\nimport { useState } from 'react';\\nimport { RdxFormItem, RdxFormContext, FormLayout } from '@czwcode/rdx-next-form';\\nimport { Button } from '@alifd/next';\\nexport default {\\n  title: '基本示例|FormItem',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 基础表单 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='A' title='输入框' type={'string'} />\\n      <RdxFormItem\\n        name='B'\\n        title='下拉框'\\n        type={'string'}\\n        dataSource={[{ label: '测试1', value: '测试2' }]}\\n        xComponent={'select'}\\n      />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 表单对象 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='parent' title='parent' type={'object'}>\\n        <RdxFormItem name='child' title='111' type={'string'} />\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 多对象嵌套 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\\n        <RdxFormItem name='child-1' title='111' type={'string'} />\\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\\n          <RdxFormItem name='child-2' title='111' type={'string'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      <DevVisualGraphTool />\\n      <DevVisualTableTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 非受控例子 = () => {\\n  const [state, setState] = useState();\\n  return (\\n    <RdxFormContext\\n      initializeState={state}\\n      onChange={(v) => {\\n        console.log('v: ', v);\\n        setState(v);\\n      }}\\n    >\\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\\n        <RdxFormItem name='child-1' title='111' type={'string'} />\\n        <RdxFormItem name='child-2' title='111' type={'string'} />\\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\\n          <RdxFormItem name='child-3' title='111' type={'string'} />\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 默认值配置 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('value: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <RdxFormItem name='b' title='111' type={'string'} default={'hehe'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 受控例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n        setState(value);\\n      }}\\n    >\\n      <Button\\n        onClick={() => {\\n          setState({\\n            a: '11111',\\n          });\\n        }}\\n      >\\n        修改数据\\n      </Button>\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 联动例子 = () => {\\n  const [state, setState] = useState({});\\n  return (\\n    <RdxFormContext\\n      state={state}\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n        setState(value);\\n      }}\\n    >\\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\\n      <RdxFormItem\\n        name='b'\\n        deps={[{ id: 'a' }]}\\n        title='111'\\n        type={'string'}\\n        xComponent={'select'}\\n        reaction={async (context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          let a = [];\\n          for (let i = 0; i < 5; i++) {\\n            a.push({\\n              label: depsValue.value + '-' + i,\\n              value: depsValue.value + '-' + i,\\n            });\\n          }\\n          updateState({ ...value, dataSource: a });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 展示隐藏 = () => {\\n  return (\\n    <RdxFormContext>\\n      <RdxFormItem\\n        name='a'\\n        title='111'\\n        type={'string'}\\n        xComponent={'radio'}\\n        dataSource={[\\n          { label: '展示', value: 'show' },\\n          { label: '隐藏', value: 'hidden' },\\n        ]}\\n      />\\n      <RdxFormItem\\n        name='b'\\n        defaultVisible={false}\\n        deps={[{ id: 'a' }]}\\n        title='111'\\n        type={'string'}\\n        reaction={(context) => {\\n          const { depsValues, updateState, value, moduleConfig } = context;\\n          const [depsValue] = depsValues;\\n\\n          updateState({ ...value, visible: depsValue.value === 'show' });\\n        }}\\n      />\\n      <DevVisualGraphTool />\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 数组对象 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem type={'object'}>\\n            <RdxFormItem name='item' title='string' type='string'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n      {/* <DevVisualGraphTool/>\\n      <DevVisualTableTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem type='string'></RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 字符串多层嵌套数组 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem name='arr' title='arr' type={'array'}>\\n          <RdxFormItem name='arr' title='arr' type={'array'}>\\n            <RdxFormItem type='string'></RdxFormItem>\\n          </RdxFormItem>\\n        </RdxFormItem>\\n      </RdxFormItem>\\n    </RdxFormContext>\\n  );\\n};\\n\\nexport const 强依赖关系 = () => {\\n  return (\\n    <RdxFormContext\\n      onChange={(value) => {\\n        console.log('state: ', value);\\n      }}\\n    >\\n      {/* <DevVisualTableTool /> */}\\n      <RdxFormItem name='root' title='root' type={'object'}>\\n        <RdxFormItem\\n          deps={[{ id: '单价' }, { id: '数量' }]}\\n          compute={(value, context) => {\\n            const { nextById, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            nextById('root.数量', {\\n              ...amount,\\n              value: value / unit.value,\\n            });\\n          }}\\n          reaction={(context) => {\\n            const { updateState, value, depsValues } = context;\\n            const [unit, amount] = depsValues;\\n            console.log('reaction', unit.value * amount.value);\\n            updateState({\\n              ...value,\\n              value: unit.value * amount.value,\\n            });\\n          }}\\n          title='总价'\\n          name='总价'\\n          type='string'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={100}\\n          title='单价'\\n          name='单价'\\n          type='string'\\n        ></RdxFormItem>\\n        <RdxFormItem\\n          default={50}\\n          title='数量'\\n          name='数量'\\n          type='string'\\n        ></RdxFormItem>\\n      </RdxFormItem>\\n\\n      {/* <DevVisualGraphTool /> */}\\n    </RdxFormContext>\\n  );\\n};\\n\",\"locationsMap\":{\"基本示例-formitem--基础表单\":{\"startLoc\":{\"col\":20,\"line\":14},\"endLoc\":{\"col\":1,\"line\":27},\"startBody\":{\"col\":20,\"line\":14},\"endBody\":{\"col\":1,\"line\":27}},\"基本示例-formitem--表单对象\":{\"startLoc\":{\"col\":20,\"line\":29},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":20,\"line\":29},\"endBody\":{\"col\":1,\"line\":38}},\"基本示例-formitem--多对象嵌套\":{\"startLoc\":{\"col\":21,\"line\":40},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":21,\"line\":40},\"endBody\":{\"col\":1,\"line\":53}},\"基本示例-formitem--非受控例子\":{\"startLoc\":{\"col\":21,\"line\":55},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":21,\"line\":55},\"endBody\":{\"col\":1,\"line\":74}},\"基本示例-formitem--默认值配置\":{\"startLoc\":{\"col\":21,\"line\":76},\"endLoc\":{\"col\":1,\"line\":88},\"startBody\":{\"col\":21,\"line\":76},\"endBody\":{\"col\":1,\"line\":88}},\"基本示例-formitem--受控例子\":{\"startLoc\":{\"col\":20,\"line\":90},\"endLoc\":{\"col\":1,\"line\":113},\"startBody\":{\"col\":20,\"line\":90},\"endBody\":{\"col\":1,\"line\":113}},\"基本示例-formitem--联动例子\":{\"startLoc\":{\"col\":20,\"line\":115},\"endLoc\":{\"col\":1,\"line\":149},\"startBody\":{\"col\":20,\"line\":115},\"endBody\":{\"col\":1,\"line\":149}},\"基本示例-formitem--展示隐藏\":{\"startLoc\":{\"col\":20,\"line\":151},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":20,\"line\":151},\"endBody\":{\"col\":1,\"line\":180}},\"基本示例-formitem--数组对象\":{\"startLoc\":{\"col\":20,\"line\":182},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":20,\"line\":182},\"endBody\":{\"col\":1,\"line\":200}},\"基本示例-formitem--字符串数组\":{\"startLoc\":{\"col\":21,\"line\":202},\"endLoc\":{\"col\":1,\"line\":216},\"startBody\":{\"col\":21,\"line\":202},\"endBody\":{\"col\":1,\"line\":216}},\"基本示例-formitem--字符串多层嵌套数组\":{\"startLoc\":{\"col\":25,\"line\":218},\"endLoc\":{\"col\":1,\"line\":234},\"startBody\":{\"col\":25,\"line\":218},\"endBody\":{\"col\":1,\"line\":234}},\"基本示例-formitem--强依赖关系\":{\"startLoc\":{\"col\":21,\"line\":236},\"endLoc\":{\"col\":1,\"line\":285},\"startBody\":{\"col\":21,\"line\":236},\"endBody\":{\"col\":1,\"line\":285}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 基础表单 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        dataSource={[{ label: '测试1', value: '测试2' }]}\n        xComponent={'select'}\n      />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 表单对象 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent' title='parent' type={'object'}>\n        <RdxFormItem name='child' title='111' type={'string'} />\n      </RdxFormItem>\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 多对象嵌套 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-2' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n      <DevVisualGraphTool />\n      <DevVisualTableTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 非受控例子 = addSourceDecorator(() => {\n  const [state, setState] = useState();\n  return (\n    <RdxFormContext\n      initializeState={state}\n      onChange={(v) => {\n        console.log('v: ', v);\n        setState(v);\n      }}\n    >\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='child-2' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-3' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 默认值配置 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('value: ', value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem name='b' title='111' type={'string'} default={'hehe'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 受控例子 = addSourceDecorator(() => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <Button\n        onClick={() => {\n          setState({\n            a: '11111',\n          });\n        }}\n      >\n        修改数据\n      </Button>\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 联动例子 = addSourceDecorator(() => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem\n        name='b'\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        xComponent={'select'}\n        reaction={async (context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          let a = [];\n          for (let i = 0; i < 5; i++) {\n            a.push({\n              label: depsValue.value + '-' + i,\n              value: depsValue.value + '-' + i,\n            });\n          }\n          updateState({ ...value, dataSource: a });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 展示隐藏 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem\n        name='a'\n        title='111'\n        type={'string'}\n        xComponent={'radio'}\n        dataSource={[\n          { label: '展示', value: 'show' },\n          { label: '隐藏', value: 'hidden' },\n        ]}\n      />\n      <RdxFormItem\n        name='b'\n        defaultVisible={false}\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        reaction={(context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          updateState({ ...value, visible: depsValue.value === 'show' });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 数组对象 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type={'object'}>\n            <RdxFormItem name='item' title='string' type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      {/* <DevVisualGraphTool/>\n      <DevVisualTableTool /> */}\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 字符串数组 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type='string'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 字符串多层嵌套数组 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem name='arr' title='arr' type={'array'}>\n            <RdxFormItem type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 强依赖关系 = addSourceDecorator(() => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      {/* <DevVisualTableTool /> */}\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem\n          deps={[{ id: '单价' }, { id: '数量' }]}\n          compute={(value, context) => {\n            const { nextById, depsValues } = context;\n            const [unit, amount] = depsValues;\n            nextById('root.数量', {\n              ...amount,\n              value: value / unit.value,\n            });\n          }}\n          reaction={(context) => {\n            const { updateState, value, depsValues } = context;\n            const [unit, amount] = depsValues;\n            console.log('reaction', unit.value * amount.value);\n            updateState({\n              ...value,\n              value: unit.value * amount.value,\n            });\n          }}\n          title='总价'\n          name='总价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={100}\n          title='单价'\n          name='单价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={50}\n          title='数量'\n          name='数量'\n          type='string'\n        ></RdxFormItem>\n      </RdxFormItem>\n\n      {/* <DevVisualGraphTool /> */}\n    </RdxFormContext>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n",locationsMap:{"基本示例-formitem--基础表单":{startLoc:{col:20,line:36},endLoc:{col:139,line:49},startBody:{col:20,line:36},endBody:{col:139,line:49}},"基本示例-formitem--表单对象":{startLoc:{col:20,line:51},endLoc:{col:139,line:60},startBody:{col:20,line:51},endBody:{col:139,line:60}},"基本示例-formitem--多对象嵌套":{startLoc:{col:21,line:62},endLoc:{col:139,line:75},startBody:{col:21,line:62},endBody:{col:139,line:75}},"基本示例-formitem--非受控例子":{startLoc:{col:21,line:77},endLoc:{col:139,line:96},startBody:{col:21,line:77},endBody:{col:139,line:96}},"基本示例-formitem--默认值配置":{startLoc:{col:21,line:98},endLoc:{col:139,line:110},startBody:{col:21,line:98},endBody:{col:139,line:110}},"基本示例-formitem--受控例子":{startLoc:{col:20,line:112},endLoc:{col:139,line:135},startBody:{col:20,line:112},endBody:{col:139,line:135}},"基本示例-formitem--联动例子":{startLoc:{col:20,line:137},endLoc:{col:139,line:171},startBody:{col:20,line:137},endBody:{col:139,line:171}},"基本示例-formitem--展示隐藏":{startLoc:{col:20,line:173},endLoc:{col:139,line:202},startBody:{col:20,line:173},endBody:{col:139,line:202}},"基本示例-formitem--数组对象":{startLoc:{col:20,line:204},endLoc:{col:139,line:222},startBody:{col:20,line:204},endBody:{col:139,line:222}},"基本示例-formitem--字符串数组":{startLoc:{col:21,line:224},endLoc:{col:139,line:238},startBody:{col:21,line:224},endBody:{col:139,line:238}},"基本示例-formitem--字符串多层嵌套数组":{startLoc:{col:25,line:240},endLoc:{col:139,line:256},startBody:{col:25,line:240},endBody:{col:139,line:256}},"基本示例-formitem--强依赖关系":{startLoc:{col:21,line:258},endLoc:{col:139,line:307},startBody:{col:21,line:258},endBody:{col:139,line:307}}}},storySource:{source:"import React from 'react';\nimport { DevVisualTableTool, DevVisualGraphTool } from '@czwcode/rdx-plugins';\nimport '@alifd/next/dist/next.css';\nimport { useState } from 'react';\nimport { RdxFormItem, RdxFormContext, FormLayout } from '@czwcode/rdx-next-form';\nimport { Button } from '@alifd/next';\nexport default {\n  title: '基本示例|FormItem',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 基础表单 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='A' title='输入框' type={'string'} />\n      <RdxFormItem\n        name='B'\n        title='下拉框'\n        type={'string'}\n        dataSource={[{ label: '测试1', value: '测试2' }]}\n        xComponent={'select'}\n      />\n    </RdxFormContext>\n  );\n};\n\nexport const 表单对象 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent' title='parent' type={'object'}>\n        <RdxFormItem name='child' title='111' type={'string'} />\n      </RdxFormItem>\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 多对象嵌套 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-2' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n      <DevVisualGraphTool />\n      <DevVisualTableTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 非受控例子 = () => {\n  const [state, setState] = useState();\n  return (\n    <RdxFormContext\n      initializeState={state}\n      onChange={(v) => {\n        console.log('v: ', v);\n        setState(v);\n      }}\n    >\n      <RdxFormItem name='parent1' title='parent' type={'object'}>\n        <RdxFormItem name='child-1' title='111' type={'string'} />\n        <RdxFormItem name='child-2' title='111' type={'string'} />\n        <RdxFormItem name='parent2' title='parent' type={'object'}>\n          <RdxFormItem name='child-3' title='111' type={'string'} />\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 默认值配置 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('value: ', value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem name='b' title='111' type={'string'} default={'hehe'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 受控例子 = () => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <Button\n        onClick={() => {\n          setState({\n            a: '11111',\n          });\n        }}\n      >\n        修改数据\n      </Button>\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 联动例子 = () => {\n  const [state, setState] = useState({});\n  return (\n    <RdxFormContext\n      state={state}\n      onChange={(value) => {\n        console.log('state: ', value);\n        setState(value);\n      }}\n    >\n      <RdxFormItem name='a' title='111' type={'string'} default={'haha'} />\n      <RdxFormItem\n        name='b'\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        xComponent={'select'}\n        reaction={async (context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          let a = [];\n          for (let i = 0; i < 5; i++) {\n            a.push({\n              label: depsValue.value + '-' + i,\n              value: depsValue.value + '-' + i,\n            });\n          }\n          updateState({ ...value, dataSource: a });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 展示隐藏 = () => {\n  return (\n    <RdxFormContext>\n      <RdxFormItem\n        name='a'\n        title='111'\n        type={'string'}\n        xComponent={'radio'}\n        dataSource={[\n          { label: '展示', value: 'show' },\n          { label: '隐藏', value: 'hidden' },\n        ]}\n      />\n      <RdxFormItem\n        name='b'\n        defaultVisible={false}\n        deps={[{ id: 'a' }]}\n        title='111'\n        type={'string'}\n        reaction={(context) => {\n          const { depsValues, updateState, value, moduleConfig } = context;\n          const [depsValue] = depsValues;\n\n          updateState({ ...value, visible: depsValue.value === 'show' });\n        }}\n      />\n      <DevVisualGraphTool />\n    </RdxFormContext>\n  );\n};\n\nexport const 数组对象 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type={'object'}>\n            <RdxFormItem name='item' title='string' type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n      {/* <DevVisualGraphTool/>\n      <DevVisualTableTool /> */}\n    </RdxFormContext>\n  );\n};\n\nexport const 字符串数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem type='string'></RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 字符串多层嵌套数组 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem name='arr' title='arr' type={'array'}>\n          <RdxFormItem name='arr' title='arr' type={'array'}>\n            <RdxFormItem type='string'></RdxFormItem>\n          </RdxFormItem>\n        </RdxFormItem>\n      </RdxFormItem>\n    </RdxFormContext>\n  );\n};\n\nexport const 强依赖关系 = () => {\n  return (\n    <RdxFormContext\n      onChange={(value) => {\n        console.log('state: ', value);\n      }}\n    >\n      {/* <DevVisualTableTool /> */}\n      <RdxFormItem name='root' title='root' type={'object'}>\n        <RdxFormItem\n          deps={[{ id: '单价' }, { id: '数量' }]}\n          compute={(value, context) => {\n            const { nextById, depsValues } = context;\n            const [unit, amount] = depsValues;\n            nextById('root.数量', {\n              ...amount,\n              value: value / unit.value,\n            });\n          }}\n          reaction={(context) => {\n            const { updateState, value, depsValues } = context;\n            const [unit, amount] = depsValues;\n            console.log('reaction', unit.value * amount.value);\n            updateState({\n              ...value,\n              value: unit.value * amount.value,\n            });\n          }}\n          title='总价'\n          name='总价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={100}\n          title='单价'\n          name='单价'\n          type='string'\n        ></RdxFormItem>\n        <RdxFormItem\n          default={50}\n          title='数量'\n          name='数量'\n          type='string'\n        ></RdxFormItem>\n      </RdxFormItem>\n\n      {/* <DevVisualGraphTool /> */}\n    </RdxFormContext>\n  );\n};\n",locationsMap:{"基本示例-formitem--基础表单":{startLoc:{col:20,line:14},endLoc:{col:1,line:27},startBody:{col:20,line:14},endBody:{col:1,line:27}},"基本示例-formitem--表单对象":{startLoc:{col:20,line:29},endLoc:{col:1,line:38},startBody:{col:20,line:29},endBody:{col:1,line:38}},"基本示例-formitem--多对象嵌套":{startLoc:{col:21,line:40},endLoc:{col:1,line:53},startBody:{col:21,line:40},endBody:{col:1,line:53}},"基本示例-formitem--非受控例子":{startLoc:{col:21,line:55},endLoc:{col:1,line:74},startBody:{col:21,line:55},endBody:{col:1,line:74}},"基本示例-formitem--默认值配置":{startLoc:{col:21,line:76},endLoc:{col:1,line:88},startBody:{col:21,line:76},endBody:{col:1,line:88}},"基本示例-formitem--受控例子":{startLoc:{col:20,line:90},endLoc:{col:1,line:113},startBody:{col:20,line:90},endBody:{col:1,line:113}},"基本示例-formitem--联动例子":{startLoc:{col:20,line:115},endLoc:{col:1,line:149},startBody:{col:20,line:115},endBody:{col:1,line:149}},"基本示例-formitem--展示隐藏":{startLoc:{col:20,line:151},endLoc:{col:1,line:180},startBody:{col:20,line:151},endBody:{col:1,line:180}},"基本示例-formitem--数组对象":{startLoc:{col:20,line:182},endLoc:{col:1,line:200},startBody:{col:20,line:182},endBody:{col:1,line:200}},"基本示例-formitem--字符串数组":{startLoc:{col:21,line:202},endLoc:{col:1,line:216},startBody:{col:21,line:202},endBody:{col:1,line:216}},"基本示例-formitem--字符串多层嵌套数组":{startLoc:{col:25,line:218},endLoc:{col:1,line:234},startBody:{col:25,line:218},endBody:{col:1,line:234}},"基本示例-formitem--强依赖关系":{startLoc:{col:21,line:236},endLoc:{col:1,line:285},startBody:{col:21,line:236},endBody:{col:1,line:285}}}},info:{inline:!0}}};const 基础表单=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,null,react_default.a.createElement(FromItem.b,{name:"A",title:"输入框",type:"string"}),react_default.a.createElement(FromItem.b,{name:"B",title:"下拉框",type:"string",dataSource:[{label:"测试1",value:"测试2"}],xComponent:"select"})),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),表单对象=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,null,react_default.a.createElement(FromItem.b,{name:"parent",title:"parent",type:"object"},react_default.a.createElement(FromItem.b,{name:"child",title:"111",type:"string"})),react_default.a.createElement(EchartsGraph,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),多对象嵌套=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,null,react_default.a.createElement(FromItem.b,{name:"parent1",title:"parent",type:"object"},react_default.a.createElement(FromItem.b,{name:"child-1",title:"111",type:"string"}),react_default.a.createElement(FromItem.b,{name:"parent2",title:"parent",type:"object"},react_default.a.createElement(FromItem.b,{name:"child-2",title:"111",type:"string"}))),react_default.a.createElement(EchartsGraph,null),react_default.a.createElement(visualState,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),非受控例子=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=Object(react.useState)();return react_default.a.createElement(RdxFormContext.a,{initializeState:state,onChange:v=>{console.log("v: ",v),setState(v)}},react_default.a.createElement(FromItem.b,{name:"parent1",title:"parent",type:"object"},react_default.a.createElement(FromItem.b,{name:"child-1",title:"111",type:"string"}),react_default.a.createElement(FromItem.b,{name:"child-2",title:"111",type:"string"}),react_default.a.createElement(FromItem.b,{name:"parent2",title:"parent",type:"object"},react_default.a.createElement(FromItem.b,{name:"child-3",title:"111",type:"string"}))))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),默认值配置=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("value: ",value)}},react_default.a.createElement(FromItem.b,{name:"a",title:"111",type:"string",default:"haha"}),react_default.a.createElement(FromItem.b,{name:"b",title:"111",type:"string",default:"hehe"}),react_default.a.createElement(EchartsGraph,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),受控例子=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=Object(react.useState)({});return react_default.a.createElement(RdxFormContext.a,{state:state,onChange:value=>{console.log("state: ",value),setState(value)}},react_default.a.createElement(es_button.a,{onClick:()=>{setState({a:"11111"})}},"修改数据"),react_default.a.createElement(FromItem.b,{name:"a",title:"111",type:"string",default:"haha"}),react_default.a.createElement(EchartsGraph,null))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),联动例子=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[state,setState]=Object(react.useState)({});return react_default.a.createElement(RdxFormContext.a,{state:state,onChange:value=>{console.log("state: ",value),setState(value)}},react_default.a.createElement(FromItem.b,{name:"a",title:"111",type:"string",default:"haha"}),react_default.a.createElement(FromItem.b,{name:"b",deps:[{id:"a"}],title:"111",type:"string",xComponent:"select",reaction:context=>__awaiter(void 0,void 0,void 0,(function*(){const{depsValues:depsValues,updateState:updateState,value:value,moduleConfig:moduleConfig}=context,[depsValue]=depsValues;let a=[];for(let i=0;i<5;i++)a.push({label:depsValue.value+"-"+i,value:depsValue.value+"-"+i});updateState(Object.assign(Object.assign({},value),{dataSource:a}))}))}),react_default.a.createElement(EchartsGraph,null))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),展示隐藏=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,null,react_default.a.createElement(FromItem.b,{name:"a",title:"111",type:"string",xComponent:"radio",dataSource:[{label:"展示",value:"show"},{label:"隐藏",value:"hidden"}]}),react_default.a.createElement(FromItem.b,{name:"b",defaultVisible:!1,deps:[{id:"a"}],title:"111",type:"string",reaction:context=>{const{depsValues:depsValues,updateState:updateState,value:value,moduleConfig:moduleConfig}=context,[depsValue]=depsValues;updateState(Object.assign(Object.assign({},value),{visible:"show"===depsValue.value}))}}),react_default.a.createElement(EchartsGraph,null)),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),数组对象=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("state: ",value)}},react_default.a.createElement(FromItem.b,{name:"root",title:"root",type:"object"},react_default.a.createElement(FromItem.b,{name:"arr",title:"arr",type:"array"},react_default.a.createElement(FromItem.b,{type:"object"},react_default.a.createElement(FromItem.b,{name:"item",title:"string",type:"string"}))))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),字符串数组=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("state: ",value)}},react_default.a.createElement(FromItem.b,{name:"root",title:"root",type:"object"},react_default.a.createElement(FromItem.b,{name:"arr",title:"arr",type:"array"},react_default.a.createElement(FromItem.b,{type:"string"})))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),字符串多层嵌套数组=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("state: ",value)}},react_default.a.createElement(FromItem.b,{name:"root",title:"root",type:"object"},react_default.a.createElement(FromItem.b,{name:"arr",title:"arr",type:"array"},react_default.a.createElement(FromItem.b,{name:"arr",title:"arr",type:"array"},react_default.a.createElement(FromItem.b,{type:"string"}))))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),强依赖关系=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("state: ",value)}},react_default.a.createElement(FromItem.b,{name:"root",title:"root",type:"object"},react_default.a.createElement(FromItem.b,{deps:[{id:"单价"},{id:"数量"}],compute:(value,context)=>{const{nextById:nextById,depsValues:depsValues}=context,[unit,amount]=depsValues;nextById("root.数量",Object.assign(Object.assign({},amount),{value:value/unit.value}))},reaction:context=>{const{updateState:updateState,value:value,depsValues:depsValues}=context,[unit,amount]=depsValues;console.log("reaction",unit.value*amount.value),updateState(Object.assign(Object.assign({},value),{value:unit.value*amount.value}))},title:"总价",name:"总价",type:"string"}),react_default.a.createElement(FromItem.b,{default:100,title:"单价",name:"单价",type:"string"}),react_default.a.createElement(FromItem.b,{default:50,title:"数量",name:"数量",type:"string"}))),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/FormItem.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2351:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"http配置器",(function(){return http配置器}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),dist=__webpack_require__(91);var RequestType;!function(RequestType){RequestType.GET="GET",RequestType.POST="POST"}(RequestType||(RequestType={}));const REQUEST_TYPE=[RequestType.GET,RequestType.POST];var RdxFormContext=__webpack_require__(307),FromItem=__webpack_require__(83),global=__webpack_require__(563),View=__webpack_require__(2359),FormLayout=__webpack_require__(2363),input=__webpack_require__(39),es_button=__webpack_require__(57);const jsonParse=json=>{let v;try{v=JSON.parse(json)}catch(error){throw new Error("POST BODY 内容解析失败--"+error.toString())}return v};function parseGetParams(url){try{const urlInstance=new URL(url),keys=Array.from(urlInstance.searchParams.keys()),values=Array.from(urlInstance.searchParams.values());return keys.map((key,index)=>({key:key,value:values[index]}))}catch(error){return[]}}function parseParams(requestType,urlstring,body){return requestType===RequestType.GET?parseGetParams(urlstring):function parsePostParams(body){return Object.keys(jsonParse(body)).map(key=>({key:key}))}(body)}function mockResult(res,formatter,requestType,url,body){let fields=function toFields(data,formatter){let res;try{res=new Function("data",formatter)(data)}catch(error){console.warn("toFields error",error.toString())}return res}(res,formatter)||[];fields=Object.keys(fields[0]||{});const innerParams=((fields,params)=>({wheres:params.map(item=>Object.assign(Object.assign({},item),{op:"="})),sorts:fields.map(item=>({key:item,desc:!0})),pageIndex:0,pageSize:100}))(fields,parseParams(requestType,url,body));return Object.assign({data:res},innerParams)}var axios=__webpack_require__(1010);const axiosInstance=__webpack_require__.n(axios).a.create({transformResponse:data=>data=JSON.parse(data)});function fetchData(options){const{defaultOptions:defaultOptions,realFetchOptions:realFetchOptions={},token:token,isFormatter:isFormatter=!0}=options,commonConfig={withCredentials:!0,cancelToken:token},config=Object.assign(Object.assign({},commonConfig),{headers:{"content-type":"application/json"}}),{requestInfo:requestInfo,resultProcess:resultProcess,requestProcess:requestProcess}=defaultOptions,{url:url,requestType:requestType,body:body}=requestInfo,{useFilter:useFilter,filter:filter,dataField:dataField}=resultProcess,{useParamsTransform:useParamsTransform}=requestProcess,{isRealFetch:isRealFetch=!1,wheres:wheres=[],pageIndex:pageIndex=1,pageSize:pageSize=100,sorts:sorts=[]}=realFetchOptions;let promise;if(!url)throw new Error("url 不能为空");if(isRealFetch){const urlObj=new URL(url),baseUrl=urlObj.origin+urlObj.pathname,p=function createParams(useParamsTransform,wheres,pageIndex,pageSize,sorts){let p=useParamsTransform?{pageIndex:pageIndex,pageSize:pageSize,sorts:JSON.stringify(sorts)}:{};return wheres.forEach(where=>{p[where.key]=where.value}),p}(useParamsTransform,wheres,pageIndex,pageSize,sorts);promise=requestType===RequestType.GET?axiosInstance.get(`${baseUrl}?${function object2param(obj){if(!obj)return"";const strarr=[];for(const i in obj)void 0!==obj[i]&&null!==obj[i]&&strarr.push(`${i}=${obj[i]}`);return strarr.join("&")}(p)}`,commonConfig):axiosInstance.post(baseUrl,p,Object.assign({},config))}else promise=requestType===RequestType.GET?axiosInstance.get(url,commonConfig):axiosInstance.post(url,body,config);return isFormatter?promise.then(res=>(useFilter&&(res={data:res.data,wheres:wheres,sorts:sorts,pageIndex:pageIndex,pageSize:pageSize}),parseResult({result:res,useFilter:useFilter,filterBody:filter,dataField:dataField}))):promise.then(res=>res.data)}function parseResult(options){let{result:result,useFilter:useFilter,filterBody:filterBody="return data.data.data",dataField:dataField}=options;if(dataField||(dataField="data"),!useFilter)return result[dataField];return new Function("data",filterBody)(result)}var UrlParmasType,__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};function createNewUrl(url,params){const urlInstance=new URL(url),parmasString=params.map(item=>`${item.key}=${item.value}`).join("&"),pathname="/"===urlInstance.pathname?"":urlInstance.pathname;return`${urlInstance.origin}${pathname}${parmasString?"?"+parmasString:""}`}function HttpSetting(props){const{value:value,onChange:onChange}=props,compute=(value,context)=>{const{id:id,nextById:nextById,depsValues:depsValues}=context,ids=id.split("."),currentIndex=ids[ids.length-2],currentKey=ids[ids.length-1],[urlObj]=depsValues,newUrl=function updateUrl(url,type,key,index,value){const params=parseGetParams(url);return parseInt(index)>=params.length?params.push({key:"",value:"",[key]:value}):params[index][key]=value,createNewUrl(url,params)}(urlObj.value,UrlParmasType.Key,currentKey,currentIndex,value);nextById("requestInfo.url",Object.assign(Object.assign({},urlObj),{value:newUrl}))};return react_default.a.createElement(RdxFormContext.a,{state:value,onChange:onChange},react_default.a.createElement(FromItem.b,{name:"requestInfo",type:global.a.Object,title:"请求配置"},react_default.a.createElement(input.a.Group,null,react_default.a.createElement(FromItem.b,{name:"requestType",type:global.a.String,dataSource:REQUEST_TYPE.map(item=>({label:item,value:item})),xComponent:dist.XComponentType.Select}),react_default.a.createElement(FromItem.b,{name:"url",type:global.a.String,reaction:context=>{const{value:value}=context;new URL(value.value)},rules:[value=>__awaiter(this,void 0,void 0,(function*(){try{return void new URL(value)}catch(error){return"请填入合法链接"}}))],xProps:{style:{width:320}}}),react_default.a.createElement(View.a,{id:"data",render:context=>{const{refresh:refresh}=context;return react_default.a.createElement(es_button.a,{type:"primary",onClick:()=>{refresh()}},"查询")},reaction:context=>__awaiter(this,void 0,void 0,(function*(){try{const{value:value,updateState:updateState,state:state}=context,res=yield fetchData({defaultOptions:state.state,isFormatter:!1});updateState(Object.assign(Object.assign({},value),{value:res}))}catch(error){}})),areEqualForTask:()=>!1})),react_default.a.createElement(FromItem.b,{deps:[{id:"url"}],reaction:context=>{const{updateState:updateState,value:value,id:id,depsValues:depsValues}=context,[urlObj]=depsValues;updateState(Object.assign(Object.assign({},value),{visible:!0,value:parseGetParams(urlObj.value)}))},name:"params",title:"参数配置",compute:(value,context)=>{const{depsValues:depsValues,nextById:nextById}=context,[urlObj]=depsValues;nextById("requestInfo.url",Object.assign(Object.assign({},urlObj),{value:createNewUrl(urlObj.value,value)}))},xComponent:dist.XComponentType.ArrayTable,type:global.a.Array},react_default.a.createElement(FromItem.b,{type:global.a.Object,default:{key:"",value:""}},react_default.a.createElement(FromItem.b,{deps:[{id:"requestInfo.url",type:FromItem.a.Absolute}],compute:compute,title:"key",default:"1",name:"key",type:global.a.String}),react_default.a.createElement(FromItem.b,{deps:[{id:"requestInfo.url",type:FromItem.a.Absolute}],compute:compute,title:"value",default:"2",name:"value",type:global.a.String}))),react_default.a.createElement(FromItem.b,{name:"body",defaultVisible:!1,type:global.a.String,deps:[{id:"requestType"}],default:"{}",rules:[value=>__awaiter(this,void 0,void 0,(function*(){try{return void jsonParse(value)}catch(error){return"json不合法"}}))],firstRender:!1,xComponent:dist.XComponentType.JsonEditor,reaction:context=>__awaiter(this,void 0,void 0,(function*(){const{updateState:updateState,value:value,depsValues:depsValues}=context,[requestType]=depsValues.map(item=>item.value);updateState(Object.assign(Object.assign({},value),{visible:requestType===RequestType.POST}))}))})),react_default.a.createElement(FromItem.b,{name:"requestProcess",type:global.a.Object},react_default.a.createElement(FormLayout.a,{labelCol:8},react_default.a.createElement(FromItem.b,{name:"useParamsTransform",title:"默认参数",desc:"默认参数指的是(pageIndex, pageSize, sort)等参数",xComponent:dist.XComponentType.Checkbox,type:global.a.Boolean}))),react_default.a.createElement(FromItem.b,{name:"resultProcess",type:global.a.Object},react_default.a.createElement(FormLayout.a,null,react_default.a.createElement(FromItem.b,{name:"useFilter",xComponent:dist.XComponentType.Checkbox,title:"开启过滤器",type:global.a.Boolean}),react_default.a.createElement(FromItem.b,{deps:[{id:"useFilter"}],reaction:context=>{const{value:value,updateState:updateState,depsValues:depsValues}=context,[useFilterInstance]=depsValues;updateState(Object.assign(Object.assign({},value),{visible:!useFilterInstance.value}))},default:"data",name:"dataField",title:"接口数据字段",type:global.a.String}),react_default.a.createElement(FromItem.b,{name:"filter",defaultVisible:!1,deps:[{id:"useFilter"},{id:"data",type:FromItem.a.Absolute},{id:"requestInfo.requestType",type:FromItem.a.Absolute},{id:"requestInfo.url",type:FromItem.a.Absolute},{id:"requestInfo.body",type:FromItem.a.Absolute}],reaction:context=>{const{value:value,updateState:updateState,depsValues:depsValues}=context,[useFilterInstance,data,requestTypeIsntance,urlInstance,body]=depsValues.map(item=>item.value);try{const result=mockResult(data,value,requestTypeIsntance,urlInstance,body);updateState(Object.assign(Object.assign({},value),{visible:!0===useFilterInstance,xProps:{src:result}}))}catch(error){}},xProps:{isDialog:!0,trigger:react_default.a.createElement(es_button.a,{type:"primary"},"打开过滤器编辑器")},firstRender:!1,title:"数据过滤器",type:global.a.String,xComponent:"code"}))),react_default.a.createElement(FromItem.b,{name:"watchResult",type:global.a.String,deps:[{id:"resultProcess.useFilter"},{id:"resultProcess.filter",type:FromItem.a.Absolute},{id:"resultProcess.dataField",type:FromItem.a.Absolute},{id:"data",type:FromItem.a.Absolute},{id:"requestInfo.requestType",type:FromItem.a.Absolute},{id:"requestInfo.url",type:FromItem.a.Absolute},{id:"requestInfo.body",type:FromItem.a.Absolute}],reaction:context=>{try{const{value:value,updateState:updateState,depsValues:depsValues}=context;let[useFilter,filter,dataField,result,requestType,url,body]=depsValues.map(item=>item.value);useFilter&&(result=mockResult(result,filter,requestType,url,body)),result=parseResult({result:result,useFilter:useFilter,filterBody:filter,dataField:dataField}),updateState(Object.assign(Object.assign({},value),{value:JSON.stringify(result)}))}catch(error){}},xComponent:dist.XComponentType.Json,title:"结果预览"}))}!function(UrlParmasType){UrlParmasType.Key="key",UrlParmasType.Value="value"}(UrlParmasType||(UrlParmasType={}));__webpack_require__(30).withSource;var addSourceDecorator=__webpack_require__(30).addSource,__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting"),__STORY__="import React from 'react';\nimport { setup } from '@czwcode/rdx-next-form';\nimport HttpSetting from './httpSettings';\nimport { useState } from 'react';\nimport { IHttpSettingValue } from './types';\nsetup();\nexport default {\n  title: '场景案例|http配置器',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const http配置器 = () => {\n  const [value, setValue] = useState<IHttpSettingValue>({\n    requestInfo: {\n      requestType: 'GET',\n      url: '',\n    },\n  } as any);\n  return (\n    <div style={{ width: 500 }}>\n      <HttpSetting\n        value={value}\n        onChange={(v) => {\n          console.log('v: ', v);\n          setValue(v);\n        }}\n      />\n    </div>\n  );\n};\n",__ADDS_MAP__={"场景案例-http配置器--http配置器":{startLoc:{col:23,line:14},endLoc:{col:1,line:32},startBody:{col:23,line:14},endBody:{col:1,line:32}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};Object(dist.setup)();__webpack_exports__.default={title:"场景案例|http配置器",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nimport HttpSetting from \'./httpSettings\';\\\\nimport { useState } from \'react\';\\\\nimport { IHttpSettingValue } from \'./types\';\\\\nsetup();\\\\nexport default {\\\\n  title: \'场景案例|http配置器\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const http配置器 = () => {\\\\n  const [value, setValue] = useState<IHttpSettingValue>({\\\\n    requestInfo: {\\\\n      requestType: \'GET\',\\\\n      url: \'\',\\\\n    },\\\\n  } as any);\\\\n  return (\\\\n    <div style={{ width: 500 }}>\\\\n      <HttpSetting\\\\n        value={value}\\\\n        onChange={(v) => {\\\\n          console.log(\'v: \', v);\\\\n          setValue(v);\\\\n        }}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景案例-http配置器--http配置器\\":{\\"startLoc\\":{\\"col\\":23,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":32},\\"startBody\\":{\\"col\\":23,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":32}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/index.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nimport HttpSetting from \'./httpSettings\';\\\\nimport { useState } from \'react\';\\\\nimport { IHttpSettingValue } from \'./types\';\\\\nsetup();\\\\nexport default {\\\\n  title: \'场景案例|http配置器\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const http配置器 = () => {\\\\n  const [value, setValue] = useState<IHttpSettingValue>({\\\\n    requestInfo: {\\\\n      requestType: \'GET\',\\\\n      url: \'\',\\\\n    },\\\\n  } as any);\\\\n  return (\\\\n    <div style={{ width: 500 }}>\\\\n      <HttpSetting\\\\n        value={value}\\\\n        onChange={(v) => {\\\\n          console.log(\'v: \', v);\\\\n          setValue(v);\\\\n        }}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"场景案例-http配置器--http配置器\\":{\\"startLoc\\":{\\"col\\":23,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":32},\\"startBody\\":{\\"col\\":23,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":32}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = addSourceDecorator(() => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":36},"endLoc":{"col":139,"line":54},"startBody":{"col":23,"line":36},"endBody":{"col":139,"line":54}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = () => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":14},"endLoc":{"col":1,"line":32},"startBody":{"col":23,"line":14},"endBody":{"col":1,"line":32}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { setup } from \'@czwcode/rdx-next-form\';\nimport HttpSetting from \'./httpSettings\';\nimport { useState } from \'react\';\nimport { IHttpSettingValue } from \'./types\';\nsetup();\nexport default {\n  title: \'场景案例|http配置器\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nimport HttpSetting from \'./httpSettings\';\\\\nimport { useState } from \'react\';\\\\nimport { IHttpSettingValue } from \'./types\';\\\\nsetup();\\\\nexport default {\\\\n  title: \'场景案例|http配置器\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const http配置器 = () => {\\\\n  const [value, setValue] = useState<IHttpSettingValue>({\\\\n    requestInfo: {\\\\n      requestType: \'GET\',\\\\n      url: \'\',\\\\n    },\\\\n  } as any);\\\\n  return (\\\\n    <div style={{ width: 500 }}>\\\\n      <HttpSetting\\\\n        value={value}\\\\n        onChange={(v) => {\\\\n          console.log(\'v: \', v);\\\\n          setValue(v);\\\\n        }}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景案例-http配置器--http配置器\\":{\\"startLoc\\":{\\"col\\":23,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":32},\\"startBody\\":{\\"col\\":23,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":32}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/index.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nimport HttpSetting from \'./httpSettings\';\\\\nimport { useState } from \'react\';\\\\nimport { IHttpSettingValue } from \'./types\';\\\\nsetup();\\\\nexport default {\\\\n  title: \'场景案例|http配置器\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const http配置器 = () => {\\\\n  const [value, setValue] = useState<IHttpSettingValue>({\\\\n    requestInfo: {\\\\n      requestType: \'GET\',\\\\n      url: \'\',\\\\n    },\\\\n  } as any);\\\\n  return (\\\\n    <div style={{ width: 500 }}>\\\\n      <HttpSetting\\\\n        value={value}\\\\n        onChange={(v) => {\\\\n          console.log(\'v: \', v);\\\\n          setValue(v);\\\\n        }}\\\\n      />\\\\n    </div>\\\\n  );\\\\n};\\\\n\\",\\"locationsMap\\":{\\"场景案例-http配置器--http配置器\\":{\\"startLoc\\":{\\"col\\":23,\\"line\\":14},\\"endLoc\\":{\\"col\\":1,\\"line\\":32},\\"startBody\\":{\\"col\\":23,\\"line\\":14},\\"endBody\\":{\\"col\\":1,\\"line\\":32}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = addSourceDecorator(() => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n","locationsMap":{"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":36},"endLoc":{"col":139,"line":54},"startBody":{"col":23,"line":36},"endBody":{"col":139,"line":54}}}},"storySource":{"source":"import React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = () => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n};\\n","locationsMap":{"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":14},"endLoc":{"col":1,"line":32},"startBody":{"col":23,"line":14},"endBody":{"col":1,"line":32}}}},\n    info: { inline: true },\n  },\n};\n\nexport const http配置器 = addSourceDecorator(addSourceDecorator(() => {\n  const [value, setValue] = useState<IHttpSettingValue>({\n    requestInfo: {\n      requestType: \'GET\',\n      url: \'\',\n    },\n  } as any);\n  return (\n    <div style={{ width: 500 }}>\n      <HttpSetting\n        value={value}\n        onChange={(v) => {\n          console.log(\'v: \', v);\n          setValue(v);\n        }}\n      />\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n',locationsMap:{"场景案例-http配置器--http配置器":{startLoc:{col:23,line:58},endLoc:{col:277,line:76},startBody:{col:23,line:58},endBody:{col:277,line:76}}}},storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/httpSetting";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = () => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n};\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":14},"endLoc":{"col":1,"line":32},"startBody":{"col":23,"line":14},"endBody":{"col":1,"line":32}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { setup } from \'@czwcode/rdx-next-form\';\nimport HttpSetting from \'./httpSettings\';\nimport { useState } from \'react\';\nimport { IHttpSettingValue } from \'./types\';\nsetup();\nexport default {\n  title: \'场景案例|http配置器\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nimport HttpSetting from \'./httpSettings\';\\nimport { useState } from \'react\';\\nimport { IHttpSettingValue } from \'./types\';\\nsetup();\\nexport default {\\n  title: \'场景案例|http配置器\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const http配置器 = () => {\\n  const [value, setValue] = useState<IHttpSettingValue>({\\n    requestInfo: {\\n      requestType: \'GET\',\\n      url: \'\',\\n    },\\n  } as any);\\n  return (\\n    <div style={{ width: 500 }}>\\n      <HttpSetting\\n        value={value}\\n        onChange={(v) => {\\n          console.log(\'v: \', v);\\n          setValue(v);\\n        }}\\n      />\\n    </div>\\n  );\\n};\\n","locationsMap":{"场景案例-http配置器--http配置器":{"startLoc":{"col":23,"line":14},"endLoc":{"col":1,"line":32},"startBody":{"col":23,"line":14},"endBody":{"col":1,"line":32}}}},\n    info: { inline: true },\n  },\n};\n\nexport const http配置器 = addSourceDecorator(() => {\n  const [value, setValue] = useState<IHttpSettingValue>({\n    requestInfo: {\n      requestType: \'GET\',\n      url: \'\',\n    },\n  } as any);\n  return (\n    <div style={{ width: 500 }}>\n      <HttpSetting\n        value={value}\n        onChange={(v) => {\n          console.log(\'v: \', v);\n          setValue(v);\n        }}\n      />\n    </div>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n',locationsMap:{"场景案例-http配置器--http配置器":{startLoc:{col:23,line:36},endLoc:{col:139,line:54},startBody:{col:23,line:36},endBody:{col:139,line:54}}}},storySource:{source:"import React from 'react';\nimport { setup } from '@czwcode/rdx-next-form';\nimport HttpSetting from './httpSettings';\nimport { useState } from 'react';\nimport { IHttpSettingValue } from './types';\nsetup();\nexport default {\n  title: '场景案例|http配置器',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const http配置器 = () => {\n  const [value, setValue] = useState<IHttpSettingValue>({\n    requestInfo: {\n      requestType: 'GET',\n      url: '',\n    },\n  } as any);\n  return (\n    <div style={{ width: 500 }}>\n      <HttpSetting\n        value={value}\n        onChange={(v) => {\n          console.log('v: ', v);\n          setValue(v);\n        }}\n      />\n    </div>\n  );\n};\n",locationsMap:{"场景案例-http配置器--http配置器":{startLoc:{col:23,line:14},endLoc:{col:1,line:32},startBody:{col:23,line:14},endBody:{col:1,line:32}}}},info:{inline:!0}}};const http配置器=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const[value,setValue]=Object(react.useState)({requestInfo:{requestType:"GET",url:""}});return react_default.a.createElement("div",{style:{width:500}},react_default.a.createElement(HttpSetting,{value:value,onChange:v=>{console.log("v: ",v),setValue(v)}}))},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2353:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"选择类型和默认值",(function(){return 选择类型和默认值})),__webpack_require__.d(__webpack_exports__,"仅默认值",(function(){return 仅默认值})),__webpack_require__.d(__webpack_exports__,"仅类型",(function(){return 仅类型}));var ChooseValueType,LinkedDataType,LinkedValueChooseType,react=__webpack_require__(1),react_default=__webpack_require__.n(react);!function(ChooseValueType){ChooseValueType.Value="Value",ChooseValueType.Date="Date",ChooseValueType.OnlyChooseType="OnlyChooseType",ChooseValueType.OnlyChooseDefaultValue="OnlyChooseDefaultValue"}(ChooseValueType||(ChooseValueType={})),function(LinkedDataType){LinkedDataType.DimensionMember="dimensionMember",LinkedDataType.MeasureMember="measureMember"}(LinkedDataType||(LinkedDataType={})),function(LinkedValueChooseType){LinkedValueChooseType.Single="Single",LinkedValueChooseType.Multiple="Multiple"}(LinkedValueChooseType||(LinkedValueChooseType={}));const LinkedValueChooseData=[{label:"单选",value:LinkedValueChooseType.Single},{label:"多选",value:LinkedValueChooseType.Multiple}];var BaseLinkedDefaultValueTypeEnum,DimensionDataDefaultValueTypeEnum,MeasureDataDefaultValueTypeEnum,OtherDefaultValueTypeEnum,DateDefaultValueTypeEnum;!function(BaseLinkedDefaultValueTypeEnum){BaseLinkedDefaultValueTypeEnum.SelectAll="selectAll",BaseLinkedDefaultValueTypeEnum.None="None",BaseLinkedDefaultValueTypeEnum.SelectFirst="selectFirst"}(BaseLinkedDefaultValueTypeEnum||(BaseLinkedDefaultValueTypeEnum={})),function(DimensionDataDefaultValueTypeEnum){DimensionDataDefaultValueTypeEnum.Custom="custom"}(DimensionDataDefaultValueTypeEnum||(DimensionDataDefaultValueTypeEnum={})),function(MeasureDataDefaultValueTypeEnum){MeasureDataDefaultValueTypeEnum.CustomIndicator="customIndicator"}(MeasureDataDefaultValueTypeEnum||(MeasureDataDefaultValueTypeEnum={})),function(OtherDefaultValueTypeEnum){OtherDefaultValueTypeEnum.UrlParams="urlParams",OtherDefaultValueTypeEnum.LocalStorageInfo="localStorageInfo"}(OtherDefaultValueTypeEnum||(OtherDefaultValueTypeEnum={})),function(DateDefaultValueTypeEnum){DateDefaultValueTypeEnum.TodayDiff="todayDiff",DateDefaultValueTypeEnum.YesterdayDiff="lastDayDiff",DateDefaultValueTypeEnum.CustomDate="customDate"}(DateDefaultValueTypeEnum||(DateDefaultValueTypeEnum={}));const defaultValueTypes=[{label:"空值",value:BaseLinkedDefaultValueTypeEnum.None},{label:"全选",value:BaseLinkedDefaultValueTypeEnum.SelectAll,tag:LinkedValueChooseType.Multiple},{label:"选中第一个",value:BaseLinkedDefaultValueTypeEnum.SelectFirst},{label:"自定义维度成员",value:DimensionDataDefaultValueTypeEnum.Custom},{label:"自定义指标选择",value:MeasureDataDefaultValueTypeEnum.CustomIndicator},{label:"用户信息存储",value:OtherDefaultValueTypeEnum.LocalStorageInfo},{label:"链接参数",value:OtherDefaultValueTypeEnum.UrlParams}];var StateEnum;!function(StateEnum){StateEnum.chooseType="chooseType",StateEnum.valueType="valueType",StateEnum.relationValue="relationValue"}(StateEnum||(StateEnum={}));var RdxFormContext=__webpack_require__(307),FormLayout=__webpack_require__(2363),FromItem=__webpack_require__(83);const DefaultSelector=props=>{const{chooseType:chooseType,hasDataSource:hasDataSource,linkedDataType:linkedDataType,measures:measures,fields:fields}=props,showChooseType=chooseType!==ChooseValueType.OnlyChooseDefaultValue,showDefaultValue=chooseType!==ChooseValueType.OnlyChooseType,reactionInfo={deps:[{id:"valueType"}],firstRender:!1,reaction:context=>{const{id:id,value:value,updateState:updateState,depsValues:depsValues}=context,[valueType]=depsValues;updateState(Object.assign(Object.assign({},value),{visible:!!valueType&&valueType.value===id}))}},valueTypeReactionSource=[{parentId:MeasureDataDefaultValueTypeEnum.CustomIndicator,name:"indicatorChoose",type:"string",title:"指标选择",dataSource:measures},{parentId:BaseLinkedDefaultValueTypeEnum.SelectFirst,name:"code",type:"string",title:"字段选择",dataSource:fields},{parentId:BaseLinkedDefaultValueTypeEnum.SelectAll,name:"code",type:"string",title:"字段选择",dataSource:fields},{parentId:DimensionDataDefaultValueTypeEnum.Custom,name:"code",type:"string",title:"自定义数值",dataSource:fields},{parentId:OtherDefaultValueTypeEnum.LocalStorageInfo,name:"code",type:"string",title:"取数路径"},{parentId:OtherDefaultValueTypeEnum.UrlParams,name:"code",type:"string",title:"取数路径"}];return react_default.a.createElement(RdxFormContext.a,{onChange:value=>{console.log("state: ",value)}},react_default.a.createElement(FormLayout.a,{labelTextAlign:"left"},showChooseType&&react_default.a.createElement(FromItem.b,{name:"chooseType",title:"选择类型",default:LinkedValueChooseType.Single,dataSource:LinkedValueChooseData,type:"string",xComponent:"radio"}),showDefaultValue&&react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement(FromItem.b,{name:"valueType",title:"类型",firstRender:!1,deps:[{id:"chooseType"}],reaction:context=>{const{value:value,moduleConfig:moduleConfig,updateState:updateState,lastDepsValue:lastDepsValue,depsValues:depsValues}=context,[type]=depsValues,[preType]=lastDepsValue,newDataSource=moduleConfig.dataSource.filter(item=>![BaseLinkedDefaultValueTypeEnum.SelectFirst,BaseLinkedDefaultValueTypeEnum.SelectAll].includes(item.value)||hasDataSource&&type.value===LinkedValueChooseType.Multiple).filter(item=>(linkedDataType!==LinkedDataType.MeasureMember||item.value!==DimensionDataDefaultValueTypeEnum.Custom)&&(linkedDataType!==LinkedDataType.DimensionMember||item.value!==MeasureDataDefaultValueTypeEnum.CustomIndicator));updateState(Object.assign(Object.assign({},value),{value:type?type.value===preType.value?value.value:BaseLinkedDefaultValueTypeEnum.None:value.value,dataSource:newDataSource}))},default:BaseLinkedDefaultValueTypeEnum.None,dataSource:defaultValueTypes,type:"string",xComponent:"radio"}),valueTypeReactionSource.map(item=>{const{parentId:parentId,type:type,name:name,title:title,dataSource:dataSource}=item;return react_default.a.createElement(FromItem.b,Object.assign({type:"object"},reactionInfo,{name:parentId,firstRender:!1}),react_default.a.createElement(FromItem.b,{firstRender:!1,name:name,type:type,title:title,dataSource:dataSource}))}))))};var dist=__webpack_require__(91),addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting"),__STORY__="import React from 'react';\nimport { DefaultSelector } from './selector';\nimport { setup } from '@czwcode/rdx-next-form';\nsetup();\nimport { ChooseValueType, LinkedDataType } from './types';\nexport default {\n  title: '场景案例|默认值配置',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 选择类型和默认值 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.Value}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n};\n\nexport const 仅默认值 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={false}\n    />\n  );\n};\n\nexport const 仅类型 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseType}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n};\n\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.ShowAll,\n// })\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\n//   showDataSourceChoose: false,\n// })\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\n// })\n",__ADDS_MAP__={"场景案例-默认值配置--选择类型和默认值":{startLoc:{col:24,line:13},endLoc:{col:1,line:23},startBody:{col:24,line:13},endBody:{col:1,line:23}},"场景案例-默认值配置--仅默认值":{startLoc:{col:20,line:25},endLoc:{col:1,line:35},startBody:{col:20,line:25},endBody:{col:1,line:35}},"场景案例-默认值配置--仅类型":{startLoc:{col:19,line:37},endLoc:{col:1,line:47},startBody:{col:19,line:37},endBody:{col:1,line:47}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};Object(dist.setup)();__webpack_exports__.default={title:"场景案例|默认值配置",parameters:{storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting";\n// @ts-ignore\nvar __STORY__ = "\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { DefaultSelector } from \'./selector\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nsetup();\\\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\\\nexport default {\\\\n  title: \'场景案例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 选择类型和默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.Value}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={false}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅类型 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseType}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\\\n// })\\\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\\\n//   showDataSourceChoose: false,\\\\n// })\\\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\\\n// })\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景案例-默认值配置--选择类型和默认值\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":23},\\"startBody\\":{\\"col\\":24,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":23}},\\"场景案例-默认值配置--仅默认值\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":25},\\"endLoc\\":{\\"col\\":1,\\"line\\":35},\\"startBody\\":{\\"col\\":20,\\"line\\":25},\\"endBody\\":{\\"col\\":1,\\"line\\":35}},\\"场景案例-默认值配置--仅类型\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":37},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":19,\\"line\\":37},\\"endBody\\":{\\"col\\":1,\\"line\\":47}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/index.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { DefaultSelector } from \'./selector\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nsetup();\\\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\\\nexport default {\\\\n  title: \'场景案例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 选择类型和默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.Value}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={false}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅类型 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseType}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\\\n// })\\\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\\\n//   showDataSourceChoose: false,\\\\n// })\\\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\\\n// })\\\\n\\",\\"locationsMap\\":{\\"场景案例-默认值配置--选择类型和默认值\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":23},\\"startBody\\":{\\"col\\":24,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":23}},\\"场景案例-默认值配置--仅默认值\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":25},\\"endLoc\\":{\\"col\\":1,\\"line\\":35},\\"startBody\\":{\\"col\\":20,\\"line\\":25},\\"endBody\\":{\\"col\\":1,\\"line\\":35}},\\"场景案例-默认值配置--仅类型\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":37},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":19,\\"line\\":37},\\"endBody\\":{\\"col\\":1,\\"line\\":47}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 仅默认值 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 仅类型 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":35},"endLoc":{"col":139,"line":45},"startBody":{"col":24,"line":35},"endBody":{"col":139,"line":45}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":47},"endLoc":{"col":139,"line":57},"startBody":{"col":20,"line":47},"endBody":{"col":139,"line":57}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":59},"endLoc":{"col":139,"line":69},"startBody":{"col":19,"line":59},"endBody":{"col":139,"line":69}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\nexport const 仅默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n};\\n\\nexport const 仅类型 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":13},"endLoc":{"col":1,"line":23},"startBody":{"col":24,"line":13},"endBody":{"col":1,"line":23}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":25},"endLoc":{"col":1,"line":35},"startBody":{"col":20,"line":25},"endBody":{"col":1,"line":35}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":37},"endLoc":{"col":1,"line":47},"startBody":{"col":19,"line":37},"endBody":{"col":1,"line":47}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { DefaultSelector } from \'./selector\';\nimport { setup } from \'@czwcode/rdx-next-form\';\nsetup();\nimport { ChooseValueType, LinkedDataType } from \'./types\';\nexport default {\n  title: \'场景案例|默认值配置\',\n  parameters: {"storySource":{"source":"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\"@storybook/source-loader/preview\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting\\";\\n// @ts-ignore\\nvar __STORY__ = \\"import React from \'react\';\\\\nimport { DefaultSelector } from \'./selector\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nsetup();\\\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\\\nexport default {\\\\n  title: \'场景案例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 选择类型和默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.Value}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={false}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅类型 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseType}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\\\n// })\\\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\\\n//   showDataSourceChoose: false,\\\\n// })\\\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\\\n// })\\\\n\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\"场景案例-默认值配置--选择类型和默认值\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":23},\\"startBody\\":{\\"col\\":24,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":23}},\\"场景案例-默认值配置--仅默认值\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":25},\\"endLoc\\":{\\"col\\":1,\\"line\\":35},\\"startBody\\":{\\"col\\":20,\\"line\\":25},\\"endBody\\":{\\"col\\":1,\\"line\\":35}},\\"场景案例-默认值配置--仅类型\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":37},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":19,\\"line\\":37},\\"endBody\\":{\\"col\\":1,\\"line\\":47}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\"/index.stories.tsx\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\"storySource\\":{\\"source\\":\\"import React from \'react\';\\\\nimport { DefaultSelector } from \'./selector\';\\\\nimport { setup } from \'@czwcode/rdx-next-form\';\\\\nsetup();\\\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\\\nexport default {\\\\n  title: \'场景案例|默认值配置\',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nexport const 选择类型和默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.Value}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅默认值 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={false}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\nexport const 仅类型 = () => {\\\\n  return (\\\\n    <DefaultSelector\\\\n      chooseType={ChooseValueType.OnlyChooseType}\\\\n      measures={[]}\\\\n      fields={[]}\\\\n      linkedDataType={LinkedDataType.DimensionMember}\\\\n      hasDataSource={true}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\\\n// })\\\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\\\n//   showDataSourceChoose: false,\\\\n// })\\\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\\\n// })\\\\n\\",\\"locationsMap\\":{\\"场景案例-默认值配置--选择类型和默认值\\":{\\"startLoc\\":{\\"col\\":24,\\"line\\":13},\\"endLoc\\":{\\"col\\":1,\\"line\\":23},\\"startBody\\":{\\"col\\":24,\\"line\\":13},\\"endBody\\":{\\"col\\":1,\\"line\\":23}},\\"场景案例-默认值配置--仅默认值\\":{\\"startLoc\\":{\\"col\\":20,\\"line\\":25},\\"endLoc\\":{\\"col\\":1,\\"line\\":35},\\"startBody\\":{\\"col\\":20,\\"line\\":25},\\"endBody\\":{\\"col\\":1,\\"line\\":35}},\\"场景案例-默认值配置--仅类型\\":{\\"startLoc\\":{\\"col\\":19,\\"line\\":37},\\"endLoc\\":{\\"col\\":1,\\"line\\":47},\\"startBody\\":{\\"col\\":19,\\"line\\":37},\\"endBody\\":{\\"col\\":1,\\"line\\":47}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 仅默认值 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\\n\\nexport const 仅类型 = addSourceDecorator(() => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n","locationsMap":{"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":35},"endLoc":{"col":139,"line":45},"startBody":{"col":24,"line":35},"endBody":{"col":139,"line":45}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":47},"endLoc":{"col":139,"line":57},"startBody":{"col":20,"line":47},"endBody":{"col":139,"line":57}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":59},"endLoc":{"col":139,"line":69},"startBody":{"col":19,"line":59},"endBody":{"col":139,"line":69}}}},"storySource":{"source":"import React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\nexport const 仅默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n};\\n\\nexport const 仅类型 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n","locationsMap":{"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":13},"endLoc":{"col":1,"line":23},"startBody":{"col":24,"line":13},"endBody":{"col":1,"line":23}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":25},"endLoc":{"col":1,"line":35},"startBody":{"col":20,"line":25},"endBody":{"col":1,"line":35}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":37},"endLoc":{"col":1,"line":47},"startBody":{"col":19,"line":37},"endBody":{"col":1,"line":47}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 选择类型和默认值 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.Value}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 仅默认值 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={false}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;;\n\nexport const 仅类型 = addSourceDecorator(addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseType}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.ShowAll,\n// })\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\n//   showDataSourceChoose: false,\n// })\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\n// })\n',locationsMap:{"场景案例-默认值配置--选择类型和默认值":{startLoc:{col:24,line:57},endLoc:{col:277,line:67},startBody:{col:24,line:57},endBody:{col:277,line:67}},"场景案例-默认值配置--仅默认值":{startLoc:{col:20,line:69},endLoc:{col:277,line:79},startBody:{col:20,line:69},endBody:{col:277,line:79}},"场景案例-默认值配置--仅类型":{startLoc:{col:19,line:81},endLoc:{col:277,line:91},startBody:{col:19,line:81},endBody:{col:277,line:91}}}},storySource:{source:'\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require(\'@storybook/source-loader/preview\').withSource;\n// @ts-ignore\nvar addSourceDecorator = require("@storybook/source-loader/preview").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = "/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/scene/defaultSetting";\n// @ts-ignore\nvar __STORY__ = "import React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\nexport const 仅默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n};\\n\\nexport const 仅类型 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n";\n// @ts-ignore\nvar __ADDS_MAP__ = {"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":13},"endLoc":{"col":1,"line":23},"startBody":{"col":24,"line":13},"endBody":{"col":1,"line":23}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":25},"endLoc":{"col":1,"line":35},"startBody":{"col":20,"line":25},"endBody":{"col":1,"line":35}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":37},"endLoc":{"col":1,"line":47},"startBody":{"col":19,"line":37},"endBody":{"col":1,"line":47}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = "/index.stories.tsx";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from \'react\';\nimport { DefaultSelector } from \'./selector\';\nimport { setup } from \'@czwcode/rdx-next-form\';\nsetup();\nimport { ChooseValueType, LinkedDataType } from \'./types\';\nexport default {\n  title: \'场景案例|默认值配置\',\n  parameters: {"storySource":{"source":"import React from \'react\';\\nimport { DefaultSelector } from \'./selector\';\\nimport { setup } from \'@czwcode/rdx-next-form\';\\nsetup();\\nimport { ChooseValueType, LinkedDataType } from \'./types\';\\nexport default {\\n  title: \'场景案例|默认值配置\',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nexport const 选择类型和默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.Value}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\nexport const 仅默认值 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={false}\\n    />\\n  );\\n};\\n\\nexport const 仅类型 = () => {\\n  return (\\n    <DefaultSelector\\n      chooseType={ChooseValueType.OnlyChooseType}\\n      measures={[]}\\n      fields={[]}\\n      linkedDataType={LinkedDataType.DimensionMember}\\n      hasDataSource={true}\\n    />\\n  );\\n};\\n\\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.ShowAll,\\n// })\\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\\n//   showDataSourceChoose: false,\\n// })\\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\\n// })\\n","locationsMap":{"场景案例-默认值配置--选择类型和默认值":{"startLoc":{"col":24,"line":13},"endLoc":{"col":1,"line":23},"startBody":{"col":24,"line":13},"endBody":{"col":1,"line":23}},"场景案例-默认值配置--仅默认值":{"startLoc":{"col":20,"line":25},"endLoc":{"col":1,"line":35},"startBody":{"col":20,"line":25},"endBody":{"col":1,"line":35}},"场景案例-默认值配置--仅类型":{"startLoc":{"col":19,"line":37},"endLoc":{"col":1,"line":47},"startBody":{"col":19,"line":37},"endBody":{"col":1,"line":47}}}},\n    info: { inline: true },\n  },\n};\n\nexport const 选择类型和默认值 = addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.Value}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 仅默认值 = addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={false}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\n\nexport const 仅类型 = addSourceDecorator(() => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseType}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.ShowAll,\n// })\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\n//   showDataSourceChoose: false,\n// })\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\n// })\n',locationsMap:{"场景案例-默认值配置--选择类型和默认值":{startLoc:{col:24,line:35},endLoc:{col:139,line:45},startBody:{col:24,line:35},endBody:{col:139,line:45}},"场景案例-默认值配置--仅默认值":{startLoc:{col:20,line:47},endLoc:{col:139,line:57},startBody:{col:20,line:47},endBody:{col:139,line:57}},"场景案例-默认值配置--仅类型":{startLoc:{col:19,line:59},endLoc:{col:139,line:69},startBody:{col:19,line:59},endBody:{col:139,line:69}}}},storySource:{source:"import React from 'react';\nimport { DefaultSelector } from './selector';\nimport { setup } from '@czwcode/rdx-next-form';\nsetup();\nimport { ChooseValueType, LinkedDataType } from './types';\nexport default {\n  title: '场景案例|默认值配置',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nexport const 选择类型和默认值 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.Value}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n};\n\nexport const 仅默认值 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseDefaultValue}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={false}\n    />\n  );\n};\n\nexport const 仅类型 = () => {\n  return (\n    <DefaultSelector\n      chooseType={ChooseValueType.OnlyChooseType}\n      measures={[]}\n      fields={[]}\n      linkedDataType={LinkedDataType.DimensionMember}\n      hasDataSource={true}\n    />\n  );\n};\n\n// export const ShowAllMultiSelectSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.ShowAll,\n// })\n// export const JustShowDefaultConfigWithoutDataSourceSettingRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowDefaultConfig,\n//   showDataSourceChoose: false,\n// })\n// export const JustShowChooseTypeRenderer = MultiSelectSettingRenderer({\n//   showType: IMultiSelectSettingRendererType.JustShowChooseType,\n// })\n",locationsMap:{"场景案例-默认值配置--选择类型和默认值":{startLoc:{col:24,line:13},endLoc:{col:1,line:23},startBody:{col:24,line:13},endBody:{col:1,line:23}},"场景案例-默认值配置--仅默认值":{startLoc:{col:20,line:25},endLoc:{col:1,line:35},startBody:{col:20,line:25},endBody:{col:1,line:35}},"场景案例-默认值配置--仅类型":{startLoc:{col:19,line:37},endLoc:{col:1,line:47},startBody:{col:19,line:37},endBody:{col:1,line:47}}}},info:{inline:!0}}};const 选择类型和默认值=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(DefaultSelector,{chooseType:ChooseValueType.Value,measures:[],fields:[],linkedDataType:LinkedDataType.DimensionMember,hasDataSource:!0}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),仅默认值=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(DefaultSelector,{chooseType:ChooseValueType.OnlyChooseDefaultValue,measures:[],fields:[],linkedDataType:LinkedDataType.DimensionMember,hasDataSource:!1}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),仅类型=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>react_default.a.createElement(DefaultSelector,{chooseType:ChooseValueType.OnlyChooseType,measures:[],fields:[],linkedDataType:LinkedDataType.DimensionMember,hasDataSource:!0}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/index.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2354:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"TestChart",(function(){return TestChart}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react);function getTranslate(x,y){return`translate(${x}, ${y})`}function createLayoutInfo(from,to,nodeInfo){const{x:fromX,y:fromY}=from,{x:toX,y:toY}=to,{width:width,height:height}=nodeInfo,xMiddle=Math.abs(fromX-toX),yMiddle=Math.abs(fromY-toY);let isToRight=!0;fromX-toX>0&&(isToRight=!1);let isTurningPoint=!1;toY-fromY>0&&(isTurningPoint=!0);return{xDistacne:xMiddle-width,yDistacne:yMiddle-height,isContrast:isToRight?1:-1,isTurningPoint:isTurningPoint,halfNodeWidth:width/2,halfNodeHeight:height/2,xMiddle:xMiddle,yMiddle:yMiddle}}function getEdgeTranslate(from,to,nodeInfo,edgeInfo){const{x:fromX,y:fromY}=from,{xMiddle:xMiddle,yMiddle:yMiddle,isContrast:isContrast,isTurningPoint:isTurningPoint}=createLayoutInfo(from,to,nodeInfo);return getTranslate(fromX+(isTurningPoint?0:xMiddle/2)*isContrast,isTurningPoint?fromY+3*yMiddle/4:fromY-nodeInfo.height/4)}function getPath(from,to,nodeInfo,edgeInfo){const{extraWidth:extraWidth=0}=edgeInfo,{isTurningPoint:isTurningPoint,isContrast:isContrast,xDistacne:xDistacne,yMiddle:yMiddle,halfNodeHeight:halfNodeHeight,halfNodeWidth:halfNodeWidth}=createLayoutInfo(from,to,nodeInfo),{x:x,y:y}=getStartPoint(from,to,nodeInfo,edgeInfo);return isTurningPoint?`M ${x} ${y} v ${yMiddle-3*nodeInfo.height/4} h${(xDistacne+halfNodeWidth)*isContrast}`:`M ${x} ${y} h ${(xDistacne+2*extraWidth)*isContrast} `}function getStartPoint(from,to,nodeInfo,edgeInfo){const{x:fromX,y:fromY}=from,{extraWidth:extraWidth=0}=edgeInfo,{isTurningPoint:isTurningPoint,isContrast:isContrast,halfNodeHeight:halfNodeHeight,halfNodeWidth:halfNodeWidth}=createLayoutInfo(from,to,nodeInfo);return isTurningPoint?{x:fromX,y:fromY+halfNodeHeight}:{x:fromX+(halfNodeWidth-extraWidth)*isContrast,y:fromY-halfNodeHeight/2}}function SupplyChain(props){let{nodes:nodes,edges:edges=[],nodeConfig:nodeConfig={width:50,height:50},svgConfig:svgConfig={width:1e3,height:1e3},edgeConfig:edgeConfig={width:50,height:50},left:left,top:top,nodeRender:nodeRender=(id=>react_default.a.createElement("div",{style:{background:"red",width:"100%",height:"100%"}},id)),edgeRender:edgeRender=(id=>react_default.a.createElement("div",{style:{width:"100%",height:"100%",background:"green"}},id))}=props;const{width:nodeWidth,height:nodeHeight}=nodeConfig,{width:edgeWidth,height:edgeHeight,color:color}=edgeConfig;void 0===left&&(left=nodeWidth/2),void 0===top&&(top=nodeHeight/2);const nodeMap=function arr2Map(source,getKey){const m=new Map;return source.forEach(item=>{const key=getKey(item);m.set(key,item)}),m}(nodes,node=>node.id);return react_default.a.createElement("svg",{width:svgConfig.width,height:svgConfig.height,style:{border:"1px solid black"}},react_default.a.createElement("g",{transform:getTranslate(left,top)},nodes.map(node=>{const{x:x,y:y,id:id}=node;return react_default.a.createElement("g",{transform:getTranslate(x,y)},react_default.a.createElement("foreignObject",{x:-nodeWidth/2,y:-nodeHeight/2,width:nodeWidth,height:nodeHeight},react_default.a.createElement("div",{style:{width:nodeWidth,height:nodeHeight}},nodeRender(id))))}),edges.map(edge=>{const{from:from,to:to,id:id}=edge,fromNode=nodeMap.get(from),toNode=nodeMap.get(to),{x:x,y:y}=getStartPoint(fromNode,toNode,nodeConfig,edgeConfig);return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement("g",null,react_default.a.createElement("circle",{fill:color,cx:x,cy:y,r:"10"})),react_default.a.createElement("path",{fill:"transparent",stroke:color,strokeWidth:4,d:getPath(fromNode,toNode,nodeConfig,Object.assign(Object.assign({},edgeConfig),{extraWidth:edgeConfig.extraWidth-20}))}),react_default.a.createElement("g",{transform:getEdgeTranslate(fromNode,toNode,nodeConfig)},react_default.a.createElement("foreignObject",{x:-edgeWidth/2,y:-edgeHeight/2,width:edgeWidth,height:edgeHeight},react_default.a.createElement("div",{style:{width:edgeWidth,height:edgeHeight}},edgeRender(id)))))})))}var es_select=__webpack_require__(167),addSourceDecorator=(__webpack_require__(30).withSource,__webpack_require__(30).addSource),__SOURCE_PREFIX__=(__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,__webpack_require__(30).withSource,addSourceDecorator=__webpack_require__(30).addSource,"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts"),__STORY__="import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport SupplyChain, { INode } from './chart';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '基本示例|Chart',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nfunction getRowIndex(index: number, colNumberInRow: number) {\n  const positionIndex = index + 1;\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\n  return rowNumber;\n}\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\n  let rowNumber = getRowIndex(index, colNumberInRow);\n  const positionIndex = index + 1;\n  const isEven = rowNumber % 2 === 0;\n  let xDistance = 0;\n  if (isEven) {\n    xDistance = (positionIndex - 1) % colNumberInRow;\n  } else {\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\n  }\n  return {\n    row: rowNumber,\n    xDistance,\n  };\n}\nfunction getRealIndex(index: number, colNumberInRow: number) {\n  let rowIndex = 0;\n  if (index < colNumberInRow) {\n    rowIndex = 0;\n  } else {\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\n  }\n  Math.floor(index / colNumberInRow);\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\n}\nfunction createLayout(\n  nodes: { id: any }[],\n  options: {\n    nodeConfig: { width: number; height: number };\n    rowGap: number;\n    colGap: number;\n    rowNumber?: number;\n  } = {} as any\n): INode[] {\n  const {\n    colGap = 100,\n    rowGap = 70,\n    rowNumber: rowNumbers = 5,\n    nodeConfig = {} as any,\n  } = options;\n  const { width = 200, height = 100 } = nodeConfig;\n\n  let newNodes = [] as INode[];\n  nodes.forEach((node, index) => {\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\n\n    const x = xDistance * (width + colGap);\n    const y = row * (height + rowGap);\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\n  });\n  return newNodes;\n}\nexport const TestChart = () => {\n  const newNodes = createLayout([\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 },\n    { id: 11 },\n    { id: 12 },\n    { id: 13 },\n    { id: 14 },\n    { id: 15 },\n    { id: 16 },\n    { id: 17 },\n    { id: 18 },\n    { id: 19 },\n  ]);\n  console.log('newNodes: ', newNodes);\n  return (\n    <SupplyChain\n      nodeConfig={{\n        width: 200,\n        height: 130,\n      }}\n      edgeConfig={{\n        width: 62,\n        height: 44,\n        color: 'rgb(184,184,184)',\n        extraWidth: 50,\n      }}\n      left={0}\n      top={0}\n      svgConfig={{\n        width: 1500,\n        height: 1000,\n      }}\n      edgeRender={(id) => {\n        return (\n          <div\n            style={{\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 20,\n              background: 'rgb(184,184,184)'\n            }}\n          >{id}</div>\n        );\n      }}\n      nodeRender={(id) => {\n        return (\n          <div\n            style={{\n              padding: '15px 0px',\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: 40,\n                width: 40,\n                borderRadius: '50%',\n                background: 'rgb(132,104,204)',\n              }}\n            >\n              {id}\n            </div>\n            <strong>配送供应商</strong>\n            <Select></Select>\n          </div>\n        );\n      }}\n      nodes={newNodes}\n      edges={[\n        { from: 1, to: 2, id: 'a' },\n        { from: 2, to: 3, id: 'b' },\n        { from: 3, to: 4, id: 'c' },\n        { from: 4, to: 5, id: 'd' },\n        { from: 5, to: 6, id: 'e' },\n        { from: 6, to: 7, id: 'f' },\n        { from: 7, to: 8, id: 'g' },\n        { from: 8, to: 9, id: 'h' },\n        { from: 9, to: 10, id: 'i' },\n        { from: 10, to: 11, id: 'i' },\n        { from: 11, to: 12, id: 'i' },\n        { from: 12, to: 13, id: 'i' },\n        { from: 13, to: 14, id: 'i' },\n        { from: 14, to: 15, id: 'i' },\n      ]}\n    />\n  );\n};\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",__ADDS_MAP__={"基本示例-chart--test-chart":{startLoc:{col:25,line:71},endLoc:{col:1,line:180},startBody:{col:25,line:71},endBody:{col:1,line:180}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={};__webpack_exports__.default={title:"基本示例|Chart",parameters:{storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts\";\n// @ts-ignore\nvar __STORY__ = \"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nimport SupplyChain, { INode } from './chart';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|Chart',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\\\n  const positionIndex = index + 1;\\\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\\\n  return rowNumber;\\\\n}\\\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\\\n  const positionIndex = index + 1;\\\\n  const isEven = rowNumber % 2 === 0;\\\\n  let xDistance = 0;\\\\n  if (isEven) {\\\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\\\n  } else {\\\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\\\n  }\\\\n  return {\\\\n    row: rowNumber,\\\\n    xDistance,\\\\n  };\\\\n}\\\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\\\n  let rowIndex = 0;\\\\n  if (index < colNumberInRow) {\\\\n    rowIndex = 0;\\\\n  } else {\\\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\\\n  }\\\\n  Math.floor(index / colNumberInRow);\\\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\\\n}\\\\nfunction createLayout(\\\\n  nodes: { id: any }[],\\\\n  options: {\\\\n    nodeConfig: { width: number; height: number };\\\\n    rowGap: number;\\\\n    colGap: number;\\\\n    rowNumber?: number;\\\\n  } = {} as any\\\\n): INode[] {\\\\n  const {\\\\n    colGap = 100,\\\\n    rowGap = 70,\\\\n    rowNumber: rowNumbers = 5,\\\\n    nodeConfig = {} as any,\\\\n  } = options;\\\\n  const { width = 200, height = 100 } = nodeConfig;\\\\n\\\\n  let newNodes = [] as INode[];\\\\n  nodes.forEach((node, index) => {\\\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\\\n\\\\n    const x = xDistance * (width + colGap);\\\\n    const y = row * (height + rowGap);\\\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\\\n  });\\\\n  return newNodes;\\\\n}\\\\nexport const TestChart = () => {\\\\n  const newNodes = createLayout([\\\\n    { id: 1 },\\\\n    { id: 2 },\\\\n    { id: 3 },\\\\n    { id: 4 },\\\\n    { id: 5 },\\\\n    { id: 6 },\\\\n    { id: 7 },\\\\n    { id: 8 },\\\\n    { id: 9 },\\\\n    { id: 10 },\\\\n    { id: 11 },\\\\n    { id: 12 },\\\\n    { id: 13 },\\\\n    { id: 14 },\\\\n    { id: 15 },\\\\n    { id: 16 },\\\\n    { id: 17 },\\\\n    { id: 18 },\\\\n    { id: 19 },\\\\n  ]);\\\\n  console.log('newNodes: ', newNodes);\\\\n  return (\\\\n    <SupplyChain\\\\n      nodeConfig={{\\\\n        width: 200,\\\\n        height: 130,\\\\n      }}\\\\n      edgeConfig={{\\\\n        width: 62,\\\\n        height: 44,\\\\n        color: 'rgb(184,184,184)',\\\\n        extraWidth: 50,\\\\n      }}\\\\n      left={0}\\\\n      top={0}\\\\n      svgConfig={{\\\\n        width: 1500,\\\\n        height: 1000,\\\\n      }}\\\\n      edgeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'center',\\\\n              borderRadius: 20,\\\\n              background: 'rgb(184,184,184)'\\\\n            }}\\\\n          >{id}</div>\\\\n        );\\\\n      }}\\\\n      nodeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              padding: '15px 0px',\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'space-between',\\\\n            }}\\\\n          >\\\\n            <div\\\\n              style={{\\\\n                display: 'flex',\\\\n                alignItems: 'center',\\\\n                justifyContent: 'center',\\\\n                height: 40,\\\\n                width: 40,\\\\n                borderRadius: '50%',\\\\n                background: 'rgb(132,104,204)',\\\\n              }}\\\\n            >\\\\n              {id}\\\\n            </div>\\\\n            <strong>配送供应商</strong>\\\\n            <Select></Select>\\\\n          </div>\\\\n        );\\\\n      }}\\\\n      nodes={newNodes}\\\\n      edges={[\\\\n        { from: 1, to: 2, id: 'a' },\\\\n        { from: 2, to: 3, id: 'b' },\\\\n        { from: 3, to: 4, id: 'c' },\\\\n        { from: 4, to: 5, id: 'd' },\\\\n        { from: 5, to: 6, id: 'e' },\\\\n        { from: 6, to: 7, id: 'f' },\\\\n        { from: 7, to: 8, id: 'g' },\\\\n        { from: 8, to: 9, id: 'h' },\\\\n        { from: 9, to: 10, id: 'i' },\\\\n        { from: 10, to: 11, id: 'i' },\\\\n        { from: 11, to: 12, id: 'i' },\\\\n        { from: 12, to: 13, id: 'i' },\\\\n        { from: 13, to: 14, id: 'i' },\\\\n        { from: 14, to: 15, id: 'i' },\\\\n      ]}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-chart--test-chart\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":180},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":180}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/chart.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nimport SupplyChain, { INode } from './chart';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|Chart',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\\\n  const positionIndex = index + 1;\\\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\\\n  return rowNumber;\\\\n}\\\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\\\n  const positionIndex = index + 1;\\\\n  const isEven = rowNumber % 2 === 0;\\\\n  let xDistance = 0;\\\\n  if (isEven) {\\\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\\\n  } else {\\\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\\\n  }\\\\n  return {\\\\n    row: rowNumber,\\\\n    xDistance,\\\\n  };\\\\n}\\\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\\\n  let rowIndex = 0;\\\\n  if (index < colNumberInRow) {\\\\n    rowIndex = 0;\\\\n  } else {\\\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\\\n  }\\\\n  Math.floor(index / colNumberInRow);\\\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\\\n}\\\\nfunction createLayout(\\\\n  nodes: { id: any }[],\\\\n  options: {\\\\n    nodeConfig: { width: number; height: number };\\\\n    rowGap: number;\\\\n    colGap: number;\\\\n    rowNumber?: number;\\\\n  } = {} as any\\\\n): INode[] {\\\\n  const {\\\\n    colGap = 100,\\\\n    rowGap = 70,\\\\n    rowNumber: rowNumbers = 5,\\\\n    nodeConfig = {} as any,\\\\n  } = options;\\\\n  const { width = 200, height = 100 } = nodeConfig;\\\\n\\\\n  let newNodes = [] as INode[];\\\\n  nodes.forEach((node, index) => {\\\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\\\n\\\\n    const x = xDistance * (width + colGap);\\\\n    const y = row * (height + rowGap);\\\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\\\n  });\\\\n  return newNodes;\\\\n}\\\\nexport const TestChart = () => {\\\\n  const newNodes = createLayout([\\\\n    { id: 1 },\\\\n    { id: 2 },\\\\n    { id: 3 },\\\\n    { id: 4 },\\\\n    { id: 5 },\\\\n    { id: 6 },\\\\n    { id: 7 },\\\\n    { id: 8 },\\\\n    { id: 9 },\\\\n    { id: 10 },\\\\n    { id: 11 },\\\\n    { id: 12 },\\\\n    { id: 13 },\\\\n    { id: 14 },\\\\n    { id: 15 },\\\\n    { id: 16 },\\\\n    { id: 17 },\\\\n    { id: 18 },\\\\n    { id: 19 },\\\\n  ]);\\\\n  console.log('newNodes: ', newNodes);\\\\n  return (\\\\n    <SupplyChain\\\\n      nodeConfig={{\\\\n        width: 200,\\\\n        height: 130,\\\\n      }}\\\\n      edgeConfig={{\\\\n        width: 62,\\\\n        height: 44,\\\\n        color: 'rgb(184,184,184)',\\\\n        extraWidth: 50,\\\\n      }}\\\\n      left={0}\\\\n      top={0}\\\\n      svgConfig={{\\\\n        width: 1500,\\\\n        height: 1000,\\\\n      }}\\\\n      edgeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'center',\\\\n              borderRadius: 20,\\\\n              background: 'rgb(184,184,184)'\\\\n            }}\\\\n          >{id}</div>\\\\n        );\\\\n      }}\\\\n      nodeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              padding: '15px 0px',\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'space-between',\\\\n            }}\\\\n          >\\\\n            <div\\\\n              style={{\\\\n                display: 'flex',\\\\n                alignItems: 'center',\\\\n                justifyContent: 'center',\\\\n                height: 40,\\\\n                width: 40,\\\\n                borderRadius: '50%',\\\\n                background: 'rgb(132,104,204)',\\\\n              }}\\\\n            >\\\\n              {id}\\\\n            </div>\\\\n            <strong>配送供应商</strong>\\\\n            <Select></Select>\\\\n          </div>\\\\n        );\\\\n      }}\\\\n      nodes={newNodes}\\\\n      edges={[\\\\n        { from: 1, to: 2, id: 'a' },\\\\n        { from: 2, to: 3, id: 'b' },\\\\n        { from: 3, to: 4, id: 'c' },\\\\n        { from: 4, to: 5, id: 'd' },\\\\n        { from: 5, to: 6, id: 'e' },\\\\n        { from: 6, to: 7, id: 'f' },\\\\n        { from: 7, to: 8, id: 'g' },\\\\n        { from: 8, to: 9, id: 'h' },\\\\n        { from: 9, to: 10, id: 'i' },\\\\n        { from: 10, to: 11, id: 'i' },\\\\n        { from: 11, to: 12, id: 'i' },\\\\n        { from: 12, to: 13, id: 'i' },\\\\n        { from: 13, to: 14, id: 'i' },\\\\n        { from: 14, to: 15, id: 'i' },\\\\n      ]}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-chart--test-chart\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":180},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":180}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = addSourceDecorator(() => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":93},\"endLoc\":{\"col\":139,\"line\":202},\"startBody\":{\"col\":25,\"line\":93},\"endBody\":{\"col\":139,\"line\":202}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/chart.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \n\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = () => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":71},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":25,\"line\":71},\"endBody\":{\"col\":1,\"line\":180}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/chart.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport SupplyChain, { INode } from './chart';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '基本示例|Chart',\n  parameters: {\"storySource\":{\"source\":\"\\n\\n// @ts-nocheck\\n// @ts-ignore\\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\\n// @ts-ignore\\nvar addSourceDecorator = require(\\\"@storybook/source-loader/preview\\\").addSource;\\n// @ts-ignore\\nvar __SOURCE_PREFIX__ = \\\"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts\\\";\\n// @ts-ignore\\nvar __STORY__ = \\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nimport SupplyChain, { INode } from './chart';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|Chart',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\\\n  const positionIndex = index + 1;\\\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\\\n  return rowNumber;\\\\n}\\\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\\\n  const positionIndex = index + 1;\\\\n  const isEven = rowNumber % 2 === 0;\\\\n  let xDistance = 0;\\\\n  if (isEven) {\\\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\\\n  } else {\\\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\\\n  }\\\\n  return {\\\\n    row: rowNumber,\\\\n    xDistance,\\\\n  };\\\\n}\\\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\\\n  let rowIndex = 0;\\\\n  if (index < colNumberInRow) {\\\\n    rowIndex = 0;\\\\n  } else {\\\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\\\n  }\\\\n  Math.floor(index / colNumberInRow);\\\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\\\n}\\\\nfunction createLayout(\\\\n  nodes: { id: any }[],\\\\n  options: {\\\\n    nodeConfig: { width: number; height: number };\\\\n    rowGap: number;\\\\n    colGap: number;\\\\n    rowNumber?: number;\\\\n  } = {} as any\\\\n): INode[] {\\\\n  const {\\\\n    colGap = 100,\\\\n    rowGap = 70,\\\\n    rowNumber: rowNumbers = 5,\\\\n    nodeConfig = {} as any,\\\\n  } = options;\\\\n  const { width = 200, height = 100 } = nodeConfig;\\\\n\\\\n  let newNodes = [] as INode[];\\\\n  nodes.forEach((node, index) => {\\\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\\\n\\\\n    const x = xDistance * (width + colGap);\\\\n    const y = row * (height + rowGap);\\\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\\\n  });\\\\n  return newNodes;\\\\n}\\\\nexport const TestChart = () => {\\\\n  const newNodes = createLayout([\\\\n    { id: 1 },\\\\n    { id: 2 },\\\\n    { id: 3 },\\\\n    { id: 4 },\\\\n    { id: 5 },\\\\n    { id: 6 },\\\\n    { id: 7 },\\\\n    { id: 8 },\\\\n    { id: 9 },\\\\n    { id: 10 },\\\\n    { id: 11 },\\\\n    { id: 12 },\\\\n    { id: 13 },\\\\n    { id: 14 },\\\\n    { id: 15 },\\\\n    { id: 16 },\\\\n    { id: 17 },\\\\n    { id: 18 },\\\\n    { id: 19 },\\\\n  ]);\\\\n  console.log('newNodes: ', newNodes);\\\\n  return (\\\\n    <SupplyChain\\\\n      nodeConfig={{\\\\n        width: 200,\\\\n        height: 130,\\\\n      }}\\\\n      edgeConfig={{\\\\n        width: 62,\\\\n        height: 44,\\\\n        color: 'rgb(184,184,184)',\\\\n        extraWidth: 50,\\\\n      }}\\\\n      left={0}\\\\n      top={0}\\\\n      svgConfig={{\\\\n        width: 1500,\\\\n        height: 1000,\\\\n      }}\\\\n      edgeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'center',\\\\n              borderRadius: 20,\\\\n              background: 'rgb(184,184,184)'\\\\n            }}\\\\n          >{id}</div>\\\\n        );\\\\n      }}\\\\n      nodeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              padding: '15px 0px',\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'space-between',\\\\n            }}\\\\n          >\\\\n            <div\\\\n              style={{\\\\n                display: 'flex',\\\\n                alignItems: 'center',\\\\n                justifyContent: 'center',\\\\n                height: 40,\\\\n                width: 40,\\\\n                borderRadius: '50%',\\\\n                background: 'rgb(132,104,204)',\\\\n              }}\\\\n            >\\\\n              {id}\\\\n            </div>\\\\n            <strong>配送供应商</strong>\\\\n            <Select></Select>\\\\n          </div>\\\\n        );\\\\n      }}\\\\n      nodes={newNodes}\\\\n      edges={[\\\\n        { from: 1, to: 2, id: 'a' },\\\\n        { from: 2, to: 3, id: 'b' },\\\\n        { from: 3, to: 4, id: 'c' },\\\\n        { from: 4, to: 5, id: 'd' },\\\\n        { from: 5, to: 6, id: 'e' },\\\\n        { from: 6, to: 7, id: 'f' },\\\\n        { from: 7, to: 8, id: 'g' },\\\\n        { from: 8, to: 9, id: 'h' },\\\\n        { from: 9, to: 10, id: 'i' },\\\\n        { from: 10, to: 11, id: 'i' },\\\\n        { from: 11, to: 12, id: 'i' },\\\\n        { from: 12, to: 13, id: 'i' },\\\\n        { from: 13, to: 14, id: 'i' },\\\\n        { from: 14, to: 15, id: 'i' },\\\\n      ]}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\";\\n// @ts-ignore\\nvar __ADDS_MAP__ = {\\\"基本示例-chart--test-chart\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":180},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":180}}};\\n// @ts-ignore\\nvar __MAIN_FILE_LOCATION__ = \\\"/chart.stories.tsx\\\";\\n// @ts-ignore\\nvar __MODULE_DEPENDENCIES__ = [];\\n// @ts-ignore\\nvar __LOCAL_DEPENDENCIES__ = {};\\n// @ts-ignore\\nvar __IDS_TO_FRAMEWORKS__ = {};\\n        \\nimport React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\\"storySource\\\":{\\\"source\\\":\\\"import React from 'react';\\\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\\\nimport { Button } from '@alifd/next';\\\\nimport { useState } from 'react';\\\\nimport SupplyChain, { INode } from './chart';\\\\nimport { Select } from '@alifd/next';\\\\nexport default {\\\\n  title: '基本示例|Chart',\\\\n  parameters: {\\\\n    info: { inline: true },\\\\n  },\\\\n};\\\\n\\\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\\\n  const positionIndex = index + 1;\\\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\\\n  return rowNumber;\\\\n}\\\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\\\n  const positionIndex = index + 1;\\\\n  const isEven = rowNumber % 2 === 0;\\\\n  let xDistance = 0;\\\\n  if (isEven) {\\\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\\\n  } else {\\\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\\\n  }\\\\n  return {\\\\n    row: rowNumber,\\\\n    xDistance,\\\\n  };\\\\n}\\\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\\\n  let rowIndex = 0;\\\\n  if (index < colNumberInRow) {\\\\n    rowIndex = 0;\\\\n  } else {\\\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\\\n  }\\\\n  Math.floor(index / colNumberInRow);\\\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\\\n}\\\\nfunction createLayout(\\\\n  nodes: { id: any }[],\\\\n  options: {\\\\n    nodeConfig: { width: number; height: number };\\\\n    rowGap: number;\\\\n    colGap: number;\\\\n    rowNumber?: number;\\\\n  } = {} as any\\\\n): INode[] {\\\\n  const {\\\\n    colGap = 100,\\\\n    rowGap = 70,\\\\n    rowNumber: rowNumbers = 5,\\\\n    nodeConfig = {} as any,\\\\n  } = options;\\\\n  const { width = 200, height = 100 } = nodeConfig;\\\\n\\\\n  let newNodes = [] as INode[];\\\\n  nodes.forEach((node, index) => {\\\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\\\n\\\\n    const x = xDistance * (width + colGap);\\\\n    const y = row * (height + rowGap);\\\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\\\n  });\\\\n  return newNodes;\\\\n}\\\\nexport const TestChart = () => {\\\\n  const newNodes = createLayout([\\\\n    { id: 1 },\\\\n    { id: 2 },\\\\n    { id: 3 },\\\\n    { id: 4 },\\\\n    { id: 5 },\\\\n    { id: 6 },\\\\n    { id: 7 },\\\\n    { id: 8 },\\\\n    { id: 9 },\\\\n    { id: 10 },\\\\n    { id: 11 },\\\\n    { id: 12 },\\\\n    { id: 13 },\\\\n    { id: 14 },\\\\n    { id: 15 },\\\\n    { id: 16 },\\\\n    { id: 17 },\\\\n    { id: 18 },\\\\n    { id: 19 },\\\\n  ]);\\\\n  console.log('newNodes: ', newNodes);\\\\n  return (\\\\n    <SupplyChain\\\\n      nodeConfig={{\\\\n        width: 200,\\\\n        height: 130,\\\\n      }}\\\\n      edgeConfig={{\\\\n        width: 62,\\\\n        height: 44,\\\\n        color: 'rgb(184,184,184)',\\\\n        extraWidth: 50,\\\\n      }}\\\\n      left={0}\\\\n      top={0}\\\\n      svgConfig={{\\\\n        width: 1500,\\\\n        height: 1000,\\\\n      }}\\\\n      edgeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'center',\\\\n              borderRadius: 20,\\\\n              background: 'rgb(184,184,184)'\\\\n            }}\\\\n          >{id}</div>\\\\n        );\\\\n      }}\\\\n      nodeRender={(id) => {\\\\n        return (\\\\n          <div\\\\n            style={{\\\\n              padding: '15px 0px',\\\\n              display: 'flex',\\\\n              width: '100%',\\\\n              height: '100%',\\\\n              fontSize: 20,\\\\n              flexDirection: 'column',\\\\n              alignItems: 'center',\\\\n              justifyContent: 'space-between',\\\\n            }}\\\\n          >\\\\n            <div\\\\n              style={{\\\\n                display: 'flex',\\\\n                alignItems: 'center',\\\\n                justifyContent: 'center',\\\\n                height: 40,\\\\n                width: 40,\\\\n                borderRadius: '50%',\\\\n                background: 'rgb(132,104,204)',\\\\n              }}\\\\n            >\\\\n              {id}\\\\n            </div>\\\\n            <strong>配送供应商</strong>\\\\n            <Select></Select>\\\\n          </div>\\\\n        );\\\\n      }}\\\\n      nodes={newNodes}\\\\n      edges={[\\\\n        { from: 1, to: 2, id: 'a' },\\\\n        { from: 2, to: 3, id: 'b' },\\\\n        { from: 3, to: 4, id: 'c' },\\\\n        { from: 4, to: 5, id: 'd' },\\\\n        { from: 5, to: 6, id: 'e' },\\\\n        { from: 6, to: 7, id: 'f' },\\\\n        { from: 7, to: 8, id: 'g' },\\\\n        { from: 8, to: 9, id: 'h' },\\\\n        { from: 9, to: 10, id: 'i' },\\\\n        { from: 10, to: 11, id: 'i' },\\\\n        { from: 11, to: 12, id: 'i' },\\\\n        { from: 12, to: 13, id: 'i' },\\\\n        { from: 13, to: 14, id: 'i' },\\\\n        { from: 14, to: 15, id: 'i' },\\\\n      ]}\\\\n    />\\\\n  );\\\\n};\\\\n\\\\n// export const FormObjecySample = () => {\\\\n//   return <FromItem title='parent' type={'object'}>\\\\n//         <FromItem name='child' title='111' type={'string'}/>\\\\n//   </FromItem>\\\\n// }\\\\n\\\",\\\"locationsMap\\\":{\\\"基本示例-chart--test-chart\\\":{\\\"startLoc\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endLoc\\\":{\\\"col\\\":1,\\\"line\\\":180},\\\"startBody\\\":{\\\"col\\\":25,\\\"line\\\":71},\\\"endBody\\\":{\\\"col\\\":1,\\\"line\\\":180}}}},\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = addSourceDecorator(() => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":93},\"endLoc\":{\"col\":139,\"line\":202},\"startBody\":{\"col\":25,\"line\":93},\"endBody\":{\"col\":139,\"line\":202}}}},\"storySource\":{\"source\":\"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = () => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":71},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":25,\"line\":71},\"endBody\":{\"col\":1,\"line\":180}}}},\n    info: { inline: true },\n  },\n};\n\nfunction getRowIndex(index: number, colNumberInRow: number) {\n  const positionIndex = index + 1;\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\n  return rowNumber;\n}\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\n  let rowNumber = getRowIndex(index, colNumberInRow);\n  const positionIndex = index + 1;\n  const isEven = rowNumber % 2 === 0;\n  let xDistance = 0;\n  if (isEven) {\n    xDistance = (positionIndex - 1) % colNumberInRow;\n  } else {\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\n  }\n  return {\n    row: rowNumber,\n    xDistance,\n  };\n}\nfunction getRealIndex(index: number, colNumberInRow: number) {\n  let rowIndex = 0;\n  if (index < colNumberInRow) {\n    rowIndex = 0;\n  } else {\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\n  }\n  Math.floor(index / colNumberInRow);\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\n}\nfunction createLayout(\n  nodes: { id: any }[],\n  options: {\n    nodeConfig: { width: number; height: number };\n    rowGap: number;\n    colGap: number;\n    rowNumber?: number;\n  } = {} as any\n): INode[] {\n  const {\n    colGap = 100,\n    rowGap = 70,\n    rowNumber: rowNumbers = 5,\n    nodeConfig = {} as any,\n  } = options;\n  const { width = 200, height = 100 } = nodeConfig;\n\n  let newNodes = [] as INode[];\n  nodes.forEach((node, index) => {\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\n\n    const x = xDistance * (width + colGap);\n    const y = row * (height + rowGap);\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\n  });\n  return newNodes;\n}\nexport const TestChart = addSourceDecorator(addSourceDecorator(() => {\n  const newNodes = createLayout([\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 },\n    { id: 11 },\n    { id: 12 },\n    { id: 13 },\n    { id: 14 },\n    { id: 15 },\n    { id: 16 },\n    { id: 17 },\n    { id: 18 },\n    { id: 19 },\n  ]);\n  console.log('newNodes: ', newNodes);\n  return (\n    <SupplyChain\n      nodeConfig={{\n        width: 200,\n        height: 130,\n      }}\n      edgeConfig={{\n        width: 62,\n        height: 44,\n        color: 'rgb(184,184,184)',\n        extraWidth: 50,\n      }}\n      left={0}\n      top={0}\n      svgConfig={{\n        width: 1500,\n        height: 1000,\n      }}\n      edgeRender={(id) => {\n        return (\n          <div\n            style={{\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 20,\n              background: 'rgb(184,184,184)'\n            }}\n          >{id}</div>\n        );\n      }}\n      nodeRender={(id) => {\n        return (\n          <div\n            style={{\n              padding: '15px 0px',\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: 40,\n                width: 40,\n                borderRadius: '50%',\n                background: 'rgb(132,104,204)',\n              }}\n            >\n              {id}\n            </div>\n            <strong>配送供应商</strong>\n            <Select></Select>\n          </div>\n        );\n      }}\n      nodes={newNodes}\n      edges={[\n        { from: 1, to: 2, id: 'a' },\n        { from: 2, to: 3, id: 'b' },\n        { from: 3, to: 4, id: 'c' },\n        { from: 4, to: 5, id: 'd' },\n        { from: 5, to: 6, id: 'e' },\n        { from: 6, to: 7, id: 'f' },\n        { from: 7, to: 8, id: 'g' },\n        { from: 8, to: 9, id: 'h' },\n        { from: 9, to: 10, id: 'i' },\n        { from: 10, to: 11, id: 'i' },\n        { from: 11, to: 12, id: 'i' },\n        { from: 12, to: 13, id: 'i' },\n        { from: 13, to: 14, id: 'i' },\n        { from: 14, to: 15, id: 'i' },\n      ]}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__}), {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-chart--test-chart":{startLoc:{col:25,line:115},endLoc:{col:277,line:224},startBody:{col:25,line:115},endBody:{col:277,line:224}}}},storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/Users/czw/Documents/code/libs/task-processing的副本/examples/rdx-form-demo/stories/charts\";\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = () => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":71},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":25,\"line\":71},\"endBody\":{\"col\":1,\"line\":180}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/chart.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport SupplyChain, { INode } from './chart';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '基本示例|Chart',\n  parameters: {\"storySource\":{\"source\":\"import React from 'react';\\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\\nimport { Button } from '@alifd/next';\\nimport { useState } from 'react';\\nimport SupplyChain, { INode } from './chart';\\nimport { Select } from '@alifd/next';\\nexport default {\\n  title: '基本示例|Chart',\\n  parameters: {\\n    info: { inline: true },\\n  },\\n};\\n\\nfunction getRowIndex(index: number, colNumberInRow: number) {\\n  const positionIndex = index + 1;\\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\\n  return rowNumber;\\n}\\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\\n  let rowNumber = getRowIndex(index, colNumberInRow);\\n  const positionIndex = index + 1;\\n  const isEven = rowNumber % 2 === 0;\\n  let xDistance = 0;\\n  if (isEven) {\\n    xDistance = (positionIndex - 1) % colNumberInRow;\\n  } else {\\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\\n  }\\n  return {\\n    row: rowNumber,\\n    xDistance,\\n  };\\n}\\nfunction getRealIndex(index: number, colNumberInRow: number) {\\n  let rowIndex = 0;\\n  if (index < colNumberInRow) {\\n    rowIndex = 0;\\n  } else {\\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\\n  }\\n  Math.floor(index / colNumberInRow);\\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\\n}\\nfunction createLayout(\\n  nodes: { id: any }[],\\n  options: {\\n    nodeConfig: { width: number; height: number };\\n    rowGap: number;\\n    colGap: number;\\n    rowNumber?: number;\\n  } = {} as any\\n): INode[] {\\n  const {\\n    colGap = 100,\\n    rowGap = 70,\\n    rowNumber: rowNumbers = 5,\\n    nodeConfig = {} as any,\\n  } = options;\\n  const { width = 200, height = 100 } = nodeConfig;\\n\\n  let newNodes = [] as INode[];\\n  nodes.forEach((node, index) => {\\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\\n\\n    const x = xDistance * (width + colGap);\\n    const y = row * (height + rowGap);\\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\\n  });\\n  return newNodes;\\n}\\nexport const TestChart = () => {\\n  const newNodes = createLayout([\\n    { id: 1 },\\n    { id: 2 },\\n    { id: 3 },\\n    { id: 4 },\\n    { id: 5 },\\n    { id: 6 },\\n    { id: 7 },\\n    { id: 8 },\\n    { id: 9 },\\n    { id: 10 },\\n    { id: 11 },\\n    { id: 12 },\\n    { id: 13 },\\n    { id: 14 },\\n    { id: 15 },\\n    { id: 16 },\\n    { id: 17 },\\n    { id: 18 },\\n    { id: 19 },\\n  ]);\\n  console.log('newNodes: ', newNodes);\\n  return (\\n    <SupplyChain\\n      nodeConfig={{\\n        width: 200,\\n        height: 130,\\n      }}\\n      edgeConfig={{\\n        width: 62,\\n        height: 44,\\n        color: 'rgb(184,184,184)',\\n        extraWidth: 50,\\n      }}\\n      left={0}\\n      top={0}\\n      svgConfig={{\\n        width: 1500,\\n        height: 1000,\\n      }}\\n      edgeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n              borderRadius: 20,\\n              background: 'rgb(184,184,184)'\\n            }}\\n          >{id}</div>\\n        );\\n      }}\\n      nodeRender={(id) => {\\n        return (\\n          <div\\n            style={{\\n              padding: '15px 0px',\\n              display: 'flex',\\n              width: '100%',\\n              height: '100%',\\n              fontSize: 20,\\n              flexDirection: 'column',\\n              alignItems: 'center',\\n              justifyContent: 'space-between',\\n            }}\\n          >\\n            <div\\n              style={{\\n                display: 'flex',\\n                alignItems: 'center',\\n                justifyContent: 'center',\\n                height: 40,\\n                width: 40,\\n                borderRadius: '50%',\\n                background: 'rgb(132,104,204)',\\n              }}\\n            >\\n              {id}\\n            </div>\\n            <strong>配送供应商</strong>\\n            <Select></Select>\\n          </div>\\n        );\\n      }}\\n      nodes={newNodes}\\n      edges={[\\n        { from: 1, to: 2, id: 'a' },\\n        { from: 2, to: 3, id: 'b' },\\n        { from: 3, to: 4, id: 'c' },\\n        { from: 4, to: 5, id: 'd' },\\n        { from: 5, to: 6, id: 'e' },\\n        { from: 6, to: 7, id: 'f' },\\n        { from: 7, to: 8, id: 'g' },\\n        { from: 8, to: 9, id: 'h' },\\n        { from: 9, to: 10, id: 'i' },\\n        { from: 10, to: 11, id: 'i' },\\n        { from: 11, to: 12, id: 'i' },\\n        { from: 12, to: 13, id: 'i' },\\n        { from: 13, to: 14, id: 'i' },\\n        { from: 14, to: 15, id: 'i' },\\n      ]}\\n    />\\n  );\\n};\\n\\n// export const FormObjecySample = () => {\\n//   return <FromItem title='parent' type={'object'}>\\n//         <FromItem name='child' title='111' type={'string'}/>\\n//   </FromItem>\\n// }\\n\",\"locationsMap\":{\"基本示例-chart--test-chart\":{\"startLoc\":{\"col\":25,\"line\":71},\"endLoc\":{\"col\":1,\"line\":180},\"startBody\":{\"col\":25,\"line\":71},\"endBody\":{\"col\":1,\"line\":180}}}},\n    info: { inline: true },\n  },\n};\n\nfunction getRowIndex(index: number, colNumberInRow: number) {\n  const positionIndex = index + 1;\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\n  return rowNumber;\n}\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\n  let rowNumber = getRowIndex(index, colNumberInRow);\n  const positionIndex = index + 1;\n  const isEven = rowNumber % 2 === 0;\n  let xDistance = 0;\n  if (isEven) {\n    xDistance = (positionIndex - 1) % colNumberInRow;\n  } else {\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\n  }\n  return {\n    row: rowNumber,\n    xDistance,\n  };\n}\nfunction getRealIndex(index: number, colNumberInRow: number) {\n  let rowIndex = 0;\n  if (index < colNumberInRow) {\n    rowIndex = 0;\n  } else {\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\n  }\n  Math.floor(index / colNumberInRow);\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\n}\nfunction createLayout(\n  nodes: { id: any }[],\n  options: {\n    nodeConfig: { width: number; height: number };\n    rowGap: number;\n    colGap: number;\n    rowNumber?: number;\n  } = {} as any\n): INode[] {\n  const {\n    colGap = 100,\n    rowGap = 70,\n    rowNumber: rowNumbers = 5,\n    nodeConfig = {} as any,\n  } = options;\n  const { width = 200, height = 100 } = nodeConfig;\n\n  let newNodes = [] as INode[];\n  nodes.forEach((node, index) => {\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\n\n    const x = xDistance * (width + colGap);\n    const y = row * (height + rowGap);\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\n  });\n  return newNodes;\n}\nexport const TestChart = addSourceDecorator(() => {\n  const newNodes = createLayout([\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 },\n    { id: 11 },\n    { id: 12 },\n    { id: 13 },\n    { id: 14 },\n    { id: 15 },\n    { id: 16 },\n    { id: 17 },\n    { id: 18 },\n    { id: 19 },\n  ]);\n  console.log('newNodes: ', newNodes);\n  return (\n    <SupplyChain\n      nodeConfig={{\n        width: 200,\n        height: 130,\n      }}\n      edgeConfig={{\n        width: 62,\n        height: 44,\n        color: 'rgb(184,184,184)',\n        extraWidth: 50,\n      }}\n      left={0}\n      top={0}\n      svgConfig={{\n        width: 1500,\n        height: 1000,\n      }}\n      edgeRender={(id) => {\n        return (\n          <div\n            style={{\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 20,\n              background: 'rgb(184,184,184)'\n            }}\n          >{id}</div>\n        );\n      }}\n      nodeRender={(id) => {\n        return (\n          <div\n            style={{\n              padding: '15px 0px',\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: 40,\n                width: 40,\n                borderRadius: '50%',\n                background: 'rgb(132,104,204)',\n              }}\n            >\n              {id}\n            </div>\n            <strong>配送供应商</strong>\n            <Select></Select>\n          </div>\n        );\n      }}\n      nodes={newNodes}\n      edges={[\n        { from: 1, to: 2, id: 'a' },\n        { from: 2, to: 3, id: 'b' },\n        { from: 3, to: 4, id: 'c' },\n        { from: 4, to: 5, id: 'd' },\n        { from: 5, to: 6, id: 'e' },\n        { from: 6, to: 7, id: 'f' },\n        { from: 7, to: 8, id: 'g' },\n        { from: 8, to: 9, id: 'h' },\n        { from: 9, to: 10, id: 'i' },\n        { from: 10, to: 11, id: 'i' },\n        { from: 11, to: 12, id: 'i' },\n        { from: 12, to: 13, id: 'i' },\n        { from: 13, to: 14, id: 'i' },\n        { from: 14, to: 15, id: 'i' },\n      ]}\n    />\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-chart--test-chart":{startLoc:{col:25,line:93},endLoc:{col:139,line:202},startBody:{col:25,line:93},endBody:{col:139,line:202}}}},storySource:{source:"import React from 'react';\nimport { SchemaMarkupField, SchemaForm } from '@uform/next';\nimport { Button } from '@alifd/next';\nimport { useState } from 'react';\nimport SupplyChain, { INode } from './chart';\nimport { Select } from '@alifd/next';\nexport default {\n  title: '基本示例|Chart',\n  parameters: {\n    info: { inline: true },\n  },\n};\n\nfunction getRowIndex(index: number, colNumberInRow: number) {\n  const positionIndex = index + 1;\n  let rowNumber = Math.ceil(positionIndex / colNumberInRow) - 1;\n  return rowNumber;\n}\nfunction getVirtualIndex(index: number, colNumberInRow: number) {\n  let rowNumber = getRowIndex(index, colNumberInRow);\n  const positionIndex = index + 1;\n  const isEven = rowNumber % 2 === 0;\n  let xDistance = 0;\n  if (isEven) {\n    xDistance = (positionIndex - 1) % colNumberInRow;\n  } else {\n    xDistance = colNumberInRow * (rowNumber + 1) - positionIndex;\n  }\n  return {\n    row: rowNumber,\n    xDistance,\n  };\n}\nfunction getRealIndex(index: number, colNumberInRow: number) {\n  let rowIndex = 0;\n  if (index < colNumberInRow) {\n    rowIndex = 0;\n  } else {\n    rowIndex = Math.ceil((index + 1 - colNumberInRow) / (colNumberInRow - 1));\n  }\n  Math.floor(index / colNumberInRow);\n  return getVirtualIndex(index + rowIndex, colNumberInRow);\n}\nfunction createLayout(\n  nodes: { id: any }[],\n  options: {\n    nodeConfig: { width: number; height: number };\n    rowGap: number;\n    colGap: number;\n    rowNumber?: number;\n  } = {} as any\n): INode[] {\n  const {\n    colGap = 100,\n    rowGap = 70,\n    rowNumber: rowNumbers = 5,\n    nodeConfig = {} as any,\n  } = options;\n  const { width = 200, height = 100 } = nodeConfig;\n\n  let newNodes = [] as INode[];\n  nodes.forEach((node, index) => {\n    const { row, xDistance } = getRealIndex(index, rowNumbers);\n\n    const x = xDistance * (width + colGap);\n    const y = row * (height + rowGap);\n    newNodes.push({ ...node, x: width / 2 + x, y: height / 2 + y });\n  });\n  return newNodes;\n}\nexport const TestChart = () => {\n  const newNodes = createLayout([\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n    { id: 8 },\n    { id: 9 },\n    { id: 10 },\n    { id: 11 },\n    { id: 12 },\n    { id: 13 },\n    { id: 14 },\n    { id: 15 },\n    { id: 16 },\n    { id: 17 },\n    { id: 18 },\n    { id: 19 },\n  ]);\n  console.log('newNodes: ', newNodes);\n  return (\n    <SupplyChain\n      nodeConfig={{\n        width: 200,\n        height: 130,\n      }}\n      edgeConfig={{\n        width: 62,\n        height: 44,\n        color: 'rgb(184,184,184)',\n        extraWidth: 50,\n      }}\n      left={0}\n      top={0}\n      svgConfig={{\n        width: 1500,\n        height: 1000,\n      }}\n      edgeRender={(id) => {\n        return (\n          <div\n            style={{\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n              borderRadius: 20,\n              background: 'rgb(184,184,184)'\n            }}\n          >{id}</div>\n        );\n      }}\n      nodeRender={(id) => {\n        return (\n          <div\n            style={{\n              padding: '15px 0px',\n              display: 'flex',\n              width: '100%',\n              height: '100%',\n              fontSize: 20,\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: 40,\n                width: 40,\n                borderRadius: '50%',\n                background: 'rgb(132,104,204)',\n              }}\n            >\n              {id}\n            </div>\n            <strong>配送供应商</strong>\n            <Select></Select>\n          </div>\n        );\n      }}\n      nodes={newNodes}\n      edges={[\n        { from: 1, to: 2, id: 'a' },\n        { from: 2, to: 3, id: 'b' },\n        { from: 3, to: 4, id: 'c' },\n        { from: 4, to: 5, id: 'd' },\n        { from: 5, to: 6, id: 'e' },\n        { from: 6, to: 7, id: 'f' },\n        { from: 7, to: 8, id: 'g' },\n        { from: 8, to: 9, id: 'h' },\n        { from: 9, to: 10, id: 'i' },\n        { from: 10, to: 11, id: 'i' },\n        { from: 11, to: 12, id: 'i' },\n        { from: 12, to: 13, id: 'i' },\n        { from: 13, to: 14, id: 'i' },\n        { from: 14, to: 15, id: 'i' },\n      ]}\n    />\n  );\n};\n\n// export const FormObjecySample = () => {\n//   return <FromItem title='parent' type={'object'}>\n//         <FromItem name='child' title='111' type={'string'}/>\n//   </FromItem>\n// }\n",locationsMap:{"基本示例-chart--test-chart":{startLoc:{col:25,line:71},endLoc:{col:1,line:180},startBody:{col:25,line:71},endBody:{col:1,line:180}}}},info:{inline:!0}}};function getVirtualIndex(index,colNumberInRow){let rowNumber=function getRowIndex(index,colNumberInRow){const positionIndex=index+1;return Math.ceil(positionIndex/colNumberInRow)-1}(index,colNumberInRow);const positionIndex=index+1;let xDistance=0;return xDistance=rowNumber%2==0?(positionIndex-1)%colNumberInRow:colNumberInRow*(rowNumber+1)-positionIndex,{row:rowNumber,xDistance:xDistance}}function createLayout(nodes,options={}){const{colGap:colGap=100,rowGap:rowGap=70,rowNumber:rowNumbers=5,nodeConfig:nodeConfig={}}=options,{width:width=200,height:height=100}=nodeConfig;let newNodes=[];return nodes.forEach((node,index)=>{const{row:row,xDistance:xDistance}=function getRealIndex(index,colNumberInRow){let rowIndex=0;return rowIndex=index<colNumberInRow?0:Math.ceil((index+1-colNumberInRow)/(colNumberInRow-1)),Math.floor(index/colNumberInRow),getVirtualIndex(index+rowIndex,colNumberInRow)}(index,rowNumbers),x=xDistance*(width+colGap),y=row*(height+rowGap);newNodes.push(Object.assign(Object.assign({},node),{x:width/2+x,y:height/2+y}))}),newNodes}const TestChart=addSourceDecorator(addSourceDecorator(addSourceDecorator(()=>{const newNodes=createLayout([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6},{id:7},{id:8},{id:9},{id:10},{id:11},{id:12},{id:13},{id:14},{id:15},{id:16},{id:17},{id:18},{id:19}]);return console.log("newNodes: ",newNodes),react_default.a.createElement(SupplyChain,{nodeConfig:{width:200,height:130},edgeConfig:{width:62,height:44,color:"rgb(184,184,184)",extraWidth:50},left:0,top:0,svgConfig:{width:1500,height:1e3},edgeRender:id=>react_default.a.createElement("div",{style:{display:"flex",width:"100%",height:"100%",fontSize:20,flexDirection:"column",alignItems:"center",justifyContent:"center",borderRadius:20,background:"rgb(184,184,184)"}},id),nodeRender:id=>react_default.a.createElement("div",{style:{padding:"15px 0px",display:"flex",width:"100%",height:"100%",fontSize:20,flexDirection:"column",alignItems:"center",justifyContent:"space-between"}},react_default.a.createElement("div",{style:{display:"flex",alignItems:"center",justifyContent:"center",height:40,width:40,borderRadius:"50%",background:"rgb(132,104,204)"}},id),react_default.a.createElement("strong",null,"配送供应商"),react_default.a.createElement(es_select.a,null)),nodes:newNodes,edges:[{from:1,to:2,id:"a"},{from:2,to:3,id:"b"},{from:3,to:4,id:"c"},{from:4,to:5,id:"d"},{from:5,to:6,id:"e"},{from:6,to:7,id:"f"},{from:7,to:8,id:"g"},{from:8,to:9,id:"h"},{from:9,to:10,id:"i"},{from:10,to:11,id:"i"},{from:11,to:12,id:"i"},{from:12,to:13,id:"i"},{from:13,to:14,id:"i"},{from:14,to:15,id:"i"}]})},{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/chart.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/chart.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/chart.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__})},2359:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"b",(function(){return useForceUpdate}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),global=__webpack_require__(144),src_global=__webpack_require__(161),shareContext=__webpack_require__(125),RdxContext_interface=__webpack_require__(35),utils=__webpack_require__(163),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function getTaskInfo(props){const{context:context}=props;return __rest(props,["context"])}function useMount(){const mount=Object(react.useRef)(!1);return Object(react.useEffect)(()=>{mount.current=!0},[]),mount}function useStateUpdate(id,context,type){const forceUpdate=useForceUpdate();Object(react.useEffect)(()=>{const eventKey=id+"----"+type;return context.eventEmitter.on(eventKey,()=>{forceUpdate()}),()=>{context.eventEmitter.off(eventKey)}},[])}var View_rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};__webpack_exports__.a=props=>react_default.a.createElement(shareContext.b,null,context=>react_default.a.createElement(Module,Object.assign({},props,{context:context})));function Module(props){const{id:id,scope:scope,defaultValue:defaultValue}=props;return useMount().current||void 0===defaultValue||void 0!==props.context.getTaskState(id,scope)||props.context.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TaskState,defaultValue),function useTaskInit(props){const{context:context,id:id}=props,taskInfo=getTaskInfo(props);Object(react.useEffect)(()=>(context.parentMounted?context.addOrUpdateTask(id,taskInfo,{notifyTask:!0,notifyView:!0}):(context.udpateState(id,RdxContext_interface.a.Update,RdxContext_interface.b.TasksMap,taskInfo),context.queue.add(id)),()=>{context.udpateState(id,RdxContext_interface.a.Remove,RdxContext_interface.b.TasksMap)}),[])}(props),function useTaskUpdate(nextProps){const{context:context,reaction:model,moduleConfig:modelConfig,scope:scope,deps:depsIds,id:id}=nextProps,mount=useMount();Object(react.useEffect)(()=>{if(mount.current){const taskInfo=getTaskInfo(nextProps);if(context.tasksMap.get(id)){const preTaskInfo=context.tasksMap.get(id),isTaskChange=Object(utils.b)(preTaskInfo,taskInfo,utils.a.ExecuteTask),isViewChange=Object(utils.b)(preTaskInfo,taskInfo,utils.a.ViewShouldUpdate);context.addOrUpdateTask(id,taskInfo,{notifyTask:isTaskChange,notifyView:isViewChange})}else context.removeTask(id),context.addOrUpdateTask(id,taskInfo,{notifyTask:!0,notifyView:!1})}},[mount.current,id,depsIds,model,scope,modelConfig])}(props),react_default.a.createElement(View_MomeAtomComponent,Object.assign({},props))}const isLoading=props=>{var _a;return(null===(_a=props.context.taskStatus.get(props.id))||void 0===_a?void 0:_a.value)===global.a.Waiting};function AtomComponent(props){const{id:id,context:context}=props,taskInfo=context.tasksMap.get(id),{render:render,moduleConfig:moduleConfig,deps:deps,component:component,scope:scope}=taskInfo||props;useStateUpdate(id,context,src_global.b.State),useStateUpdate(id,context,src_global.b.ReactionStatus);const data=Object.assign(Object.assign({},Object(utils.c)(id,context,props)),{next:(selfValue,options)=>{context.next(id,selfValue,options)},dispatchById:(id,action,options)=>{context.dispatchAction(id,action,options)},dispatch:(action,options)=>{context.dispatchAction(id,action,options)},refreshView:()=>{context.notifyModule(id)},nextById:(id,selfValue,options)=>{context.next(id,selfValue,options)},loading:isLoading(props),mergeScopeState2Global:()=>{context.mergeScopeState2Global(id)},value:context.taskState.get(id,scope),status:context.taskStatus.get(id)&&context.taskStatus.get(id).value?context.taskStatus.get(id).value:src_global.a.FirstRender,errorMsg:(context.taskStatus.get(id)||{}).errorMsg,refresh:context.refresh.bind(null,id)}),Component=component;return component?react_default.a.createElement(Component,Object.assign({},data)):react_default.a.createElement(react_default.a.Fragment,null,render?render(data):null)}class View_MomeAtomComponent extends react_default.a.Component{shouldComponentUpdate(nextProps){return this.props.id!==nextProps.id}render(){const _a=this.props,{context:context}=_a,rest=View_rest(_a,["context"]);return react_default.a.createElement(AtomComponent,Object.assign({context:context},rest))}}const useForceUpdate=()=>{const[state,setState]=Object(react.useState)(1);return()=>{setState(state=>state+1)}}},2363:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return FormLayout}));var _hooks_formLayoutHoooks__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(222),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);const FormLayout=props=>{const{children:children,labelCol:labelCol=8,wrapCol:wrapCol=16,labelTextAlign:labelTextAlign="right"}=props;return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_hooks_formLayoutHoooks__WEBPACK_IMPORTED_MODULE_0__.a.Provider,{value:{layoutType:_hooks_formLayoutHoooks__WEBPACK_IMPORTED_MODULE_0__.b.Grid,labelCol:labelCol,wrapCol:wrapCol,labelTextAlign:labelTextAlign}},children)}},2367:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"d",(function(){return isPromise})),__webpack_require__.d(__webpack_exports__,"c",(function(){return getEmptyValue})),__webpack_require__.d(__webpack_exports__,"b",(function(){return getChlidFieldInfo})),__webpack_require__.d(__webpack_exports__,"a",(function(){return get})),__webpack_require__.d(__webpack_exports__,"e",(function(){return set}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react);function isPromise(obj){return!!obj&&("object"==typeof obj||"function"==typeof obj)&&"function"==typeof obj.then}function getEmptyValue(fieldDefine){const{type:type,default:defaultValue}=fieldDefine;return void 0!==defaultValue?function isFunction(a){return"function"==typeof a}(defaultValue)?defaultValue():defaultValue:"string"===type?"":"array"===type?[]:"object"===type?{}:"number"===type?0:void 0}function getChlidFieldInfos(children){let itemRefs=[];return react_default.a.Children.forEach(children,(child,index)=>{const{name:name,title:title,type:type,xComponent:xComponent}=child.props;itemRefs.push({title:title,type:type,name:name,child:child,xComponent:xComponent})}),itemRefs}function getChlidFieldInfo(children){let itemRef={};return react_default.a.Children.forEach(children,(child,index)=>{const{title:title,name:name,type:type,xComponent:xComponent,children:children,default:defaultValue}=child.props;0===index&&(itemRef="object"===type?{title:title,type:type,default:defaultValue,name:name,xComponent:xComponent,children:getChlidFieldInfos(children)}:{title:title,type:type,default:defaultValue,name:name,xComponent:xComponent})}),itemRef}function get(o,path,defaultValue){const keys=(""+path).split(".");if(!(keys&&keys.length>0))return o;{let temp=o,index=0;for(let key of keys){if(index===keys.length-1)return void 0===temp[key]?defaultValue:temp[key];if(void 0===temp[key])return defaultValue;temp=temp[key],index++}}}function set(target={},path,value){const paths=(""+path).split(".");if(paths&&paths.length>0){let temp=target,index=0;for(let path of paths)index===paths.length-1?temp[path]=value:(void 0===temp[path]&&(temp[path]={}),temp=temp[path]),index++}return target}},303:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return ErrorContextClass})),__webpack_require__.d(__webpack_exports__,"b",(function(){return ErrorContextInstance}));var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1);class ErrorContextClass{constructor(){this.errors={}}setErrors(key,errors){this.errors[key]=errors}getErrors(key){return this.errors[key]}}const ErrorContextInstance=Object(react__WEBPACK_IMPORTED_MODULE_0__.createContext)(new ErrorContextClass)},306:function(module,__webpack_exports__,__webpack_require__){"use strict";var ReactionType,TASK_PROCESS_TYPE,TaskEventType;__webpack_require__.d(__webpack_exports__,"a",(function(){return ReactionType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return TaskEventType})),function(ReactionType){ReactionType[ReactionType.Sync=1]="Sync",ReactionType[ReactionType.Async=2]="Async"}(ReactionType||(ReactionType={})),function(TASK_PROCESS_TYPE){TASK_PROCESS_TYPE[TASK_PROCESS_TYPE.UPDATE_RUNNING_GRAPH=1]="UPDATE_RUNNING_GRAPH",TASK_PROCESS_TYPE[TASK_PROCESS_TYPE.STATUS_CHANGE=2]="STATUS_CHANGE"}(TASK_PROCESS_TYPE||(TASK_PROCESS_TYPE={})),function(TaskEventType){TaskEventType.ProcessRunningGraph="ProcessRunningGraph",TaskEventType.TaskChange="TaskChange",TaskEventType.Init="Init",TaskEventType.RdxContextInit="RdxContextInit",TaskEventType.EventTrigger="EventTrigger",TaskEventType.BatchEventTrigger="BatchEventTrigger",TaskEventType.StatusChange="StatusChange",TaskEventType.StateChange="StateChange"}(TaskEventType||(TaskEventType={}))},307:function(module,__webpack_exports__,__webpack_require__){"use strict";var react=__webpack_require__(1),react_default=__webpack_require__.n(react),shareContext=__webpack_require__(125),core=__webpack_require__(160),global=__webpack_require__(161);var UiBatcher=props=>{const[state,dispatch]=react_default.a.useReducer(s=>({}),{}),storeRef=Object(react.useContext)(shareContext.c);return props.setNotifyBatcherOfChange(()=>dispatch()),Object(react.useEffect)(()=>{storeRef.uiQueue.size>0&&(Array.from(storeRef.uiQueue).forEach(id=>{storeRef.eventEmitter.emit(id+"----"+global.b.State)}),storeRef.uiQueue.clear())}),null};var RdxContext_ScheduleBatcher=props=>{const storeRef=Object(react.useContext)(shareContext.c),[_,setState]=Object(react.useState)([]);return props.setNotifyBatcherOfChange(()=>setState({})),Object(react.useEffect)(()=>{storeRef.triggerQueue.size>0&&storeRef.batchTriggerSchedule(Array.from(storeRef.triggerQueue)),storeRef.triggerQueue.clear()}),null},react_dom=__webpack_require__(12),react_dom_default=__webpack_require__.n(react_dom),typings_global=__webpack_require__(306);const RdxContext=props=>{const{initializeState:initializeState,onChange:onChange=(()=>{}),onStateChange:onStateChange=(()=>{}),shouldUpdate:shouldUpdate,state:state,name:name,withRef:withRef,createStore:createStore}=props,isUnderControl=void 0!==state,currentState=state||initializeState||{};function createTaskState(value){return createStore?createStore(currentState):new core.c(currentState)}const store=react.useRef(new shareContext.a(Object.assign(Object.assign({},Object(shareContext.e)()),{name:name,taskState:createTaskState()})));store.current.onPropsChange=onChange,store.current.onPropsStateChange=onStateChange;const uiNotifyBatcherOfChange=react.useRef(null),scheduleNotifyBatcherOfChange=react.useRef(null);return store.current.batchUiChange=()=>{uiNotifyBatcherOfChange.current()},store.current.batchTriggerChange=()=>{scheduleNotifyBatcherOfChange.current()},withRef&&(withRef.current=store.current),store.current.subject.emit(typings_global.b.RdxContextInit),react.useEffect(()=>{if(isUnderControl){const diffObjectKeys=Array.from(store.current.tasksMap.getAll().keys()).filter(key=>shouldUpdate?shouldUpdate(store.current.taskState.get(key),state[key]):state[key]!==store.current.taskState.get(key));store.current.taskState=createTaskState(),react_dom_default.a.unstable_batchedUpdates(()=>{diffObjectKeys.forEach(key=>{store.current.notifyModule(key)})})}},[state]),react.useEffect(()=>{const queue=store.current.queue;store.current.parentMounted=!0,queue.size>0&&store.current.batchTriggerSchedule(Array.from(queue).reverse().map(item=>({key:item,downStreamOnly:!1})))},[]),react.createElement(shareContext.d,{value:store.current},react.createElement(UiBatcher,{setNotifyBatcherOfChange:x=>{uiNotifyBatcherOfChange.current=x}}),react.createElement(RdxContext_ScheduleBatcher,{setNotifyBatcherOfChange:x=>{scheduleNotifyBatcherOfChange.current=x}}),props.children)};var functions=__webpack_require__(2367),formStatus=__webpack_require__(303),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};class RdxFormContext_FormStore{constructor(v){this.state={},this.runningState={},this.state=v.state,this.runningState=v.runningState}clone(){return new RdxFormContext_FormStore({state:this.state,runningState:this.runningState})}merge(scope){throw new Error("Method not implemented.")}remove(key,scope){Object(functions.e)(this.state,key,void 0),delete this.runningState[key]}update(key,value,scope){const{value:currentV}=value,rest=__rest(value,["value"]);Object(functions.e)(this.state,key,currentV),this.runningState[key]=rest}get(key,scope){const value=Object(functions.a)(this.state,key),others=this.runningState[key];return void 0===value&&void 0===others?void 0:Object.assign({disabled:!1,value:value},others)}getAll(){return{state:this.state,runningState:this.runningState}}}__webpack_exports__.a=props=>{const{state:state,children:children,initializeState:initializeState,onChange:onChange}=props,innerStateRef=Object(react.useRef)(new RdxFormContext_FormStore({state:{},runningState:{}})),contextRef=Object(react.useRef)(null),errorContextRef=Object(react.useRef)(new formStatus.a);let isUnderControl=!1;return state&&(isUnderControl=!0),react_default.a.createElement(RdxContext,{withRef:contextRef,state:isUnderControl?{state:state,runningState:innerStateRef.current.runningState}:void 0,initializeState:{state:initializeState||{},runningState:{}},shouldUpdate:(preValue,nextValue)=>!preValue||!nextValue||preValue.value!==nextValue.value,createStore:data=>new RdxFormContext_FormStore(data),onChange:(state,stateInstance)=>{innerStateRef.current=stateInstance,onChange&&onChange(state.state)}},react_default.a.createElement(formStatus.b.Provider,{value:errorContextRef.current},children))}},35:function(module,__webpack_exports__,__webpack_require__){"use strict";var PROCESS_GRAPH_TYPE,ActionType,TargetType;__webpack_require__.d(__webpack_exports__,"a",(function(){return ActionType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return TargetType})),function(PROCESS_GRAPH_TYPE){PROCESS_GRAPH_TYPE.INIT="INIT",PROCESS_GRAPH_TYPE.TASK_CHANGE="TASK_CHANGE"}(PROCESS_GRAPH_TYPE||(PROCESS_GRAPH_TYPE={})),function(ActionType){ActionType.Update="update",ActionType.Remove="remove",ActionType.Merge="merge"}(ActionType||(ActionType={})),function(TargetType){TargetType.TasksMap="tasksMap",TargetType.TaskState="taskState",TargetType.Trigger="trigger",TargetType.CustomAction="customAction",TargetType.TaskStatus="taskStatus",TargetType.CancelMap="cancelMap"}(TargetType||(TargetType={}))},559:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return getRegistry})),__webpack_require__.d(__webpack_exports__,"b",(function(){return registryRdxFormComponents}));const registry={fields:{}},getRegistry=()=>({fields:registry.fields});function registryRdxFormComponents(components){Object.keys(components).forEach(key=>{!function registryRdxFormComponent(key,component){registry.fields[key]=component}(key,components[key])})}},563:function(module,__webpack_exports__,__webpack_require__){"use strict";var BaseType;__webpack_require__.d(__webpack_exports__,"a",(function(){return BaseType})),function(BaseType){BaseType.Object="object",BaseType.Array="array",BaseType.String="string",BaseType.Number="number",BaseType.Boolean="boolean"}(BaseType||(BaseType={}))},83:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return DepsType})),__webpack_require__.d(__webpack_exports__,"b",(function(){return RdxFormItem}));var react=__webpack_require__(1),react_default=__webpack_require__.n(react),global=__webpack_require__(161),View=__webpack_require__(2359),typings_global=__webpack_require__(306),utils=__webpack_require__(163),shallowequal=__webpack_require__(162),shallowequal_default=__webpack_require__.n(shallowequal),styled_components_browser_esm=__webpack_require__(41),functions=__webpack_require__(2367),registry=__webpack_require__(559),pathContext=__webpack_require__(1003),formLayoutHoooks=__webpack_require__(222);const has=Object.prototype.hasOwnProperty,isEmpty_toString=Object.prototype.toString;function getVaildErrors(errors=[]){return errors.filter(error=>!function isEmpty(val){if(null==val)return!0;if("boolean"==typeof val)return!1;if("number"==typeof val)return!1;if("string"==typeof val)return 0===val.length;if("function"==typeof val)return 0===val.length;if(Array.isArray(val)){if(0===val.length)return!0;for(let i=0;i<val.length;i++)if(void 0!==val[i]&&null!==val[i]&&""!==val[i]&&0!==val[i])return!1;return!0}if(val instanceof Error)return""===val.message;if(val.toString===isEmpty_toString)switch(val.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===val.size;case"[object Object]":for(const key in val)if(has.call(val,key))return!1;return!0}return!1}(error))}var DepsType,formStatus=__webpack_require__(303),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function getDefaultValue(defaultValue,disabled=!1,dataSource){return{value:(a=defaultValue,"function"==typeof a?defaultValue():defaultValue),disabled:disabled,dataSource:dataSource};var a}!function(DepsType){DepsType.Relative="Relative",DepsType.Absolute="Absolute"}(DepsType||(DepsType={}));const RdxFormItem=props=>{const{name:name,reaction:reaction=(context=>{}),deps:deps=[],dataSource:dataSource,children:children,type:type,compute:compute,defaultVisible:defaultVisible,firstRender:firstRender=!0,disabled:disabled,default:defaultV}=props,rest=__rest(props,["name","reaction","deps","dataSource","children","type","compute","defaultVisible","firstRender","disabled","default"]),{paths:paths}=Object(react.useContext)(pathContext.a),atomReaction=reaction&&Object(react.useCallback)(reaction,[]),errorStore=Object(react.useContext)(formStatus.b),id=[...paths,name].join("."),atomRender=Object(react.useCallback)(context=>{const{id:id,status:status,errorMsg:errorMsg,refreshView:refreshView,value:value,next:next,moduleConfig:moduleConfig}=context;if(status===global.c.FirstRender&&!firstRender)return react_default.a.createElement(react_default.a.Fragment,null);const{xProps:xProps}=value,rest=__rest(value,["xProps"]),{xProps:xModuleProps,rules:rules=[]}=moduleConfig,restMoudleConfig=__rest(moduleConfig,["xProps","rules"]);const newProps=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},restMoudleConfig),rest),xModuleProps),xProps),{onChange:v=>{const newValue=Object.assign(Object.assign({},value),{value:v});compute?compute(v,context):next(newValue),function validator(value,context){return __awaiter(this,void 0,void 0,(function*(){let infos=[];for(let rule of rules)infos.push(yield rule(value,context));return infos}))}(v,context).then(errors=>{errorStore.setErrors(id,errors),refreshView()}).catch(error=>{console.error("规则执行错误",error.toString())})}});return react_default.a.createElement(FromItem,{rules:rules,xProps:newProps,status:status,formErrorMsg:errorStore.getErrors(id),errorMsg:errorMsg},children)},[]);return react_default.a.createElement(View.a,{id:id,reactionType:Object(functions.d)(reaction)?typings_global.a.Async:typings_global.a.Sync,defaultValue:getDefaultValue(defaultV,disabled,dataSource),moduleConfig:Object.assign(Object.assign({name:name,type:type,dataSource:dataSource},rest),{visible:void 0===defaultVisible}),areEqualForTask:(type,preConfig,nextConfig)=>type===utils.a.ExecuteTask||Object.keys(nextConfig).every(key=>shallowequal_default()(preConfig[key],nextConfig[key])),reaction:atomReaction,deps:deps.map(item=>({id:item.type===DepsType.Absolute?item.id:[...paths,item.id].join(".")})),render:atomRender})};function getDisplayType(props){const{layoutType:layoutType}=props;let style={};return layoutType?layoutType===formLayoutHoooks.b.Grid?style.display="block":style.display="inline-block":style.display="block",style}const FormStyleItemLabel=styled_components_browser_esm.b.div`
  line-height: 28px;
  vertical-align: top;
  color: #666666;
  display: inline-block;
  text-align: right;
  padding-right: 12px;
  line-height: 28px;
`,FormStyleItemContent=styled_components_browser_esm.b.div`
  line-height: 28px;
  /* flex:  */
`,FormItemWrapper=styled_components_browser_esm.b.div`
  margin-bottom: 16px;
`,FromItem=props=>{const{children:children,formErrorMsg:formErrorMsg,status:status,errorMsg:errorMsg,xProps:xProps={}}=props,{title:title,dataSource:dataSource,disabled:disabled,visible:visible,name:name,type:type,xComponent:xComponent,desc:desc,rules:rules}=xProps,rest=__rest(xProps,["title","dataSource","disabled","visible","name","type","xComponent","desc","rules"]),Cmp=Object(registry.a)().fields[xComponent||type],transformProps=Object.assign(Object.assign({name:name,status:status,loading:status===global.c.Waiting||status===global.c.Running,error:status===global.c.Error},rest),{children:children});dataSource&&(transformProps.dataSource=dataSource),disabled&&(transformProps.disabled=disabled);const layoutContext=Object(react.useContext)(formLayoutHoooks.a),{labelCol:labelCol,wrapCol:wrapCol,layoutType:layoutType,labelTextAlign:labelTextAlign}=layoutContext,isGrid=layoutType===formLayoutHoooks.b.Grid;return console.log("visible: ",name,visible),react_default.a.createElement(react_default.a.Fragment,null,visible&&react_default.a.createElement(FormItemWrapper,{isGrid:isGrid,style:layoutType?isGrid?{display:"flex"}:{display:"inline"}:void 0,className:"rdx-form-item"},title&&react_default.a.createElement(FormStyleItemLabel,{style:{flex:"0 0 "+getWidth(labelCol),textAlign:labelTextAlign},layoutType:layoutType,className:"rdx-form-item-label"},title),react_default.a.createElement(FormStyleItemContent,{style:Object.assign(Object.assign({},getDisplayType(layoutContext)),{flex:"0 0 "+getWidth(wrapCol)}),layoutType:layoutType,className:"rdx-form-item-content"},Cmp&&react_default.a.createElement(Cmp,Object.assign({},transformProps)),react_default.a.createElement("div",{style:{color:"#999999"}},desc),react_default.a.createElement("div",{style:{color:"red"}},function isError(errors){return getVaildErrors(errors).length>0}(formErrorMsg)&&formErrorMsg))))};function getWidth(col){return col/24*100+"%"}},91:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"setup",(function(){return setup})),__webpack_require__.d(__webpack_exports__,"XComponentType",(function(){return XComponentType}));var XComponentType,_czwcode_rdx_form__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(559),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1),react__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__),_components_ArrayTableField__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(1013),_alifd_next__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(164),_alifd_next__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(2358),_alifd_next__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(305),_alifd_next__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(2357),_alifd_next__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(253),__rest=function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t};function setup(){Object(_czwcode_rdx_form__WEBPACK_IMPORTED_MODULE_0__.b)({string:_alifd_next__WEBPACK_IMPORTED_MODULE_3__.a,arrayTable:_components_ArrayTableField__WEBPACK_IMPORTED_MODULE_2__.a,select:_alifd_next__WEBPACK_IMPORTED_MODULE_4__.a,radio:_alifd_next__WEBPACK_IMPORTED_MODULE_5__.a.Group,boolean:_alifd_next__WEBPACK_IMPORTED_MODULE_6__.a,checkbox:props=>{const{value:value,onChange:onChange}=props,rest=__rest(props,["value","onChange"]);return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_alifd_next__WEBPACK_IMPORTED_MODULE_7__.a,Object.assign({checked:value,onChange:onChange},rest))}})}!function(XComponentType){XComponentType.Select="select",XComponentType.Radio="radio",XComponentType.Checkbox="checkbox",XComponentType.Color="color",XComponentType.Json="json",XComponentType.JsonEditor="jsonEditor",XComponentType.Code="code",XComponentType.ArrayTable="arrayTable",XComponentType.Tree="tree"}(XComponentType||(XComponentType={}))}},[[1019,1,2]]]);
//# sourceMappingURL=main.2286d773be1dbe526042.bundle.js.map